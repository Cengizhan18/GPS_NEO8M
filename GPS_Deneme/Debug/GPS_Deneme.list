
GPS_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08006c58  08006c58  00016c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070dc  080070dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e4  080070e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080070ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001e0  080072cc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080072cc  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a70  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a36  00000000  00000000  00029c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167e7  00000000  00000000  0002c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f3f  00000000  00000000  00042da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008834c  00000000  00000000  0004cce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5032  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a8  00000000  00000000  000d5084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c40 	.word	0x08006c40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006c40 	.word	0x08006c40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b9aa 	b.w	8000f38 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f83c 	bl	8000c68 <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2lz>:
 8000bfc:	b538      	push	{r3, r4, r5, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2300      	movs	r3, #0
 8000c02:	4604      	mov	r4, r0
 8000c04:	460d      	mov	r5, r1
 8000c06:	f7ff ff71 	bl	8000aec <__aeabi_dcmplt>
 8000c0a:	b928      	cbnz	r0, 8000c18 <__aeabi_d2lz+0x1c>
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	4629      	mov	r1, r5
 8000c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c14:	f000 b80a 	b.w	8000c2c <__aeabi_d2ulz>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c1e:	f000 f805 	bl	8000c2c <__aeabi_d2ulz>
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop

08000c2c <__aeabi_d2ulz>:
 8000c2c:	b5d0      	push	{r4, r6, r7, lr}
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <__aeabi_d2ulz+0x34>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	4606      	mov	r6, r0
 8000c34:	460f      	mov	r7, r1
 8000c36:	f7ff fce7 	bl	8000608 <__aeabi_dmul>
 8000c3a:	f7ff ffa7 	bl	8000b8c <__aeabi_d2uiz>
 8000c3e:	4604      	mov	r4, r0
 8000c40:	f7ff fc68 	bl	8000514 <__aeabi_ui2d>
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <__aeabi_d2ulz+0x38>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	f7ff fcde 	bl	8000608 <__aeabi_dmul>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	460b      	mov	r3, r1
 8000c50:	4630      	mov	r0, r6
 8000c52:	4639      	mov	r1, r7
 8000c54:	f7ff fb20 	bl	8000298 <__aeabi_dsub>
 8000c58:	f7ff ff98 	bl	8000b8c <__aeabi_d2uiz>
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c60:	3df00000 	.word	0x3df00000
 8000c64:	41f00000 	.word	0x41f00000

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3371      	adds	r3, #113	; 0x71
 8000f54:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000f56:	e002      	b.n	8000f5e <prv_parse_number+0x22>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <prv_parse_number+0x30>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d0f5      	beq.n	8000f58 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b2d      	cmp	r3, #45	; 0x2d
 8000f72:	d104      	bne.n	8000f7e <prv_parse_number+0x42>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <prv_parse_number+0x44>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000f82:	e00d      	b.n	8000fa0 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	461a      	mov	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3b30      	subs	r3, #48	; 0x30
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <prv_parse_number+0x7a>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b2f      	cmp	r3, #47	; 0x2f
 8000fac:	d903      	bls.n	8000fb6 <prv_parse_number+0x7a>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b39      	cmp	r3, #57	; 0x39
 8000fb4:	d9e6      	bls.n	8000f84 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <prv_parse_number+0x86>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	e000      	b.n	8000fc4 <prv_parse_number+0x88>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d106      	bne.n	8000fee <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3371      	adds	r3, #113	; 0x71
 8000fe4:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000fe6:	e002      	b.n	8000fee <prv_parse_float_number+0x1e>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <prv_parse_float_number+0x2c>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d0f5      	beq.n	8000fe8 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f003 fda8 	bl	8004b54 <strtod>
 8001004:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8001008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800100c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001010:	eeb0 0a47 	vmov.f32	s0, s14
 8001014:	eef0 0a67 	vmov.f32	s1, s15
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffd0 	bl	8000fd0 <prv_parse_float_number>
 8001030:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001034:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001038:	f7ff fd80 	bl	8000b3c <__aeabi_d2iz>
 800103c:	4603      	mov	r3, r0
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <prv_parse_lat_long+0x94>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1152      	asrs	r2, r2, #5
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa72 	bl	8000534 <__aeabi_i2d>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <prv_parse_lat_long+0x98>)
 800105e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001062:	f7ff fad1 	bl	8000608 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800106e:	f7ff f913 	bl	8000298 <__aeabi_dsub>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <prv_parse_lat_long+0x9c>)
 8001080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001090:	f7ff f904 	bl	800029c <__adddf3>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 800109c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80010a4:	eeb0 0a47 	vmov.f32	s0, s14
 80010a8:	eef0 0a67 	vmov.f32	s1, s15
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	51eb851f 	.word	0x51eb851f
 80010b8:	40590000 	.word	0x40590000
 80010bc:	404e0000 	.word	0x404e0000

080010c0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80010c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80010d0:	2900      	cmp	r1, #0
 80010d2:	d169      	bne.n	80011a8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3371      	adds	r3, #113	; 0x71
 80010d8:	2206      	movs	r2, #6
 80010da:	49ba      	ldr	r1, [pc, #744]	; (80013c4 <prv_parse_term+0x304>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 ff03 	bl	8003ee8 <strncmp>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d009      	beq.n	80010fc <prv_parse_term+0x3c>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3371      	adds	r3, #113	; 0x71
 80010ec:	2206      	movs	r2, #6
 80010ee:	49b6      	ldr	r1, [pc, #728]	; (80013c8 <prv_parse_term+0x308>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fef9 	bl	8003ee8 <strncmp>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001104:	e04e      	b.n	80011a4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3371      	adds	r3, #113	; 0x71
 800110a:	2206      	movs	r2, #6
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <prv_parse_term+0x30c>)
 800110e:	4618      	mov	r0, r3
 8001110:	f002 feea 	bl	8003ee8 <strncmp>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d009      	beq.n	800112e <prv_parse_term+0x6e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3371      	adds	r3, #113	; 0x71
 800111e:	2206      	movs	r2, #6
 8001120:	49ab      	ldr	r1, [pc, #684]	; (80013d0 <prv_parse_term+0x310>)
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fee0 	bl	8003ee8 <strncmp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d104      	bne.n	8001138 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2202      	movs	r2, #2
 8001132:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001136:	e035      	b.n	80011a4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3371      	adds	r3, #113	; 0x71
 800113c:	2206      	movs	r2, #6
 800113e:	49a5      	ldr	r1, [pc, #660]	; (80013d4 <prv_parse_term+0x314>)
 8001140:	4618      	mov	r0, r3
 8001142:	f002 fed1 	bl	8003ee8 <strncmp>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <prv_parse_term+0xa0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3371      	adds	r3, #113	; 0x71
 8001150:	2206      	movs	r2, #6
 8001152:	49a1      	ldr	r1, [pc, #644]	; (80013d8 <prv_parse_term+0x318>)
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fec7 	bl	8003ee8 <strncmp>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001168:	e01c      	b.n	80011a4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3371      	adds	r3, #113	; 0x71
 800116e:	2206      	movs	r2, #6
 8001170:	499a      	ldr	r1, [pc, #616]	; (80013dc <prv_parse_term+0x31c>)
 8001172:	4618      	mov	r0, r3
 8001174:	f002 feb8 	bl	8003ee8 <strncmp>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <prv_parse_term+0xd2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3371      	adds	r3, #113	; 0x71
 8001182:	2206      	movs	r2, #6
 8001184:	4996      	ldr	r1, [pc, #600]	; (80013e0 <prv_parse_term+0x320>)
 8001186:	4618      	mov	r0, r3
 8001188:	f002 feae 	bl	8003ee8 <strncmp>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d104      	bne.n	800119c <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2204      	movs	r2, #4
 8001196:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800119a:	e003      	b.n	80011a4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e233      	b.n	8001610 <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80011ae:	2900      	cmp	r1, #0
 80011b0:	f000 822d 	beq.w	800160e <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80011ba:	2901      	cmp	r1, #1
 80011bc:	f040 80c9 	bne.w	8001352 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80011c6:	3b01      	subs	r3, #1
 80011c8:	2b0a      	cmp	r3, #10
 80011ca:	f200 8213 	bhi.w	80015f4 <prv_parse_term+0x534>
 80011ce:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <prv_parse_term+0x114>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	08001201 	.word	0x08001201
 80011d8:	0800127b 	.word	0x0800127b
 80011dc:	08001291 	.word	0x08001291
 80011e0:	080012bb 	.word	0x080012bb
 80011e4:	080012d1 	.word	0x080012d1
 80011e8:	080012fb 	.word	0x080012fb
 80011ec:	0800130f 	.word	0x0800130f
 80011f0:	080015f5 	.word	0x080015f5
 80011f4:	08001323 	.word	0x08001323
 80011f8:	080015f5 	.word	0x080015f5
 80011fc:	0800133b 	.word	0x0800133b
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001206:	3b30      	subs	r3, #48	; 0x30
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	4413      	add	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	b2da      	uxtb	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800121a:	4413      	add	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	3b30      	subs	r3, #48	; 0x30
 8001220:	b2da      	uxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800122e:	3b30      	subs	r3, #48	; 0x30
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b2da      	uxtb	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001242:	4413      	add	r3, r2
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3b30      	subs	r3, #48	; 0x30
 8001248:	b2da      	uxtb	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001256:	3b30      	subs	r3, #48	; 0x30
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800126a:	4413      	add	r3, r2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3b30      	subs	r3, #48	; 0x30
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001278:	e1c9      	b.n	800160e <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fed0 	bl	8001020 <prv_parse_lat_long>
 8001280:	eeb0 7a40 	vmov.f32	s14, s0
 8001284:	eef0 7a60 	vmov.f32	s15, s1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800128e:	e1be      	b.n	800160e <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001296:	2b53      	cmp	r3, #83	; 0x53
 8001298:	d005      	beq.n	80012a6 <prv_parse_term+0x1e6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012a0:	2b73      	cmp	r3, #115	; 0x73
 80012a2:	f040 81a9 	bne.w	80015f8 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80012ac:	4690      	mov	r8, r2
 80012ae:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80012b8:	e19e      	b.n	80015f8 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff feb0 	bl	8001020 <prv_parse_lat_long>
 80012c0:	eeb0 7a40 	vmov.f32	s14, s0
 80012c4:	eef0 7a60 	vmov.f32	s15, s1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80012ce:	e19e      	b.n	800160e <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012d6:	2b57      	cmp	r3, #87	; 0x57
 80012d8:	d005      	beq.n	80012e6 <prv_parse_term+0x226>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012e0:	2b77      	cmp	r3, #119	; 0x77
 80012e2:	f040 818b 	bne.w	80015fc <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80012ec:	4614      	mov	r4, r2
 80012ee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 80012f8:	e180      	b.n	80015fc <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80012fa:	2100      	movs	r1, #0
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe1d 	bl	8000f3c <prv_parse_number>
 8001302:	4603      	mov	r3, r0
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 800130c:	e17f      	b.n	800160e <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fe13 	bl	8000f3c <prv_parse_number>
 8001316:	4603      	mov	r3, r0
 8001318:	b2da      	uxtb	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001320:	e175      	b.n	800160e <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fe53 	bl	8000fd0 <prv_parse_float_number>
 800132a:	eeb0 7a40 	vmov.f32	s14, s0
 800132e:	eef0 7a60 	vmov.f32	s15, s1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001338:	e169      	b.n	800160e <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff fe47 	bl	8000fd0 <prv_parse_float_number>
 8001342:	eeb0 7a40 	vmov.f32	s14, s0
 8001346:	eef0 7a60 	vmov.f32	s15, s1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001350:	e15d      	b.n	800160e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001358:	2902      	cmp	r1, #2
 800135a:	f040 8083 	bne.w	8001464 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001364:	3b02      	subs	r3, #2
 8001366:	2b0f      	cmp	r3, #15
 8001368:	d860      	bhi.n	800142c <prv_parse_term+0x36c>
 800136a:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <prv_parse_term+0x2b0>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	080013b1 	.word	0x080013b1
 8001374:	0800142d 	.word	0x0800142d
 8001378:	0800142d 	.word	0x0800142d
 800137c:	0800142d 	.word	0x0800142d
 8001380:	0800142d 	.word	0x0800142d
 8001384:	0800142d 	.word	0x0800142d
 8001388:	0800142d 	.word	0x0800142d
 800138c:	0800142d 	.word	0x0800142d
 8001390:	0800142d 	.word	0x0800142d
 8001394:	0800142d 	.word	0x0800142d
 8001398:	0800142d 	.word	0x0800142d
 800139c:	0800142d 	.word	0x0800142d
 80013a0:	0800142d 	.word	0x0800142d
 80013a4:	080013e5 	.word	0x080013e5
 80013a8:	080013fd 	.word	0x080013fd
 80013ac:	08001415 	.word	0x08001415
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fdc2 	bl	8000f3c <prv_parse_number>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80013c2:	e124      	b.n	800160e <prv_parse_term+0x54e>
 80013c4:	08006c58 	.word	0x08006c58
 80013c8:	08006c60 	.word	0x08006c60
 80013cc:	08006c68 	.word	0x08006c68
 80013d0:	08006c70 	.word	0x08006c70
 80013d4:	08006c78 	.word	0x08006c78
 80013d8:	08006c80 	.word	0x08006c80
 80013dc:	08006c88 	.word	0x08006c88
 80013e0:	08006c90 	.word	0x08006c90
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80013e4:	2100      	movs	r1, #0
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fdf2 	bl	8000fd0 <prv_parse_float_number>
 80013ec:	eeb0 7a40 	vmov.f32	s14, s0
 80013f0:	eef0 7a60 	vmov.f32	s15, s1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80013fa:	e108      	b.n	800160e <prv_parse_term+0x54e>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80013fc:	2100      	movs	r1, #0
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fde6 	bl	8000fd0 <prv_parse_float_number>
 8001404:	eeb0 7a40 	vmov.f32	s14, s0
 8001408:	eef0 7a60 	vmov.f32	s15, s1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001412:	e0fc      	b.n	800160e <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fdda 	bl	8000fd0 <prv_parse_float_number>
 800141c:	eeb0 7a40 	vmov.f32	s14, s0
 8001420:	eef0 7a60 	vmov.f32	s15, s1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800142a:	e0f0      	b.n	800160e <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001432:	2b02      	cmp	r3, #2
 8001434:	f240 80e4 	bls.w	8001600 <prv_parse_term+0x540>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800143e:	2b0e      	cmp	r3, #14
 8001440:	f200 80de 	bhi.w	8001600 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001444:	2100      	movs	r1, #0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fd78 	bl	8000f3c <prv_parse_number>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001454:	3b03      	subs	r3, #3
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	460a      	mov	r2, r1
 800145e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001462:	e0cd      	b.n	8001600 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800146a:	2903      	cmp	r1, #3
 800146c:	d11b      	bne.n	80014a6 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001474:	2b02      	cmp	r3, #2
 8001476:	d002      	beq.n	800147e <prv_parse_term+0x3be>
 8001478:	2b03      	cmp	r3, #3
 800147a:	d00a      	beq.n	8001492 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800147c:	e0c7      	b.n	800160e <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800147e:	2100      	movs	r1, #0
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fd5b 	bl	8000f3c <prv_parse_number>
 8001486:	4603      	mov	r3, r0
 8001488:	b2da      	uxtb	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001490:	e0bd      	b.n	800160e <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fd51 	bl	8000f3c <prv_parse_number>
 800149a:	4603      	mov	r3, r0
 800149c:	b2da      	uxtb	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80014a4:	e0b3      	b.n	800160e <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80014ac:	2904      	cmp	r1, #4
 80014ae:	f040 80a9 	bne.w	8001604 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80014b8:	3902      	subs	r1, #2
 80014ba:	2909      	cmp	r1, #9
 80014bc:	f200 80a4 	bhi.w	8001608 <prv_parse_term+0x548>
 80014c0:	a001      	add	r0, pc, #4	; (adr r0, 80014c8 <prv_parse_term+0x408>)
 80014c2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	08001609 	.word	0x08001609
 80014d0:	08001609 	.word	0x08001609
 80014d4:	08001609 	.word	0x08001609
 80014d8:	08001609 	.word	0x08001609
 80014dc:	0800150b 	.word	0x0800150b
 80014e0:	08001523 	.word	0x08001523
 80014e4:	0800153b 	.word	0x0800153b
 80014e8:	080015b5 	.word	0x080015b5
 80014ec:	080015cd 	.word	0x080015cd
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014f6:	2b41      	cmp	r3, #65	; 0x41
 80014f8:	bf0c      	ite	eq
 80014fa:	2301      	moveq	r3, #1
 80014fc:	2300      	movne	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001508:	e081      	b.n	800160e <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fd5f 	bl	8000fd0 <prv_parse_float_number>
 8001512:	eeb0 7a40 	vmov.f32	s14, s0
 8001516:	eef0 7a60 	vmov.f32	s15, s1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001520:	e075      	b.n	800160e <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001522:	2100      	movs	r1, #0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fd53 	bl	8000fd0 <prv_parse_float_number>
 800152a:	eeb0 7a40 	vmov.f32	s14, s0
 800152e:	eef0 7a60 	vmov.f32	s15, s1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001538:	e069      	b.n	800160e <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001540:	3b30      	subs	r3, #48	; 0x30
 8001542:	b2db      	uxtb	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001554:	4413      	add	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b30      	subs	r3, #48	; 0x30
 800155a:	b2da      	uxtb	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001568:	3b30      	subs	r3, #48	; 0x30
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4413      	add	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800157c:	4413      	add	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3b30      	subs	r3, #48	; 0x30
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001590:	3b30      	subs	r3, #48	; 0x30
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80015a4:	4413      	add	r3, r2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	3b30      	subs	r3, #48	; 0x30
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80015b2:	e02c      	b.n	800160e <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80015b4:	2100      	movs	r1, #0
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fd0a 	bl	8000fd0 <prv_parse_float_number>
 80015bc:	eeb0 7a40 	vmov.f32	s14, s0
 80015c0:	eef0 7a60 	vmov.f32	s15, s1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80015ca:	e020      	b.n	800160e <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80015d2:	2957      	cmp	r1, #87	; 0x57
 80015d4:	d004      	beq.n	80015e0 <prv_parse_term+0x520>
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80015dc:	2977      	cmp	r1, #119	; 0x77
 80015de:	d115      	bne.n	800160c <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80015e6:	4602      	mov	r2, r0
 80015e8:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 80015f2:	e00b      	b.n	800160c <prv_parse_term+0x54c>
                break;
 80015f4:	bf00      	nop
 80015f6:	e00a      	b.n	800160e <prv_parse_term+0x54e>
                break;
 80015f8:	bf00      	nop
 80015fa:	e008      	b.n	800160e <prv_parse_term+0x54e>
                break;
 80015fc:	bf00      	nop
 80015fe:	e006      	b.n	800160e <prv_parse_term+0x54e>
                break;
 8001600:	bf00      	nop
 8001602:	e004      	b.n	800160e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001604:	bf00      	nop
 8001606:	e002      	b.n	800160e <prv_parse_term+0x54e>
                break;
 8001608:	bf00      	nop
 800160a:	e000      	b.n	800160e <prv_parse_term+0x54e>
                break;
 800160c:	bf00      	nop
    return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800161a:	bf00      	nop

0800161c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800162a:	2b2f      	cmp	r3, #47	; 0x2f
 800162c:	d90d      	bls.n	800164a <prv_check_crc+0x2e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001634:	2b39      	cmp	r3, #57	; 0x39
 8001636:	d808      	bhi.n	800164a <prv_check_crc+0x2e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800163e:	3b30      	subs	r3, #48	; 0x30
 8001640:	b2db      	uxtb	r3, r3
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b25a      	sxtb	r2, r3
 8001648:	e026      	b.n	8001698 <prv_check_crc+0x7c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001650:	2b60      	cmp	r3, #96	; 0x60
 8001652:	d90d      	bls.n	8001670 <prv_check_crc+0x54>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800165a:	2b7a      	cmp	r3, #122	; 0x7a
 800165c:	d808      	bhi.n	8001670 <prv_check_crc+0x54>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001664:	3b57      	subs	r3, #87	; 0x57
 8001666:	b2db      	uxtb	r3, r3
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b25a      	sxtb	r2, r3
 800166e:	e013      	b.n	8001698 <prv_check_crc+0x7c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001676:	2b40      	cmp	r3, #64	; 0x40
 8001678:	d90d      	bls.n	8001696 <prv_check_crc+0x7a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001680:	2b5a      	cmp	r3, #90	; 0x5a
 8001682:	d808      	bhi.n	8001696 <prv_check_crc+0x7a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800168a:	3b37      	subs	r3, #55	; 0x37
 800168c:	b2db      	uxtb	r3, r3
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	b2db      	uxtb	r3, r3
 8001692:	b25a      	sxtb	r2, r3
 8001694:	e000      	b.n	8001698 <prv_check_crc+0x7c>
 8001696:	2200      	movs	r2, #0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800169e:	2b2f      	cmp	r3, #47	; 0x2f
 80016a0:	d90c      	bls.n	80016bc <prv_check_crc+0xa0>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016a8:	2b39      	cmp	r3, #57	; 0x39
 80016aa:	d807      	bhi.n	80016bc <prv_check_crc+0xa0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	e028      	b.n	800170e <prv_check_crc+0xf2>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016c2:	2b60      	cmp	r3, #96	; 0x60
 80016c4:	d90e      	bls.n	80016e4 <prv_check_crc+0xc8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016cc:	2b7a      	cmp	r3, #122	; 0x7a
 80016ce:	d809      	bhi.n	80016e4 <prv_check_crc+0xc8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016d6:	3b57      	subs	r3, #87	; 0x57
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	e014      	b.n	800170e <prv_check_crc+0xf2>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d90e      	bls.n	800170c <prv_check_crc+0xf0>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016f4:	2b5a      	cmp	r3, #90	; 0x5a
 80016f6:	d809      	bhi.n	800170c <prv_check_crc+0xf0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016fe:	3b37      	subs	r3, #55	; 0x37
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	b25b      	sxtb	r3, r3
 800170a:	e000      	b.n	800170e <prv_check_crc+0xf2>
 800170c:	2300      	movs	r3, #0
 800170e:	4313      	orrs	r3, r2
 8001710:	b25b      	sxtb	r3, r3
 8001712:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800171a:	7bfa      	ldrb	r2, [r7, #15]
 800171c:	429a      	cmp	r2, r3
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001740:	2b01      	cmp	r3, #1
 8001742:	d136      	bne.n	80017b2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017b0:	e061      	b.n	8001876 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d121      	bne.n	8001800 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	33a1      	adds	r3, #161	; 0xa1
 80017f6:	220c      	movs	r2, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	f002 fb5f 	bl	8003ebc <memcpy>
 80017fe:	e03a      	b.n	8001876 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001806:	2b03      	cmp	r3, #3
 8001808:	d106      	bne.n	8001818 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001816:	e02e      	b.n	8001876 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800181e:	2b04      	cmp	r3, #4
 8001820:	d129      	bne.n	8001876 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001888:	22b0      	movs	r2, #176	; 0xb0
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f002 fb23 	bl	8003ed8 <memset>
    return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80018ac:	e0ad      	b.n	8001a0a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b24      	cmp	r3, #36	; 0x24
 80018b4:	d128      	bne.n	8001908 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3370      	adds	r3, #112	; 0x70
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fb0a 	bl	8003ed8 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ca:	2b0b      	cmp	r3, #11
 80018cc:	f200 8097 	bhi.w	80019fe <lwgps_process+0x162>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018d6:	4619      	mov	r1, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001906:	e07a      	b.n	80019fe <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b2c      	cmp	r3, #44	; 0x2c
 800190e:	d11d      	bne.n	800194c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff fbd5 	bl	80010c0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4053      	eors	r3, r2
 8001922:	b2da      	uxtb	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001940:	3301      	adds	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800194a:	e058      	b.n	80019fe <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b2a      	cmp	r3, #42	; 0x2a
 8001952:	d117      	bne.n	8001984 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fbb3 	bl	80010c0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001978:	3301      	adds	r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001982:	e03c      	b.n	80019fe <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b0d      	cmp	r3, #13
 800198a:	d109      	bne.n	80019a0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff fe45 	bl	800161c <prv_check_crc>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d032      	beq.n	80019fe <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff feca 	bl	8001732 <prv_copy_from_tmp_memory>
 800199e:	e02e      	b.n	80019fe <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4053      	eors	r3, r2
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019c4:	2b0b      	cmp	r3, #11
 80019c6:	d81a      	bhi.n	80019fe <lwgps_process+0x162>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019ce:	4619      	mov	r1, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f af4e 	bne.w	80018ae <lwgps_process+0x12>
        }
    }
    return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128];
uint8_t rx_index = 0;
uint8_t rx_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_UART_RxCpltCallback+0x68>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d127      	bne.n	8001a7c <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_UART_RxCpltCallback+0x6c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b0a      	cmp	r3, #10
 8001a32:	d010      	beq.n	8001a56 <HAL_UART_RxCpltCallback+0x3a>
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_UART_RxCpltCallback+0x70>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <HAL_UART_RxCpltCallback+0x70>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	b2d1      	uxtb	r1, r2
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_UART_RxCpltCallback+0x70>)
 8001a48:	7011      	strb	r1, [r2, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_UART_RxCpltCallback+0x6c>)
 8001a4e:	7819      	ldrb	r1, [r3, #0]
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_UART_RxCpltCallback+0x74>)
 8001a52:	5499      	strb	r1, [r3, r2]
 8001a54:	e00d      	b.n	8001a72 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_UART_RxCpltCallback+0x70>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	490c      	ldr	r1, [pc, #48]	; (8001a90 <HAL_UART_RxCpltCallback+0x74>)
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <HAL_UART_RxCpltCallback+0x78>)
 8001a62:	f7ff ff1b 	bl	800189c <lwgps_process>
			rx_index = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_UART_RxCpltCallback+0x70>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_UART_RxCpltCallback+0x6c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	4904      	ldr	r1, [pc, #16]	; (8001a88 <HAL_UART_RxCpltCallback+0x6c>)
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <HAL_UART_RxCpltCallback+0x68>)
 8001a78:	f001 facb 	bl	8003012 <HAL_UART_Receive_IT>
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200001fc 	.word	0x200001fc
 8001a88:	20000371 	.word	0x20000371
 8001a8c:	20000370 	.word	0x20000370
 8001a90:	200002f0 	.word	0x200002f0
 8001a94:	20000240 	.word	0x20000240

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9c:	f000 fa7a 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa0:	f000 f814 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa4:	f000 f89a 	bl	8001bdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001aa8:	f000 f86e 	bl	8001b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <main+0x28>)
 8001aae:	f7ff fee7 	bl	8001880 <lwgps_init>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <main+0x2c>)
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <main+0x30>)
 8001ab8:	f001 faab 	bl	8003012 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001abc:	e7fe      	b.n	8001abc <main+0x24>
 8001abe:	bf00      	nop
 8001ac0:	20000240 	.word	0x20000240
 8001ac4:	20000371 	.word	0x20000371
 8001ac8:	200001fc 	.word	0x200001fc

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b094      	sub	sp, #80	; 0x50
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0320 	add.w	r3, r7, #32
 8001ad6:	2230      	movs	r2, #48	; 0x30
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 f9fc 	bl	8003ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <SystemClock_Config+0xb4>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <SystemClock_Config+0xb4>)
 8001afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <SystemClock_Config+0xb4>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <SystemClock_Config+0xb8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <SystemClock_Config+0xb8>)
 8001b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <SystemClock_Config+0xb8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b30:	2310      	movs	r3, #16
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f107 0320 	add.w	r3, r7, #32
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fdc3 	bl	80026c8 <HAL_RCC_OscConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001b48:	f000 f870 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 f826 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b72:	f000 f85b 	bl	8001c2c <Error_Handler>
  }
}
 8001b76:	bf00      	nop
 8001b78:	3750      	adds	r7, #80	; 0x50
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART1_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	f001 f9da 	bl	8002f78 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f000 f82f 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001fc 	.word	0x200001fc
 8001bd8:	40011000 	.word	0x40011000

08001bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_GPIO_Init+0x4c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <MX_GPIO_Init+0x4c>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <MX_GPIO_Init+0x4c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_GPIO_Init+0x4c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <MX_GPIO_Init+0x4c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_GPIO_Init+0x4c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <Error_Handler+0x8>
	...

08001c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_UART_MspInit+0x94>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d134      	bne.n	8001d14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_UART_MspInit+0x98>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <HAL_UART_MspInit+0x9c>)
 8001d00:	f000 fb5e 	bl	80023c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2025      	movs	r0, #37	; 0x25
 8001d0a:	f000 fa90 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d0e:	2025      	movs	r0, #37	; 0x25
 8001d10:	f000 faa9 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d14:	bf00      	nop
 8001d16:	3728      	adds	r7, #40	; 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <NMI_Handler+0x4>

08001d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 f960 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <USART1_IRQHandler+0x10>)
 8001d82:	f001 f977 	bl	8003074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200001fc 	.word	0x200001fc

08001d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	return 1;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_kill>:

int _kill(int pid, int sig)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001daa:	f002 f85d 	bl	8003e68 <__errno>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2216      	movs	r2, #22
 8001db2:	601a      	str	r2, [r3, #0]
	return -1;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_exit>:

void _exit (int status)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffe7 	bl	8001da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dd2:	e7fe      	b.n	8001dd2 <_exit+0x12>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001de6:	f3af 8000 	nop.w
 8001dea:	4601      	mov	r1, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf0      	blt.n	8001de6 <_read+0x12>
	}

return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e009      	b.n	8001e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf1      	blt.n	8001e20 <_write+0x12>
	}
	return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <_isatty>:

int _isatty(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
	return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f001 ffc2 	bl	8003e68 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20020000 	.word	0x20020000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	20000374 	.word	0x20000374
 8001f18:	20000390 	.word	0x20000390

08001f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff ffd7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f001 ff81 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7ff fd91 	bl	8001a98 <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f84:	080070ec 	.word	0x080070ec
  ldr r2, =_sbss
 8001f88:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f8c:	2000038c 	.word	0x2000038c

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f92b 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fe36 	bl	8001c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f943 	bl	8002282 <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f90b 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000
 8002030:	20000008 	.word	0x20000008
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008
 800205c:	20000378 	.word	0x20000378

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000378 	.word	0x20000378

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff feda 	bl	8002060 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d008      	beq.n	80022cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e052      	b.n	8002372 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0216 	bic.w	r2, r2, #22
 80022da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <HAL_DMA_Abort+0x62>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0208 	bic.w	r2, r2, #8
 800230a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231c:	e013      	b.n	8002346 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800231e:	f7ff fe9f 	bl	8002060 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b05      	cmp	r3, #5
 800232a:	d90c      	bls.n	8002346 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e015      	b.n	8002372 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e4      	bne.n	800231e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	223f      	movs	r2, #63	; 0x3f
 800235a:	409a      	lsls	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d004      	beq.n	8002398 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e00c      	b.n	80023b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2205      	movs	r2, #5
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e159      	b.n	8002690 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8148 	bne.w	800268a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a2 	beq.w	800268a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_GPIO_Init+0x2e8>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a56      	ldr	r2, [pc, #344]	; (80026a8 <HAL_GPIO_Init+0x2e8>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b54      	ldr	r3, [pc, #336]	; (80026a8 <HAL_GPIO_Init+0x2e8>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x2ec>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <HAL_GPIO_Init+0x2f0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_GPIO_Init+0x202>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a48      	ldr	r2, [pc, #288]	; (80026b4 <HAL_GPIO_Init+0x2f4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_GPIO_Init+0x1fe>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <HAL_GPIO_Init+0x2f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00d      	beq.n	80025ba <HAL_GPIO_Init+0x1fa>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a46      	ldr	r2, [pc, #280]	; (80026bc <HAL_GPIO_Init+0x2fc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <HAL_GPIO_Init+0x1f6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a45      	ldr	r2, [pc, #276]	; (80026c0 <HAL_GPIO_Init+0x300>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_GPIO_Init+0x1f2>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e008      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e006      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025b6:	2303      	movs	r3, #3
 80025b8:	e004      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x204>
 80025c2:	2300      	movs	r3, #0
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	f002 0203 	and.w	r2, r2, #3
 80025ca:	0092      	lsls	r2, r2, #2
 80025cc:	4093      	lsls	r3, r2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d4:	4935      	ldr	r1, [pc, #212]	; (80026ac <HAL_GPIO_Init+0x2ec>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	089b      	lsrs	r3, r3, #2
 80025da:	3302      	adds	r3, #2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_GPIO_Init+0x304>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002606:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_GPIO_Init+0x304>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	f67f aea2 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002698:	bf00      	nop
 800269a:	bf00      	nop
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40013800 	.word	0x40013800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40020800 	.word	0x40020800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e267      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d075      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00c      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b85      	ldr	r3, [pc, #532]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b82      	ldr	r3, [pc, #520]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b7e      	ldr	r3, [pc, #504]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05b      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e242      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x74>
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b70      	ldr	r3, [pc, #448]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6f      	ldr	r2, [pc, #444]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 8002760:	4b69      	ldr	r3, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fc6e 	bl	8002060 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff fc6a 	bl	8002060 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e207      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b5b      	ldr	r3, [pc, #364]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xc0>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff fc5a 	bl	8002060 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff fc56 	bl	8002060 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1f3      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b44      	ldr	r3, [pc, #272]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b41      	ldr	r3, [pc, #260]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1c7      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4937      	ldr	r1, [pc, #220]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff fc0f 	bl	8002060 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff fc0b 	bl	8002060 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1a8      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4925      	ldr	r1, [pc, #148]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_RCC_OscConfig+0x244>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff fbee 	bl	8002060 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff fbea 	bl	8002060 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e187      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d036      	beq.n	8002920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff fbce 	bl	8002060 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff fbca 	bl	8002060 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e167      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x240>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x200>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x248>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fbb7 	bl	8002060 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7ff fbb3 	bl	8002060 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d907      	bls.n	8002914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e150      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ea      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8097 	beq.w	8002a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a7c      	ldr	r2, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b77      	ldr	r3, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7ff fb73 	bl	8002060 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7ff fb6f 	bl	8002060 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e10c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2ea>
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x30c>
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029d4:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a57      	ldr	r2, [pc, #348]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b55      	ldr	r3, [pc, #340]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a54      	ldr	r2, [pc, #336]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7ff fb34 	bl	8002060 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7ff fb30 	bl	8002060 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0cb      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x334>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7ff fb1e 	bl	8002060 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7ff fb1a 	bl	8002060 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0b5      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a1 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d05c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d141      	bne.n	8002afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff faee 	bl	8002060 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7ff faea 	bl	8002060 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e087      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	491b      	ldr	r1, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fac3 	bl	8002060 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff fabf 	bl	8002060 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e05c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x416>
 8002afc:	e054      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff faac 	bl	8002060 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7ff faa8 	bl	8002060 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e045      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e038      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d121      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cc      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d044      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e067      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4934      	ldr	r1, [pc, #208]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7ff f9da 	bl	8002060 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7ff f9d6 	bl	8002060 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20c      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f821 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f93a 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08006c98 	.word	0x08006c98
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b090      	sub	sp, #64	; 0x40
 8002d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9c:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	f200 80a1 	bhi.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002db6:	e09b      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dbc:	e09b      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dc2:	e098      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dce:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d028      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	627a      	str	r2, [r7, #36]	; 0x24
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dec:	2100      	movs	r1, #0
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002df0:	fb03 f201 	mul.w	r2, r3, r1
 8002df4:	2300      	movs	r3, #0
 8002df6:	fb00 f303 	mul.w	r3, r0, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8002e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e04:	460a      	mov	r2, r1
 8002e06:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0a:	4413      	add	r3, r2
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e10:	2200      	movs	r2, #0
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e1e:	f7fd fed5 	bl	8000bcc <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4613      	mov	r3, r2
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2a:	e053      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	2200      	movs	r2, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	617a      	str	r2, [r7, #20]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e3e:	f04f 0b00 	mov.w	fp, #0
 8002e42:	4652      	mov	r2, sl
 8002e44:	465b      	mov	r3, fp
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e76:	ebb2 0408 	subs.w	r4, r2, r8
 8002e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	00eb      	lsls	r3, r5, #3
 8002e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8c:	00e2      	lsls	r2, r4, #3
 8002e8e:	4614      	mov	r4, r2
 8002e90:	461d      	mov	r5, r3
 8002e92:	eb14 030a 	adds.w	r3, r4, sl
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	eb45 030b 	adc.w	r3, r5, fp
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec8:	f7fd fe80 	bl	8000bcc <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3740      	adds	r7, #64	; 0x40
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	017d7840 	.word	0x017d7840

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000000 	.word	0x20000000

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	08006ca8 	.word	0x08006ca8

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffdc 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0b5b      	lsrs	r3, r3, #13
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	08006ca8 	.word	0x08006ca8

08002f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03f      	b.n	800300a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fe72 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fcdf 	bl	8003980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	4613      	mov	r3, r2
 800301e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b20      	cmp	r3, #32
 800302a:	d11d      	bne.n	8003068 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_Receive_IT+0x26>
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e016      	b.n	800306a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Receive_IT+0x38>
 8003046:	2302      	movs	r3, #2
 8003048:	e00f      	b.n	800306a <HAL_UART_Receive_IT+0x58>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	461a      	mov	r2, r3
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fab6 	bl	80035d0 <UART_Start_Receive_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	e000      	b.n	800306a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b0ba      	sub	sp, #232	; 0xe8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_UART_IRQHandler+0x66>
 80030c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fb99 	bl	800380a <UART_Receive_IT>
      return;
 80030d8:	e256      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80de 	beq.w	80032a0 <HAL_UART_IRQHandler+0x22c>
 80030e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80d1 	beq.w	80032a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xae>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_UART_IRQHandler+0xf6>
 8003152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d011      	beq.n	800319a <HAL_UART_IRQHandler+0x126>
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0208 	orr.w	r2, r3, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81ed 	beq.w	800357e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_UART_IRQHandler+0x14e>
 80031b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fb24 	bl	800380a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_UART_IRQHandler+0x17a>
 80031e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d04f      	beq.n	800328e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa2c 	bl	800364c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d141      	bne.n	8003286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800321c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3314      	adds	r3, #20
 800322a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800322e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800323a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1d9      	bne.n	8003202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	2b00      	cmp	r3, #0
 8003254:	d013      	beq.n	800327e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	4a7d      	ldr	r2, [pc, #500]	; (8003450 <HAL_UART_IRQHandler+0x3dc>)
 800325c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f889 	bl	800237a <HAL_DMA_Abort_IT>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003278:	4610      	mov	r0, r2
 800327a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e00e      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f990 	bl	80035a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00a      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f98c 	bl	80035a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e006      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f988 	bl	80035a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800329a:	e170      	b.n	800357e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	bf00      	nop
    return;
 800329e:	e16e      	b.n	800357e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 814a 	bne.w	800353e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8143 	beq.w	800353e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 813c 	beq.w	800353e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	f040 80b4 	bne.w	8003454 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8140 	beq.w	8003582 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800330a:	429a      	cmp	r2, r3
 800330c:	f080 8139 	bcs.w	8003582 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	f000 8088 	beq.w	8003436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800333c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800335e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337c:	e853 3f00 	ldrex	r3, [r3]
 8003380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3314      	adds	r3, #20
 8003392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800339a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800339e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e1      	bne.n	8003372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e3      	bne.n	80033ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003406:	f023 0310 	bic.w	r3, r3, #16
 800340a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003418:	65ba      	str	r2, [r7, #88]	; 0x58
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800341e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e3      	bne.n	80033f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe ff32 	bl	800229a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800343e:	b29b      	uxth	r3, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8b6 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800344c:	e099      	b.n	8003582 <HAL_UART_IRQHandler+0x50e>
 800344e:	bf00      	nop
 8003450:	08003713 	.word	0x08003713
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800345c:	b29b      	uxth	r3, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 808b 	beq.w	8003586 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8086 	beq.w	8003586 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800349e:	647a      	str	r2, [r7, #68]	; 0x44
 80034a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e3      	bne.n	800347a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	623b      	str	r3, [r7, #32]
   return(result);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3314      	adds	r3, #20
 80034d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034d6:	633a      	str	r2, [r7, #48]	; 0x30
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e3      	bne.n	80034b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	60fb      	str	r3, [r7, #12]
   return(result);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0310 	bic.w	r3, r3, #16
 800350e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800351c:	61fa      	str	r2, [r7, #28]
 800351e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003520:	69b9      	ldr	r1, [r7, #24]
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	e841 2300 	strex	r3, r2, [r1]
 8003528:	617b      	str	r3, [r7, #20]
   return(result);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e3      	bne.n	80034f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f83e 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800353c:	e023      	b.n	8003586 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_UART_IRQHandler+0x4ea>
 800354a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8ef 	bl	800373a <UART_Transmit_IT>
    return;
 800355c:	e014      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <HAL_UART_IRQHandler+0x514>
 800356a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f92f 	bl	80037da <UART_EndTransmit_IT>
    return;
 800357c:	e004      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
    return;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
      return;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
      return;
 8003586:	bf00      	nop
  }
}
 8003588:	37e8      	adds	r7, #232	; 0xe8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop

08003590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2222      	movs	r2, #34	; 0x22
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0220 	orr.w	r2, r2, #32
 800363c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b095      	sub	sp, #84	; 0x54
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800366a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003674:	643a      	str	r2, [r7, #64]	; 0x40
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800367a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	61fb      	str	r3, [r7, #28]
   return(result);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d119      	bne.n	80036f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	647b      	str	r3, [r7, #68]	; 0x44
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e4:	61ba      	str	r2, [r7, #24]
 80036e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6979      	ldr	r1, [r7, #20]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	613b      	str	r3, [r7, #16]
   return(result);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e5      	bne.n	80036c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003706:	bf00      	nop
 8003708:	3754      	adds	r7, #84	; 0x54
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff ff39 	bl	80035a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b21      	cmp	r3, #33	; 0x21
 800374c:	d13e      	bne.n	80037cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	d114      	bne.n	8003782 <UART_Transmit_IT+0x48>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d110      	bne.n	8003782 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003774:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	e008      	b.n	8003794 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6211      	str	r1, [r2, #32]
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29b      	uxth	r3, r3
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4619      	mov	r1, r3
 80037a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fec8 	bl	8003590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b08c      	sub	sp, #48	; 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b22      	cmp	r3, #34	; 0x22
 800381c:	f040 80ab 	bne.w	8003976 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d117      	bne.n	800385a <UART_Receive_IT+0x50>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003848:	b29a      	uxth	r2, r3
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
 8003858:	e026      	b.n	80038a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386c:	d007      	beq.n	800387e <UART_Receive_IT+0x74>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <UART_Receive_IT+0x82>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e008      	b.n	800389e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003898:	b2da      	uxtb	r2, r3
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	4619      	mov	r1, r3
 80038b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d15a      	bne.n	8003972 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0220 	bic.w	r2, r2, #32
 80038ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d135      	bne.n	8003968 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	613b      	str	r3, [r7, #16]
   return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f023 0310 	bic.w	r3, r3, #16
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	330c      	adds	r3, #12
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	623a      	str	r2, [r7, #32]
 8003924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e5      	bne.n	8003902 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d10a      	bne.n	800395a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fe29 	bl	80035b8 <HAL_UARTEx_RxEventCallback>
 8003966:	e002      	b.n	800396e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fe f857 	bl	8001a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e002      	b.n	8003978 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003984:	b0c0      	sub	sp, #256	; 0x100
 8003986:	af00      	add	r7, sp, #0
 8003988:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	68d9      	ldr	r1, [r3, #12]
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	ea40 0301 	orr.w	r3, r0, r1
 80039a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	431a      	orrs	r2, r3
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039d8:	f021 010c 	bic.w	r1, r1, #12
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039e6:	430b      	orrs	r3, r1
 80039e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	6999      	ldr	r1, [r3, #24]
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	ea40 0301 	orr.w	r3, r0, r1
 8003a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b8f      	ldr	r3, [pc, #572]	; (8003c4c <UART_SetConfig+0x2cc>)
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <UART_SetConfig+0xa0>
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <UART_SetConfig+0x2d0>)
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d104      	bne.n	8003a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff fa96 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8003a24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a28:	e003      	b.n	8003a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f7ff fa7d 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8003a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	f040 810c 	bne.w	8003c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a62:	4621      	mov	r1, r4
 8003a64:	eb12 0801 	adds.w	r8, r2, r1
 8003a68:	4629      	mov	r1, r5
 8003a6a:	eb43 0901 	adc.w	r9, r3, r1
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a82:	4690      	mov	r8, r2
 8003a84:	4699      	mov	r9, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	eb18 0303 	adds.w	r3, r8, r3
 8003a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a90:	462b      	mov	r3, r5
 8003a92:	eb49 0303 	adc.w	r3, r9, r3
 8003a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aae:	460b      	mov	r3, r1
 8003ab0:	18db      	adds	r3, r3, r3
 8003ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	eb42 0303 	adc.w	r3, r2, r3
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54
 8003abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ac4:	f7fd f882 	bl	8000bcc <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	011c      	lsls	r4, r3, #4
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	64b9      	str	r1, [r7, #72]	; 0x48
 8003af0:	415b      	adcs	r3, r3
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003af8:	4641      	mov	r1, r8
 8003afa:	eb12 0a01 	adds.w	sl, r2, r1
 8003afe:	4649      	mov	r1, r9
 8003b00:	eb43 0b01 	adc.w	fp, r3, r1
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b18:	4692      	mov	sl, r2
 8003b1a:	469b      	mov	fp, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b26:	464b      	mov	r3, r9
 8003b28:	eb4b 0303 	adc.w	r3, fp, r3
 8003b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b44:	460b      	mov	r3, r1
 8003b46:	18db      	adds	r3, r3, r3
 8003b48:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
 8003b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b5a:	f7fd f837 	bl	8000bcc <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	4b3b      	ldr	r3, [pc, #236]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003b66:	fba3 2301 	umull	r2, r3, r3, r1
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2264      	movs	r2, #100	; 0x64
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	1acb      	subs	r3, r1, r3
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b88:	441c      	add	r4, r3
 8003b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bac:	4641      	mov	r1, r8
 8003bae:	1851      	adds	r1, r2, r1
 8003bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	414b      	adcs	r3, r1
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	00cb      	lsls	r3, r1, #3
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bce:	4651      	mov	r1, sl
 8003bd0:	00ca      	lsls	r2, r1, #3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003be0:	464b      	mov	r3, r9
 8003be2:	460a      	mov	r2, r1
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c00:	460b      	mov	r3, r1
 8003c02:	18db      	adds	r3, r3, r3
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c06:	4613      	mov	r3, r2
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c16:	f7fc ffd9 	bl	8000bcc <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <UART_SetConfig+0x2d4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4422      	add	r2, r4
 8003c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c48:	e105      	b.n	8003e56 <UART_SetConfig+0x4d6>
 8003c4a:	bf00      	nop
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40011400 	.word	0x40011400
 8003c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	1891      	adds	r1, r2, r2
 8003c70:	6239      	str	r1, [r7, #32]
 8003c72:	415b      	adcs	r3, r3
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	1854      	adds	r4, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb43 0501 	adc.w	r5, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	00eb      	lsls	r3, r5, #3
 8003c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c92:	00e2      	lsls	r2, r4, #3
 8003c94:	4614      	mov	r4, r2
 8003c96:	461d      	mov	r5, r3
 8003c98:	4643      	mov	r3, r8
 8003c9a:	18e3      	adds	r3, r4, r3
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	eb45 0303 	adc.w	r3, r5, r3
 8003ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	4621      	mov	r1, r4
 8003ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	008a      	lsls	r2, r1, #2
 8003cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cd8:	f7fc ff78 	bl	8000bcc <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b60      	ldr	r3, [pc, #384]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011c      	lsls	r4, r3, #4
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	61b9      	str	r1, [r7, #24]
 8003d04:	415b      	adcs	r3, r3
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	1851      	adds	r1, r2, r1
 8003d10:	6139      	str	r1, [r7, #16]
 8003d12:	4649      	mov	r1, r9
 8003d14:	414b      	adcs	r3, r1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d24:	4659      	mov	r1, fp
 8003d26:	00cb      	lsls	r3, r1, #3
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2e:	4651      	mov	r1, sl
 8003d30:	00ca      	lsls	r2, r1, #3
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	4642      	mov	r2, r8
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d40:	464b      	mov	r3, r9
 8003d42:	460a      	mov	r2, r1
 8003d44:	eb42 0303 	adc.w	r3, r2, r3
 8003d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d64:	4649      	mov	r1, r9
 8003d66:	008b      	lsls	r3, r1, #2
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6e:	4641      	mov	r1, r8
 8003d70:	008a      	lsls	r2, r1, #2
 8003d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d76:	f7fc ff29 	bl	8000bcc <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	3332      	adds	r3, #50	; 0x32
 8003d92:	4a34      	ldr	r2, [pc, #208]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9e:	441c      	add	r4, r3
 8003da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da4:	2200      	movs	r2, #0
 8003da6:	673b      	str	r3, [r7, #112]	; 0x70
 8003da8:	677a      	str	r2, [r7, #116]	; 0x74
 8003daa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dae:	4642      	mov	r2, r8
 8003db0:	464b      	mov	r3, r9
 8003db2:	1891      	adds	r1, r2, r2
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	415b      	adcs	r3, r3
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	1851      	adds	r1, r2, r1
 8003dc2:	6039      	str	r1, [r7, #0]
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	414b      	adcs	r3, r1
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd6:	4659      	mov	r1, fp
 8003dd8:	00cb      	lsls	r3, r1, #3
 8003dda:	4651      	mov	r1, sl
 8003ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de0:	4651      	mov	r1, sl
 8003de2:	00ca      	lsls	r2, r1, #3
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	4642      	mov	r2, r8
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df0:	464b      	mov	r3, r9
 8003df2:	460a      	mov	r2, r1
 8003df4:	eb42 0303 	adc.w	r3, r2, r3
 8003df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	663b      	str	r3, [r7, #96]	; 0x60
 8003e04:	667a      	str	r2, [r7, #100]	; 0x64
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e12:	4649      	mov	r1, r9
 8003e14:	008b      	lsls	r3, r1, #2
 8003e16:	4641      	mov	r1, r8
 8003e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	008a      	lsls	r2, r1, #2
 8003e20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e24:	f7fc fed2 	bl	8000bcc <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2164      	movs	r1, #100	; 0x64
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	3332      	adds	r3, #50	; 0x32
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <UART_SetConfig+0x4e4>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	f003 020f 	and.w	r2, r3, #15
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4422      	add	r2, r4
 8003e54:	609a      	str	r2, [r3, #8]
}
 8003e56:	bf00      	nop
 8003e58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e62:	bf00      	nop
 8003e64:	51eb851f 	.word	0x51eb851f

08003e68 <__errno>:
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <__errno+0x8>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	4d0d      	ldr	r5, [pc, #52]	; (8003eac <__libc_init_array+0x38>)
 8003e78:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7a:	1b64      	subs	r4, r4, r5
 8003e7c:	10a4      	asrs	r4, r4, #2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	4d0b      	ldr	r5, [pc, #44]	; (8003eb4 <__libc_init_array+0x40>)
 8003e86:	4c0c      	ldr	r4, [pc, #48]	; (8003eb8 <__libc_init_array+0x44>)
 8003e88:	f002 feda 	bl	8006c40 <_init>
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	2600      	movs	r6, #0
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	080070e4 	.word	0x080070e4
 8003eb0:	080070e4 	.word	0x080070e4
 8003eb4:	080070e4 	.word	0x080070e4
 8003eb8:	080070e8 	.word	0x080070e8

08003ebc <memcpy>:
 8003ebc:	440a      	add	r2, r1
 8003ebe:	4291      	cmp	r1, r2
 8003ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ec4:	d100      	bne.n	8003ec8 <memcpy+0xc>
 8003ec6:	4770      	bx	lr
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	d1f9      	bne.n	8003eca <memcpy+0xe>
 8003ed6:	bd10      	pop	{r4, pc}

08003ed8 <memset>:
 8003ed8:	4402      	add	r2, r0
 8003eda:	4603      	mov	r3, r0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <memset+0xa>
 8003ee0:	4770      	bx	lr
 8003ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee6:	e7f9      	b.n	8003edc <memset+0x4>

08003ee8 <strncmp>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	b17a      	cbz	r2, 8003f0c <strncmp+0x24>
 8003eec:	4603      	mov	r3, r0
 8003eee:	3901      	subs	r1, #1
 8003ef0:	1884      	adds	r4, r0, r2
 8003ef2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003ef6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003efa:	4290      	cmp	r0, r2
 8003efc:	d101      	bne.n	8003f02 <strncmp+0x1a>
 8003efe:	42a3      	cmp	r3, r4
 8003f00:	d101      	bne.n	8003f06 <strncmp+0x1e>
 8003f02:	1a80      	subs	r0, r0, r2
 8003f04:	bd10      	pop	{r4, pc}
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d1f3      	bne.n	8003ef2 <strncmp+0xa>
 8003f0a:	e7fa      	b.n	8003f02 <strncmp+0x1a>
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	e7f9      	b.n	8003f04 <strncmp+0x1c>

08003f10 <sulp>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	460d      	mov	r5, r1
 8003f16:	ec45 4b10 	vmov	d0, r4, r5
 8003f1a:	4616      	mov	r6, r2
 8003f1c:	f001 fd1a 	bl	8005954 <__ulp>
 8003f20:	ec51 0b10 	vmov	r0, r1, d0
 8003f24:	b17e      	cbz	r6, 8003f46 <sulp+0x36>
 8003f26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	dd09      	ble.n	8003f46 <sulp+0x36>
 8003f32:	051b      	lsls	r3, r3, #20
 8003f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003f38:	2400      	movs	r4, #0
 8003f3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	f7fc fb61 	bl	8000608 <__aeabi_dmul>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}

08003f48 <_strtod_l>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	ed2d 8b02 	vpush	{d8}
 8003f50:	b09d      	sub	sp, #116	; 0x74
 8003f52:	461f      	mov	r7, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	9318      	str	r3, [sp, #96]	; 0x60
 8003f58:	4ba2      	ldr	r3, [pc, #648]	; (80041e4 <_strtod_l+0x29c>)
 8003f5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	4604      	mov	r4, r0
 8003f62:	4618      	mov	r0, r3
 8003f64:	4688      	mov	r8, r1
 8003f66:	f7fc f93b 	bl	80001e0 <strlen>
 8003f6a:	f04f 0a00 	mov.w	sl, #0
 8003f6e:	4605      	mov	r5, r0
 8003f70:	f04f 0b00 	mov.w	fp, #0
 8003f74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	2a2b      	cmp	r2, #43	; 0x2b
 8003f7e:	d04e      	beq.n	800401e <_strtod_l+0xd6>
 8003f80:	d83b      	bhi.n	8003ffa <_strtod_l+0xb2>
 8003f82:	2a0d      	cmp	r2, #13
 8003f84:	d834      	bhi.n	8003ff0 <_strtod_l+0xa8>
 8003f86:	2a08      	cmp	r2, #8
 8003f88:	d834      	bhi.n	8003ff4 <_strtod_l+0xac>
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	d03e      	beq.n	800400c <_strtod_l+0xc4>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	930a      	str	r3, [sp, #40]	; 0x28
 8003f92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003f94:	7833      	ldrb	r3, [r6, #0]
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	f040 80b0 	bne.w	80040fc <_strtod_l+0x1b4>
 8003f9c:	7873      	ldrb	r3, [r6, #1]
 8003f9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003fa2:	2b58      	cmp	r3, #88	; 0x58
 8003fa4:	d168      	bne.n	8004078 <_strtod_l+0x130>
 8003fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	ab18      	add	r3, sp, #96	; 0x60
 8003fac:	9702      	str	r7, [sp, #8]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4a8d      	ldr	r2, [pc, #564]	; (80041e8 <_strtod_l+0x2a0>)
 8003fb2:	ab19      	add	r3, sp, #100	; 0x64
 8003fb4:	a917      	add	r1, sp, #92	; 0x5c
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f000 fe40 	bl	8004c3c <__gethex>
 8003fbc:	f010 0707 	ands.w	r7, r0, #7
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	d005      	beq.n	8003fd0 <_strtod_l+0x88>
 8003fc4:	2f06      	cmp	r7, #6
 8003fc6:	d12c      	bne.n	8004022 <_strtod_l+0xda>
 8003fc8:	3601      	adds	r6, #1
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8003fce:	930a      	str	r3, [sp, #40]	; 0x28
 8003fd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 8590 	bne.w	8004af8 <_strtod_l+0xbb0>
 8003fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fda:	b1eb      	cbz	r3, 8004018 <_strtod_l+0xd0>
 8003fdc:	4652      	mov	r2, sl
 8003fde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003fe2:	ec43 2b10 	vmov	d0, r2, r3
 8003fe6:	b01d      	add	sp, #116	; 0x74
 8003fe8:	ecbd 8b02 	vpop	{d8}
 8003fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff0:	2a20      	cmp	r2, #32
 8003ff2:	d1cc      	bne.n	8003f8e <_strtod_l+0x46>
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	9317      	str	r3, [sp, #92]	; 0x5c
 8003ff8:	e7be      	b.n	8003f78 <_strtod_l+0x30>
 8003ffa:	2a2d      	cmp	r2, #45	; 0x2d
 8003ffc:	d1c7      	bne.n	8003f8e <_strtod_l+0x46>
 8003ffe:	2201      	movs	r2, #1
 8004000:	920a      	str	r2, [sp, #40]	; 0x28
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	9217      	str	r2, [sp, #92]	; 0x5c
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1c2      	bne.n	8003f92 <_strtod_l+0x4a>
 800400c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800400e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 856e 	bne.w	8004af4 <_strtod_l+0xbac>
 8004018:	4652      	mov	r2, sl
 800401a:	465b      	mov	r3, fp
 800401c:	e7e1      	b.n	8003fe2 <_strtod_l+0x9a>
 800401e:	2200      	movs	r2, #0
 8004020:	e7ee      	b.n	8004000 <_strtod_l+0xb8>
 8004022:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004024:	b13a      	cbz	r2, 8004036 <_strtod_l+0xee>
 8004026:	2135      	movs	r1, #53	; 0x35
 8004028:	a81a      	add	r0, sp, #104	; 0x68
 800402a:	f001 fd9e 	bl	8005b6a <__copybits>
 800402e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004030:	4620      	mov	r0, r4
 8004032:	f001 f95d 	bl	80052f0 <_Bfree>
 8004036:	3f01      	subs	r7, #1
 8004038:	2f04      	cmp	r7, #4
 800403a:	d806      	bhi.n	800404a <_strtod_l+0x102>
 800403c:	e8df f007 	tbb	[pc, r7]
 8004040:	1714030a 	.word	0x1714030a
 8004044:	0a          	.byte	0x0a
 8004045:	00          	.byte	0x00
 8004046:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800404a:	0728      	lsls	r0, r5, #28
 800404c:	d5c0      	bpl.n	8003fd0 <_strtod_l+0x88>
 800404e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004052:	e7bd      	b.n	8003fd0 <_strtod_l+0x88>
 8004054:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004058:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800405a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800405e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004062:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004066:	e7f0      	b.n	800404a <_strtod_l+0x102>
 8004068:	f8df b180 	ldr.w	fp, [pc, #384]	; 80041ec <_strtod_l+0x2a4>
 800406c:	e7ed      	b.n	800404a <_strtod_l+0x102>
 800406e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004072:	f04f 3aff 	mov.w	sl, #4294967295
 8004076:	e7e8      	b.n	800404a <_strtod_l+0x102>
 8004078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	9217      	str	r2, [sp, #92]	; 0x5c
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d0f9      	beq.n	8004078 <_strtod_l+0x130>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0a3      	beq.n	8003fd0 <_strtod_l+0x88>
 8004088:	2301      	movs	r3, #1
 800408a:	f04f 0900 	mov.w	r9, #0
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004092:	9308      	str	r3, [sp, #32]
 8004094:	f8cd 901c 	str.w	r9, [sp, #28]
 8004098:	464f      	mov	r7, r9
 800409a:	220a      	movs	r2, #10
 800409c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800409e:	7806      	ldrb	r6, [r0, #0]
 80040a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80040a4:	b2d9      	uxtb	r1, r3
 80040a6:	2909      	cmp	r1, #9
 80040a8:	d92a      	bls.n	8004100 <_strtod_l+0x1b8>
 80040aa:	9905      	ldr	r1, [sp, #20]
 80040ac:	462a      	mov	r2, r5
 80040ae:	f7ff ff1b 	bl	8003ee8 <strncmp>
 80040b2:	b398      	cbz	r0, 800411c <_strtod_l+0x1d4>
 80040b4:	2000      	movs	r0, #0
 80040b6:	4632      	mov	r2, r6
 80040b8:	463d      	mov	r5, r7
 80040ba:	9005      	str	r0, [sp, #20]
 80040bc:	4603      	mov	r3, r0
 80040be:	2a65      	cmp	r2, #101	; 0x65
 80040c0:	d001      	beq.n	80040c6 <_strtod_l+0x17e>
 80040c2:	2a45      	cmp	r2, #69	; 0x45
 80040c4:	d118      	bne.n	80040f8 <_strtod_l+0x1b0>
 80040c6:	b91d      	cbnz	r5, 80040d0 <_strtod_l+0x188>
 80040c8:	9a04      	ldr	r2, [sp, #16]
 80040ca:	4302      	orrs	r2, r0
 80040cc:	d09e      	beq.n	800400c <_strtod_l+0xc4>
 80040ce:	2500      	movs	r5, #0
 80040d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80040d4:	f108 0201 	add.w	r2, r8, #1
 80040d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80040da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80040de:	2a2b      	cmp	r2, #43	; 0x2b
 80040e0:	d075      	beq.n	80041ce <_strtod_l+0x286>
 80040e2:	2a2d      	cmp	r2, #45	; 0x2d
 80040e4:	d07b      	beq.n	80041de <_strtod_l+0x296>
 80040e6:	f04f 0c00 	mov.w	ip, #0
 80040ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80040ee:	2909      	cmp	r1, #9
 80040f0:	f240 8082 	bls.w	80041f8 <_strtod_l+0x2b0>
 80040f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80040f8:	2600      	movs	r6, #0
 80040fa:	e09d      	b.n	8004238 <_strtod_l+0x2f0>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e7c4      	b.n	800408a <_strtod_l+0x142>
 8004100:	2f08      	cmp	r7, #8
 8004102:	bfd8      	it	le
 8004104:	9907      	ldrle	r1, [sp, #28]
 8004106:	f100 0001 	add.w	r0, r0, #1
 800410a:	bfda      	itte	le
 800410c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004110:	9307      	strle	r3, [sp, #28]
 8004112:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004116:	3701      	adds	r7, #1
 8004118:	9017      	str	r0, [sp, #92]	; 0x5c
 800411a:	e7bf      	b.n	800409c <_strtod_l+0x154>
 800411c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800411e:	195a      	adds	r2, r3, r5
 8004120:	9217      	str	r2, [sp, #92]	; 0x5c
 8004122:	5d5a      	ldrb	r2, [r3, r5]
 8004124:	2f00      	cmp	r7, #0
 8004126:	d037      	beq.n	8004198 <_strtod_l+0x250>
 8004128:	9005      	str	r0, [sp, #20]
 800412a:	463d      	mov	r5, r7
 800412c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004130:	2b09      	cmp	r3, #9
 8004132:	d912      	bls.n	800415a <_strtod_l+0x212>
 8004134:	2301      	movs	r3, #1
 8004136:	e7c2      	b.n	80040be <_strtod_l+0x176>
 8004138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	9217      	str	r2, [sp, #92]	; 0x5c
 800413e:	785a      	ldrb	r2, [r3, #1]
 8004140:	3001      	adds	r0, #1
 8004142:	2a30      	cmp	r2, #48	; 0x30
 8004144:	d0f8      	beq.n	8004138 <_strtod_l+0x1f0>
 8004146:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800414a:	2b08      	cmp	r3, #8
 800414c:	f200 84d9 	bhi.w	8004b02 <_strtod_l+0xbba>
 8004150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004152:	9005      	str	r0, [sp, #20]
 8004154:	2000      	movs	r0, #0
 8004156:	9308      	str	r3, [sp, #32]
 8004158:	4605      	mov	r5, r0
 800415a:	3a30      	subs	r2, #48	; 0x30
 800415c:	f100 0301 	add.w	r3, r0, #1
 8004160:	d014      	beq.n	800418c <_strtod_l+0x244>
 8004162:	9905      	ldr	r1, [sp, #20]
 8004164:	4419      	add	r1, r3
 8004166:	9105      	str	r1, [sp, #20]
 8004168:	462b      	mov	r3, r5
 800416a:	eb00 0e05 	add.w	lr, r0, r5
 800416e:	210a      	movs	r1, #10
 8004170:	4573      	cmp	r3, lr
 8004172:	d113      	bne.n	800419c <_strtod_l+0x254>
 8004174:	182b      	adds	r3, r5, r0
 8004176:	2b08      	cmp	r3, #8
 8004178:	f105 0501 	add.w	r5, r5, #1
 800417c:	4405      	add	r5, r0
 800417e:	dc1c      	bgt.n	80041ba <_strtod_l+0x272>
 8004180:	9907      	ldr	r1, [sp, #28]
 8004182:	230a      	movs	r3, #10
 8004184:	fb03 2301 	mla	r3, r3, r1, r2
 8004188:	9307      	str	r3, [sp, #28]
 800418a:	2300      	movs	r3, #0
 800418c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800418e:	1c51      	adds	r1, r2, #1
 8004190:	9117      	str	r1, [sp, #92]	; 0x5c
 8004192:	7852      	ldrb	r2, [r2, #1]
 8004194:	4618      	mov	r0, r3
 8004196:	e7c9      	b.n	800412c <_strtod_l+0x1e4>
 8004198:	4638      	mov	r0, r7
 800419a:	e7d2      	b.n	8004142 <_strtod_l+0x1fa>
 800419c:	2b08      	cmp	r3, #8
 800419e:	dc04      	bgt.n	80041aa <_strtod_l+0x262>
 80041a0:	9e07      	ldr	r6, [sp, #28]
 80041a2:	434e      	muls	r6, r1
 80041a4:	9607      	str	r6, [sp, #28]
 80041a6:	3301      	adds	r3, #1
 80041a8:	e7e2      	b.n	8004170 <_strtod_l+0x228>
 80041aa:	f103 0c01 	add.w	ip, r3, #1
 80041ae:	f1bc 0f10 	cmp.w	ip, #16
 80041b2:	bfd8      	it	le
 80041b4:	fb01 f909 	mulle.w	r9, r1, r9
 80041b8:	e7f5      	b.n	80041a6 <_strtod_l+0x25e>
 80041ba:	2d10      	cmp	r5, #16
 80041bc:	bfdc      	itt	le
 80041be:	230a      	movle	r3, #10
 80041c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80041c4:	e7e1      	b.n	800418a <_strtod_l+0x242>
 80041c6:	2300      	movs	r3, #0
 80041c8:	9305      	str	r3, [sp, #20]
 80041ca:	2301      	movs	r3, #1
 80041cc:	e77c      	b.n	80040c8 <_strtod_l+0x180>
 80041ce:	f04f 0c00 	mov.w	ip, #0
 80041d2:	f108 0202 	add.w	r2, r8, #2
 80041d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80041d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80041dc:	e785      	b.n	80040ea <_strtod_l+0x1a2>
 80041de:	f04f 0c01 	mov.w	ip, #1
 80041e2:	e7f6      	b.n	80041d2 <_strtod_l+0x28a>
 80041e4:	08006d88 	.word	0x08006d88
 80041e8:	08006cc0 	.word	0x08006cc0
 80041ec:	7ff00000 	.word	0x7ff00000
 80041f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80041f2:	1c51      	adds	r1, r2, #1
 80041f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80041f6:	7852      	ldrb	r2, [r2, #1]
 80041f8:	2a30      	cmp	r2, #48	; 0x30
 80041fa:	d0f9      	beq.n	80041f0 <_strtod_l+0x2a8>
 80041fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004200:	2908      	cmp	r1, #8
 8004202:	f63f af79 	bhi.w	80040f8 <_strtod_l+0x1b0>
 8004206:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800420a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800420c:	9206      	str	r2, [sp, #24]
 800420e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004210:	1c51      	adds	r1, r2, #1
 8004212:	9117      	str	r1, [sp, #92]	; 0x5c
 8004214:	7852      	ldrb	r2, [r2, #1]
 8004216:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800421a:	2e09      	cmp	r6, #9
 800421c:	d937      	bls.n	800428e <_strtod_l+0x346>
 800421e:	9e06      	ldr	r6, [sp, #24]
 8004220:	1b89      	subs	r1, r1, r6
 8004222:	2908      	cmp	r1, #8
 8004224:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004228:	dc02      	bgt.n	8004230 <_strtod_l+0x2e8>
 800422a:	4576      	cmp	r6, lr
 800422c:	bfa8      	it	ge
 800422e:	4676      	movge	r6, lr
 8004230:	f1bc 0f00 	cmp.w	ip, #0
 8004234:	d000      	beq.n	8004238 <_strtod_l+0x2f0>
 8004236:	4276      	negs	r6, r6
 8004238:	2d00      	cmp	r5, #0
 800423a:	d14d      	bne.n	80042d8 <_strtod_l+0x390>
 800423c:	9904      	ldr	r1, [sp, #16]
 800423e:	4301      	orrs	r1, r0
 8004240:	f47f aec6 	bne.w	8003fd0 <_strtod_l+0x88>
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f aee1 	bne.w	800400c <_strtod_l+0xc4>
 800424a:	2a69      	cmp	r2, #105	; 0x69
 800424c:	d027      	beq.n	800429e <_strtod_l+0x356>
 800424e:	dc24      	bgt.n	800429a <_strtod_l+0x352>
 8004250:	2a49      	cmp	r2, #73	; 0x49
 8004252:	d024      	beq.n	800429e <_strtod_l+0x356>
 8004254:	2a4e      	cmp	r2, #78	; 0x4e
 8004256:	f47f aed9 	bne.w	800400c <_strtod_l+0xc4>
 800425a:	499f      	ldr	r1, [pc, #636]	; (80044d8 <_strtod_l+0x590>)
 800425c:	a817      	add	r0, sp, #92	; 0x5c
 800425e:	f000 ff45 	bl	80050ec <__match>
 8004262:	2800      	cmp	r0, #0
 8004264:	f43f aed2 	beq.w	800400c <_strtod_l+0xc4>
 8004268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b28      	cmp	r3, #40	; 0x28
 800426e:	d12d      	bne.n	80042cc <_strtod_l+0x384>
 8004270:	499a      	ldr	r1, [pc, #616]	; (80044dc <_strtod_l+0x594>)
 8004272:	aa1a      	add	r2, sp, #104	; 0x68
 8004274:	a817      	add	r0, sp, #92	; 0x5c
 8004276:	f000 ff4d 	bl	8005114 <__hexnan>
 800427a:	2805      	cmp	r0, #5
 800427c:	d126      	bne.n	80042cc <_strtod_l+0x384>
 800427e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004280:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004284:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004288:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800428c:	e6a0      	b.n	8003fd0 <_strtod_l+0x88>
 800428e:	210a      	movs	r1, #10
 8004290:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004294:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004298:	e7b9      	b.n	800420e <_strtod_l+0x2c6>
 800429a:	2a6e      	cmp	r2, #110	; 0x6e
 800429c:	e7db      	b.n	8004256 <_strtod_l+0x30e>
 800429e:	4990      	ldr	r1, [pc, #576]	; (80044e0 <_strtod_l+0x598>)
 80042a0:	a817      	add	r0, sp, #92	; 0x5c
 80042a2:	f000 ff23 	bl	80050ec <__match>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	f43f aeb0 	beq.w	800400c <_strtod_l+0xc4>
 80042ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042ae:	498d      	ldr	r1, [pc, #564]	; (80044e4 <_strtod_l+0x59c>)
 80042b0:	3b01      	subs	r3, #1
 80042b2:	a817      	add	r0, sp, #92	; 0x5c
 80042b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80042b6:	f000 ff19 	bl	80050ec <__match>
 80042ba:	b910      	cbnz	r0, 80042c2 <_strtod_l+0x37a>
 80042bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042be:	3301      	adds	r3, #1
 80042c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80042c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80044f4 <_strtod_l+0x5ac>
 80042c6:	f04f 0a00 	mov.w	sl, #0
 80042ca:	e681      	b.n	8003fd0 <_strtod_l+0x88>
 80042cc:	4886      	ldr	r0, [pc, #536]	; (80044e8 <_strtod_l+0x5a0>)
 80042ce:	f001 fd3b 	bl	8005d48 <nan>
 80042d2:	ec5b ab10 	vmov	sl, fp, d0
 80042d6:	e67b      	b.n	8003fd0 <_strtod_l+0x88>
 80042d8:	9b05      	ldr	r3, [sp, #20]
 80042da:	9807      	ldr	r0, [sp, #28]
 80042dc:	1af3      	subs	r3, r6, r3
 80042de:	2f00      	cmp	r7, #0
 80042e0:	bf08      	it	eq
 80042e2:	462f      	moveq	r7, r5
 80042e4:	2d10      	cmp	r5, #16
 80042e6:	9306      	str	r3, [sp, #24]
 80042e8:	46a8      	mov	r8, r5
 80042ea:	bfa8      	it	ge
 80042ec:	f04f 0810 	movge.w	r8, #16
 80042f0:	f7fc f910 	bl	8000514 <__aeabi_ui2d>
 80042f4:	2d09      	cmp	r5, #9
 80042f6:	4682      	mov	sl, r0
 80042f8:	468b      	mov	fp, r1
 80042fa:	dd13      	ble.n	8004324 <_strtod_l+0x3dc>
 80042fc:	4b7b      	ldr	r3, [pc, #492]	; (80044ec <_strtod_l+0x5a4>)
 80042fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004302:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004306:	f7fc f97f 	bl	8000608 <__aeabi_dmul>
 800430a:	4682      	mov	sl, r0
 800430c:	4648      	mov	r0, r9
 800430e:	468b      	mov	fp, r1
 8004310:	f7fc f900 	bl	8000514 <__aeabi_ui2d>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4650      	mov	r0, sl
 800431a:	4659      	mov	r1, fp
 800431c:	f7fb ffbe 	bl	800029c <__adddf3>
 8004320:	4682      	mov	sl, r0
 8004322:	468b      	mov	fp, r1
 8004324:	2d0f      	cmp	r5, #15
 8004326:	dc38      	bgt.n	800439a <_strtod_l+0x452>
 8004328:	9b06      	ldr	r3, [sp, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f43f ae50 	beq.w	8003fd0 <_strtod_l+0x88>
 8004330:	dd24      	ble.n	800437c <_strtod_l+0x434>
 8004332:	2b16      	cmp	r3, #22
 8004334:	dc0b      	bgt.n	800434e <_strtod_l+0x406>
 8004336:	496d      	ldr	r1, [pc, #436]	; (80044ec <_strtod_l+0x5a4>)
 8004338:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800433c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004340:	4652      	mov	r2, sl
 8004342:	465b      	mov	r3, fp
 8004344:	f7fc f960 	bl	8000608 <__aeabi_dmul>
 8004348:	4682      	mov	sl, r0
 800434a:	468b      	mov	fp, r1
 800434c:	e640      	b.n	8003fd0 <_strtod_l+0x88>
 800434e:	9a06      	ldr	r2, [sp, #24]
 8004350:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004354:	4293      	cmp	r3, r2
 8004356:	db20      	blt.n	800439a <_strtod_l+0x452>
 8004358:	4c64      	ldr	r4, [pc, #400]	; (80044ec <_strtod_l+0x5a4>)
 800435a:	f1c5 050f 	rsb	r5, r5, #15
 800435e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004362:	4652      	mov	r2, sl
 8004364:	465b      	mov	r3, fp
 8004366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800436a:	f7fc f94d 	bl	8000608 <__aeabi_dmul>
 800436e:	9b06      	ldr	r3, [sp, #24]
 8004370:	1b5d      	subs	r5, r3, r5
 8004372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004376:	e9d4 2300 	ldrd	r2, r3, [r4]
 800437a:	e7e3      	b.n	8004344 <_strtod_l+0x3fc>
 800437c:	9b06      	ldr	r3, [sp, #24]
 800437e:	3316      	adds	r3, #22
 8004380:	db0b      	blt.n	800439a <_strtod_l+0x452>
 8004382:	9b05      	ldr	r3, [sp, #20]
 8004384:	1b9e      	subs	r6, r3, r6
 8004386:	4b59      	ldr	r3, [pc, #356]	; (80044ec <_strtod_l+0x5a4>)
 8004388:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800438c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004390:	4650      	mov	r0, sl
 8004392:	4659      	mov	r1, fp
 8004394:	f7fc fa62 	bl	800085c <__aeabi_ddiv>
 8004398:	e7d6      	b.n	8004348 <_strtod_l+0x400>
 800439a:	9b06      	ldr	r3, [sp, #24]
 800439c:	eba5 0808 	sub.w	r8, r5, r8
 80043a0:	4498      	add	r8, r3
 80043a2:	f1b8 0f00 	cmp.w	r8, #0
 80043a6:	dd74      	ble.n	8004492 <_strtod_l+0x54a>
 80043a8:	f018 030f 	ands.w	r3, r8, #15
 80043ac:	d00a      	beq.n	80043c4 <_strtod_l+0x47c>
 80043ae:	494f      	ldr	r1, [pc, #316]	; (80044ec <_strtod_l+0x5a4>)
 80043b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80043b4:	4652      	mov	r2, sl
 80043b6:	465b      	mov	r3, fp
 80043b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043bc:	f7fc f924 	bl	8000608 <__aeabi_dmul>
 80043c0:	4682      	mov	sl, r0
 80043c2:	468b      	mov	fp, r1
 80043c4:	f038 080f 	bics.w	r8, r8, #15
 80043c8:	d04f      	beq.n	800446a <_strtod_l+0x522>
 80043ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80043ce:	dd22      	ble.n	8004416 <_strtod_l+0x4ce>
 80043d0:	2500      	movs	r5, #0
 80043d2:	462e      	mov	r6, r5
 80043d4:	9507      	str	r5, [sp, #28]
 80043d6:	9505      	str	r5, [sp, #20]
 80043d8:	2322      	movs	r3, #34	; 0x22
 80043da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80044f4 <_strtod_l+0x5ac>
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	f04f 0a00 	mov.w	sl, #0
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f43f adf2 	beq.w	8003fd0 <_strtod_l+0x88>
 80043ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80043ee:	4620      	mov	r0, r4
 80043f0:	f000 ff7e 	bl	80052f0 <_Bfree>
 80043f4:	9905      	ldr	r1, [sp, #20]
 80043f6:	4620      	mov	r0, r4
 80043f8:	f000 ff7a 	bl	80052f0 <_Bfree>
 80043fc:	4631      	mov	r1, r6
 80043fe:	4620      	mov	r0, r4
 8004400:	f000 ff76 	bl	80052f0 <_Bfree>
 8004404:	9907      	ldr	r1, [sp, #28]
 8004406:	4620      	mov	r0, r4
 8004408:	f000 ff72 	bl	80052f0 <_Bfree>
 800440c:	4629      	mov	r1, r5
 800440e:	4620      	mov	r0, r4
 8004410:	f000 ff6e 	bl	80052f0 <_Bfree>
 8004414:	e5dc      	b.n	8003fd0 <_strtod_l+0x88>
 8004416:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <_strtod_l+0x5a8>)
 8004418:	9304      	str	r3, [sp, #16]
 800441a:	2300      	movs	r3, #0
 800441c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004420:	4650      	mov	r0, sl
 8004422:	4659      	mov	r1, fp
 8004424:	4699      	mov	r9, r3
 8004426:	f1b8 0f01 	cmp.w	r8, #1
 800442a:	dc21      	bgt.n	8004470 <_strtod_l+0x528>
 800442c:	b10b      	cbz	r3, 8004432 <_strtod_l+0x4ea>
 800442e:	4682      	mov	sl, r0
 8004430:	468b      	mov	fp, r1
 8004432:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <_strtod_l+0x5a8>)
 8004434:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004438:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800443c:	4652      	mov	r2, sl
 800443e:	465b      	mov	r3, fp
 8004440:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004444:	f7fc f8e0 	bl	8000608 <__aeabi_dmul>
 8004448:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <_strtod_l+0x5ac>)
 800444a:	460a      	mov	r2, r1
 800444c:	400b      	ands	r3, r1
 800444e:	492a      	ldr	r1, [pc, #168]	; (80044f8 <_strtod_l+0x5b0>)
 8004450:	428b      	cmp	r3, r1
 8004452:	4682      	mov	sl, r0
 8004454:	d8bc      	bhi.n	80043d0 <_strtod_l+0x488>
 8004456:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800445a:	428b      	cmp	r3, r1
 800445c:	bf86      	itte	hi
 800445e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80044fc <_strtod_l+0x5b4>
 8004462:	f04f 3aff 	movhi.w	sl, #4294967295
 8004466:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800446a:	2300      	movs	r3, #0
 800446c:	9304      	str	r3, [sp, #16]
 800446e:	e084      	b.n	800457a <_strtod_l+0x632>
 8004470:	f018 0f01 	tst.w	r8, #1
 8004474:	d005      	beq.n	8004482 <_strtod_l+0x53a>
 8004476:	9b04      	ldr	r3, [sp, #16]
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc f8c4 	bl	8000608 <__aeabi_dmul>
 8004480:	2301      	movs	r3, #1
 8004482:	9a04      	ldr	r2, [sp, #16]
 8004484:	3208      	adds	r2, #8
 8004486:	f109 0901 	add.w	r9, r9, #1
 800448a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800448e:	9204      	str	r2, [sp, #16]
 8004490:	e7c9      	b.n	8004426 <_strtod_l+0x4de>
 8004492:	d0ea      	beq.n	800446a <_strtod_l+0x522>
 8004494:	f1c8 0800 	rsb	r8, r8, #0
 8004498:	f018 020f 	ands.w	r2, r8, #15
 800449c:	d00a      	beq.n	80044b4 <_strtod_l+0x56c>
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <_strtod_l+0x5a4>)
 80044a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044a4:	4650      	mov	r0, sl
 80044a6:	4659      	mov	r1, fp
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f7fc f9d6 	bl	800085c <__aeabi_ddiv>
 80044b0:	4682      	mov	sl, r0
 80044b2:	468b      	mov	fp, r1
 80044b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80044b8:	d0d7      	beq.n	800446a <_strtod_l+0x522>
 80044ba:	f1b8 0f1f 	cmp.w	r8, #31
 80044be:	dd1f      	ble.n	8004500 <_strtod_l+0x5b8>
 80044c0:	2500      	movs	r5, #0
 80044c2:	462e      	mov	r6, r5
 80044c4:	9507      	str	r5, [sp, #28]
 80044c6:	9505      	str	r5, [sp, #20]
 80044c8:	2322      	movs	r3, #34	; 0x22
 80044ca:	f04f 0a00 	mov.w	sl, #0
 80044ce:	f04f 0b00 	mov.w	fp, #0
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	e786      	b.n	80043e4 <_strtod_l+0x49c>
 80044d6:	bf00      	nop
 80044d8:	08006cbd 	.word	0x08006cbd
 80044dc:	08006cd4 	.word	0x08006cd4
 80044e0:	08006cb4 	.word	0x08006cb4
 80044e4:	08006cb7 	.word	0x08006cb7
 80044e8:	08006f47 	.word	0x08006f47
 80044ec:	08006e38 	.word	0x08006e38
 80044f0:	08006e10 	.word	0x08006e10
 80044f4:	7ff00000 	.word	0x7ff00000
 80044f8:	7ca00000 	.word	0x7ca00000
 80044fc:	7fefffff 	.word	0x7fefffff
 8004500:	f018 0310 	ands.w	r3, r8, #16
 8004504:	bf18      	it	ne
 8004506:	236a      	movne	r3, #106	; 0x6a
 8004508:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80048b8 <_strtod_l+0x970>
 800450c:	9304      	str	r3, [sp, #16]
 800450e:	4650      	mov	r0, sl
 8004510:	4659      	mov	r1, fp
 8004512:	2300      	movs	r3, #0
 8004514:	f018 0f01 	tst.w	r8, #1
 8004518:	d004      	beq.n	8004524 <_strtod_l+0x5dc>
 800451a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800451e:	f7fc f873 	bl	8000608 <__aeabi_dmul>
 8004522:	2301      	movs	r3, #1
 8004524:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004528:	f109 0908 	add.w	r9, r9, #8
 800452c:	d1f2      	bne.n	8004514 <_strtod_l+0x5cc>
 800452e:	b10b      	cbz	r3, 8004534 <_strtod_l+0x5ec>
 8004530:	4682      	mov	sl, r0
 8004532:	468b      	mov	fp, r1
 8004534:	9b04      	ldr	r3, [sp, #16]
 8004536:	b1c3      	cbz	r3, 800456a <_strtod_l+0x622>
 8004538:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800453c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004540:	2b00      	cmp	r3, #0
 8004542:	4659      	mov	r1, fp
 8004544:	dd11      	ble.n	800456a <_strtod_l+0x622>
 8004546:	2b1f      	cmp	r3, #31
 8004548:	f340 8124 	ble.w	8004794 <_strtod_l+0x84c>
 800454c:	2b34      	cmp	r3, #52	; 0x34
 800454e:	bfde      	ittt	le
 8004550:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004554:	f04f 33ff 	movle.w	r3, #4294967295
 8004558:	fa03 f202 	lslle.w	r2, r3, r2
 800455c:	f04f 0a00 	mov.w	sl, #0
 8004560:	bfcc      	ite	gt
 8004562:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004566:	ea02 0b01 	andle.w	fp, r2, r1
 800456a:	2200      	movs	r2, #0
 800456c:	2300      	movs	r3, #0
 800456e:	4650      	mov	r0, sl
 8004570:	4659      	mov	r1, fp
 8004572:	f7fc fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004576:	2800      	cmp	r0, #0
 8004578:	d1a2      	bne.n	80044c0 <_strtod_l+0x578>
 800457a:	9b07      	ldr	r3, [sp, #28]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	9908      	ldr	r1, [sp, #32]
 8004580:	462b      	mov	r3, r5
 8004582:	463a      	mov	r2, r7
 8004584:	4620      	mov	r0, r4
 8004586:	f000 ff1b 	bl	80053c0 <__s2b>
 800458a:	9007      	str	r0, [sp, #28]
 800458c:	2800      	cmp	r0, #0
 800458e:	f43f af1f 	beq.w	80043d0 <_strtod_l+0x488>
 8004592:	9b05      	ldr	r3, [sp, #20]
 8004594:	1b9e      	subs	r6, r3, r6
 8004596:	9b06      	ldr	r3, [sp, #24]
 8004598:	2b00      	cmp	r3, #0
 800459a:	bfb4      	ite	lt
 800459c:	4633      	movlt	r3, r6
 800459e:	2300      	movge	r3, #0
 80045a0:	930c      	str	r3, [sp, #48]	; 0x30
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	2500      	movs	r5, #0
 80045a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80045aa:	9312      	str	r3, [sp, #72]	; 0x48
 80045ac:	462e      	mov	r6, r5
 80045ae:	9b07      	ldr	r3, [sp, #28]
 80045b0:	4620      	mov	r0, r4
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	f000 fe5c 	bl	8005270 <_Balloc>
 80045b8:	9005      	str	r0, [sp, #20]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	f43f af0c 	beq.w	80043d8 <_strtod_l+0x490>
 80045c0:	9b07      	ldr	r3, [sp, #28]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	3202      	adds	r2, #2
 80045c6:	f103 010c 	add.w	r1, r3, #12
 80045ca:	0092      	lsls	r2, r2, #2
 80045cc:	300c      	adds	r0, #12
 80045ce:	f7ff fc75 	bl	8003ebc <memcpy>
 80045d2:	ec4b ab10 	vmov	d0, sl, fp
 80045d6:	aa1a      	add	r2, sp, #104	; 0x68
 80045d8:	a919      	add	r1, sp, #100	; 0x64
 80045da:	4620      	mov	r0, r4
 80045dc:	f001 fa36 	bl	8005a4c <__d2b>
 80045e0:	ec4b ab18 	vmov	d8, sl, fp
 80045e4:	9018      	str	r0, [sp, #96]	; 0x60
 80045e6:	2800      	cmp	r0, #0
 80045e8:	f43f aef6 	beq.w	80043d8 <_strtod_l+0x490>
 80045ec:	2101      	movs	r1, #1
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 ff80 	bl	80054f4 <__i2b>
 80045f4:	4606      	mov	r6, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	f43f aeee 	beq.w	80043d8 <_strtod_l+0x490>
 80045fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80045fe:	9904      	ldr	r1, [sp, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	bfab      	itete	ge
 8004604:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004606:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004608:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800460a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800460e:	bfac      	ite	ge
 8004610:	eb03 0902 	addge.w	r9, r3, r2
 8004614:	1ad7      	sublt	r7, r2, r3
 8004616:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004618:	eba3 0801 	sub.w	r8, r3, r1
 800461c:	4490      	add	r8, r2
 800461e:	4ba1      	ldr	r3, [pc, #644]	; (80048a4 <_strtod_l+0x95c>)
 8004620:	f108 38ff 	add.w	r8, r8, #4294967295
 8004624:	4598      	cmp	r8, r3
 8004626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800462a:	f280 80c7 	bge.w	80047bc <_strtod_l+0x874>
 800462e:	eba3 0308 	sub.w	r3, r3, r8
 8004632:	2b1f      	cmp	r3, #31
 8004634:	eba2 0203 	sub.w	r2, r2, r3
 8004638:	f04f 0101 	mov.w	r1, #1
 800463c:	f300 80b1 	bgt.w	80047a2 <_strtod_l+0x85a>
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	930d      	str	r3, [sp, #52]	; 0x34
 8004646:	2300      	movs	r3, #0
 8004648:	9308      	str	r3, [sp, #32]
 800464a:	eb09 0802 	add.w	r8, r9, r2
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	45c1      	cmp	r9, r8
 8004652:	4417      	add	r7, r2
 8004654:	441f      	add	r7, r3
 8004656:	464b      	mov	r3, r9
 8004658:	bfa8      	it	ge
 800465a:	4643      	movge	r3, r8
 800465c:	42bb      	cmp	r3, r7
 800465e:	bfa8      	it	ge
 8004660:	463b      	movge	r3, r7
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfc2      	ittt	gt
 8004666:	eba8 0803 	subgt.w	r8, r8, r3
 800466a:	1aff      	subgt	r7, r7, r3
 800466c:	eba9 0903 	subgt.w	r9, r9, r3
 8004670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004672:	2b00      	cmp	r3, #0
 8004674:	dd17      	ble.n	80046a6 <_strtod_l+0x75e>
 8004676:	4631      	mov	r1, r6
 8004678:	461a      	mov	r2, r3
 800467a:	4620      	mov	r0, r4
 800467c:	f000 fffa 	bl	8005674 <__pow5mult>
 8004680:	4606      	mov	r6, r0
 8004682:	2800      	cmp	r0, #0
 8004684:	f43f aea8 	beq.w	80043d8 <_strtod_l+0x490>
 8004688:	4601      	mov	r1, r0
 800468a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800468c:	4620      	mov	r0, r4
 800468e:	f000 ff47 	bl	8005520 <__multiply>
 8004692:	900b      	str	r0, [sp, #44]	; 0x2c
 8004694:	2800      	cmp	r0, #0
 8004696:	f43f ae9f 	beq.w	80043d8 <_strtod_l+0x490>
 800469a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fe27 	bl	80052f0 <_Bfree>
 80046a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046a4:	9318      	str	r3, [sp, #96]	; 0x60
 80046a6:	f1b8 0f00 	cmp.w	r8, #0
 80046aa:	f300 808c 	bgt.w	80047c6 <_strtod_l+0x87e>
 80046ae:	9b06      	ldr	r3, [sp, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dd08      	ble.n	80046c6 <_strtod_l+0x77e>
 80046b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046b6:	9905      	ldr	r1, [sp, #20]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 ffdb 	bl	8005674 <__pow5mult>
 80046be:	9005      	str	r0, [sp, #20]
 80046c0:	2800      	cmp	r0, #0
 80046c2:	f43f ae89 	beq.w	80043d8 <_strtod_l+0x490>
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	dd08      	ble.n	80046dc <_strtod_l+0x794>
 80046ca:	9905      	ldr	r1, [sp, #20]
 80046cc:	463a      	mov	r2, r7
 80046ce:	4620      	mov	r0, r4
 80046d0:	f001 f82a 	bl	8005728 <__lshift>
 80046d4:	9005      	str	r0, [sp, #20]
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f43f ae7e 	beq.w	80043d8 <_strtod_l+0x490>
 80046dc:	f1b9 0f00 	cmp.w	r9, #0
 80046e0:	dd08      	ble.n	80046f4 <_strtod_l+0x7ac>
 80046e2:	4631      	mov	r1, r6
 80046e4:	464a      	mov	r2, r9
 80046e6:	4620      	mov	r0, r4
 80046e8:	f001 f81e 	bl	8005728 <__lshift>
 80046ec:	4606      	mov	r6, r0
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f43f ae72 	beq.w	80043d8 <_strtod_l+0x490>
 80046f4:	9a05      	ldr	r2, [sp, #20]
 80046f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80046f8:	4620      	mov	r0, r4
 80046fa:	f001 f8a1 	bl	8005840 <__mdiff>
 80046fe:	4605      	mov	r5, r0
 8004700:	2800      	cmp	r0, #0
 8004702:	f43f ae69 	beq.w	80043d8 <_strtod_l+0x490>
 8004706:	68c3      	ldr	r3, [r0, #12]
 8004708:	930b      	str	r3, [sp, #44]	; 0x2c
 800470a:	2300      	movs	r3, #0
 800470c:	60c3      	str	r3, [r0, #12]
 800470e:	4631      	mov	r1, r6
 8004710:	f001 f87a 	bl	8005808 <__mcmp>
 8004714:	2800      	cmp	r0, #0
 8004716:	da60      	bge.n	80047da <_strtod_l+0x892>
 8004718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800471a:	ea53 030a 	orrs.w	r3, r3, sl
 800471e:	f040 8082 	bne.w	8004826 <_strtod_l+0x8de>
 8004722:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004726:	2b00      	cmp	r3, #0
 8004728:	d17d      	bne.n	8004826 <_strtod_l+0x8de>
 800472a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800472e:	0d1b      	lsrs	r3, r3, #20
 8004730:	051b      	lsls	r3, r3, #20
 8004732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004736:	d976      	bls.n	8004826 <_strtod_l+0x8de>
 8004738:	696b      	ldr	r3, [r5, #20]
 800473a:	b913      	cbnz	r3, 8004742 <_strtod_l+0x7fa>
 800473c:	692b      	ldr	r3, [r5, #16]
 800473e:	2b01      	cmp	r3, #1
 8004740:	dd71      	ble.n	8004826 <_strtod_l+0x8de>
 8004742:	4629      	mov	r1, r5
 8004744:	2201      	movs	r2, #1
 8004746:	4620      	mov	r0, r4
 8004748:	f000 ffee 	bl	8005728 <__lshift>
 800474c:	4631      	mov	r1, r6
 800474e:	4605      	mov	r5, r0
 8004750:	f001 f85a 	bl	8005808 <__mcmp>
 8004754:	2800      	cmp	r0, #0
 8004756:	dd66      	ble.n	8004826 <_strtod_l+0x8de>
 8004758:	9904      	ldr	r1, [sp, #16]
 800475a:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <_strtod_l+0x960>)
 800475c:	465b      	mov	r3, fp
 800475e:	2900      	cmp	r1, #0
 8004760:	f000 8081 	beq.w	8004866 <_strtod_l+0x91e>
 8004764:	ea02 010b 	and.w	r1, r2, fp
 8004768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800476c:	dc7b      	bgt.n	8004866 <_strtod_l+0x91e>
 800476e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004772:	f77f aea9 	ble.w	80044c8 <_strtod_l+0x580>
 8004776:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <_strtod_l+0x964>)
 8004778:	4650      	mov	r0, sl
 800477a:	4659      	mov	r1, fp
 800477c:	2200      	movs	r2, #0
 800477e:	f7fb ff43 	bl	8000608 <__aeabi_dmul>
 8004782:	460b      	mov	r3, r1
 8004784:	4303      	orrs	r3, r0
 8004786:	bf08      	it	eq
 8004788:	2322      	moveq	r3, #34	; 0x22
 800478a:	4682      	mov	sl, r0
 800478c:	468b      	mov	fp, r1
 800478e:	bf08      	it	eq
 8004790:	6023      	streq	r3, [r4, #0]
 8004792:	e62b      	b.n	80043ec <_strtod_l+0x4a4>
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	ea03 0a0a 	and.w	sl, r3, sl
 80047a0:	e6e3      	b.n	800456a <_strtod_l+0x622>
 80047a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80047a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80047aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80047ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80047b2:	fa01 f308 	lsl.w	r3, r1, r8
 80047b6:	9308      	str	r3, [sp, #32]
 80047b8:	910d      	str	r1, [sp, #52]	; 0x34
 80047ba:	e746      	b.n	800464a <_strtod_l+0x702>
 80047bc:	2300      	movs	r3, #0
 80047be:	9308      	str	r3, [sp, #32]
 80047c0:	2301      	movs	r3, #1
 80047c2:	930d      	str	r3, [sp, #52]	; 0x34
 80047c4:	e741      	b.n	800464a <_strtod_l+0x702>
 80047c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80047c8:	4642      	mov	r2, r8
 80047ca:	4620      	mov	r0, r4
 80047cc:	f000 ffac 	bl	8005728 <__lshift>
 80047d0:	9018      	str	r0, [sp, #96]	; 0x60
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f47f af6b 	bne.w	80046ae <_strtod_l+0x766>
 80047d8:	e5fe      	b.n	80043d8 <_strtod_l+0x490>
 80047da:	465f      	mov	r7, fp
 80047dc:	d16e      	bne.n	80048bc <_strtod_l+0x974>
 80047de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047e4:	b342      	cbz	r2, 8004838 <_strtod_l+0x8f0>
 80047e6:	4a32      	ldr	r2, [pc, #200]	; (80048b0 <_strtod_l+0x968>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d128      	bne.n	800483e <_strtod_l+0x8f6>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	4651      	mov	r1, sl
 80047f0:	b1eb      	cbz	r3, 800482e <_strtod_l+0x8e6>
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <_strtod_l+0x960>)
 80047f4:	403b      	ands	r3, r7
 80047f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
 80047fe:	d819      	bhi.n	8004834 <_strtod_l+0x8ec>
 8004800:	0d1b      	lsrs	r3, r3, #20
 8004802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	4299      	cmp	r1, r3
 800480c:	d117      	bne.n	800483e <_strtod_l+0x8f6>
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <_strtod_l+0x96c>)
 8004810:	429f      	cmp	r7, r3
 8004812:	d102      	bne.n	800481a <_strtod_l+0x8d2>
 8004814:	3101      	adds	r1, #1
 8004816:	f43f addf 	beq.w	80043d8 <_strtod_l+0x490>
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <_strtod_l+0x960>)
 800481c:	403b      	ands	r3, r7
 800481e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004822:	f04f 0a00 	mov.w	sl, #0
 8004826:	9b04      	ldr	r3, [sp, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1a4      	bne.n	8004776 <_strtod_l+0x82e>
 800482c:	e5de      	b.n	80043ec <_strtod_l+0x4a4>
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	e7ea      	b.n	800480a <_strtod_l+0x8c2>
 8004834:	4613      	mov	r3, r2
 8004836:	e7e8      	b.n	800480a <_strtod_l+0x8c2>
 8004838:	ea53 030a 	orrs.w	r3, r3, sl
 800483c:	d08c      	beq.n	8004758 <_strtod_l+0x810>
 800483e:	9b08      	ldr	r3, [sp, #32]
 8004840:	b1db      	cbz	r3, 800487a <_strtod_l+0x932>
 8004842:	423b      	tst	r3, r7
 8004844:	d0ef      	beq.n	8004826 <_strtod_l+0x8de>
 8004846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004848:	9a04      	ldr	r2, [sp, #16]
 800484a:	4650      	mov	r0, sl
 800484c:	4659      	mov	r1, fp
 800484e:	b1c3      	cbz	r3, 8004882 <_strtod_l+0x93a>
 8004850:	f7ff fb5e 	bl	8003f10 <sulp>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	ec51 0b18 	vmov	r0, r1, d8
 800485c:	f7fb fd1e 	bl	800029c <__adddf3>
 8004860:	4682      	mov	sl, r0
 8004862:	468b      	mov	fp, r1
 8004864:	e7df      	b.n	8004826 <_strtod_l+0x8de>
 8004866:	4013      	ands	r3, r2
 8004868:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800486c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004870:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004874:	f04f 3aff 	mov.w	sl, #4294967295
 8004878:	e7d5      	b.n	8004826 <_strtod_l+0x8de>
 800487a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800487c:	ea13 0f0a 	tst.w	r3, sl
 8004880:	e7e0      	b.n	8004844 <_strtod_l+0x8fc>
 8004882:	f7ff fb45 	bl	8003f10 <sulp>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	ec51 0b18 	vmov	r0, r1, d8
 800488e:	f7fb fd03 	bl	8000298 <__aeabi_dsub>
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	4682      	mov	sl, r0
 8004898:	468b      	mov	fp, r1
 800489a:	f7fc f91d 	bl	8000ad8 <__aeabi_dcmpeq>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d0c1      	beq.n	8004826 <_strtod_l+0x8de>
 80048a2:	e611      	b.n	80044c8 <_strtod_l+0x580>
 80048a4:	fffffc02 	.word	0xfffffc02
 80048a8:	7ff00000 	.word	0x7ff00000
 80048ac:	39500000 	.word	0x39500000
 80048b0:	000fffff 	.word	0x000fffff
 80048b4:	7fefffff 	.word	0x7fefffff
 80048b8:	08006ce8 	.word	0x08006ce8
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	f001 f920 	bl	8005b04 <__ratio>
 80048c4:	ec59 8b10 	vmov	r8, r9, d0
 80048c8:	ee10 0a10 	vmov	r0, s0
 80048cc:	2200      	movs	r2, #0
 80048ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048d2:	4649      	mov	r1, r9
 80048d4:	f7fc f914 	bl	8000b00 <__aeabi_dcmple>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d07a      	beq.n	80049d2 <_strtod_l+0xa8a>
 80048dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d04a      	beq.n	8004978 <_strtod_l+0xa30>
 80048e2:	4b95      	ldr	r3, [pc, #596]	; (8004b38 <_strtod_l+0xbf0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004b38 <_strtod_l+0xbf0>
 80048ee:	f04f 0800 	mov.w	r8, #0
 80048f2:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <_strtod_l+0xbf4>)
 80048f4:	403b      	ands	r3, r7
 80048f6:	930d      	str	r3, [sp, #52]	; 0x34
 80048f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048fa:	4b91      	ldr	r3, [pc, #580]	; (8004b40 <_strtod_l+0xbf8>)
 80048fc:	429a      	cmp	r2, r3
 80048fe:	f040 80b0 	bne.w	8004a62 <_strtod_l+0xb1a>
 8004902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004906:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800490a:	ec4b ab10 	vmov	d0, sl, fp
 800490e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004912:	f001 f81f 	bl	8005954 <__ulp>
 8004916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800491a:	ec53 2b10 	vmov	r2, r3, d0
 800491e:	f7fb fe73 	bl	8000608 <__aeabi_dmul>
 8004922:	4652      	mov	r2, sl
 8004924:	465b      	mov	r3, fp
 8004926:	f7fb fcb9 	bl	800029c <__adddf3>
 800492a:	460b      	mov	r3, r1
 800492c:	4983      	ldr	r1, [pc, #524]	; (8004b3c <_strtod_l+0xbf4>)
 800492e:	4a85      	ldr	r2, [pc, #532]	; (8004b44 <_strtod_l+0xbfc>)
 8004930:	4019      	ands	r1, r3
 8004932:	4291      	cmp	r1, r2
 8004934:	4682      	mov	sl, r0
 8004936:	d960      	bls.n	80049fa <_strtod_l+0xab2>
 8004938:	ee18 3a90 	vmov	r3, s17
 800493c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004940:	4293      	cmp	r3, r2
 8004942:	d104      	bne.n	800494e <_strtod_l+0xa06>
 8004944:	ee18 3a10 	vmov	r3, s16
 8004948:	3301      	adds	r3, #1
 800494a:	f43f ad45 	beq.w	80043d8 <_strtod_l+0x490>
 800494e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004b50 <_strtod_l+0xc08>
 8004952:	f04f 3aff 	mov.w	sl, #4294967295
 8004956:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fcc9 	bl	80052f0 <_Bfree>
 800495e:	9905      	ldr	r1, [sp, #20]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 fcc5 	bl	80052f0 <_Bfree>
 8004966:	4631      	mov	r1, r6
 8004968:	4620      	mov	r0, r4
 800496a:	f000 fcc1 	bl	80052f0 <_Bfree>
 800496e:	4629      	mov	r1, r5
 8004970:	4620      	mov	r0, r4
 8004972:	f000 fcbd 	bl	80052f0 <_Bfree>
 8004976:	e61a      	b.n	80045ae <_strtod_l+0x666>
 8004978:	f1ba 0f00 	cmp.w	sl, #0
 800497c:	d11b      	bne.n	80049b6 <_strtod_l+0xa6e>
 800497e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004982:	b9f3      	cbnz	r3, 80049c2 <_strtod_l+0xa7a>
 8004984:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <_strtod_l+0xbf0>)
 8004986:	2200      	movs	r2, #0
 8004988:	4640      	mov	r0, r8
 800498a:	4649      	mov	r1, r9
 800498c:	f7fc f8ae 	bl	8000aec <__aeabi_dcmplt>
 8004990:	b9d0      	cbnz	r0, 80049c8 <_strtod_l+0xa80>
 8004992:	4640      	mov	r0, r8
 8004994:	4649      	mov	r1, r9
 8004996:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <_strtod_l+0xc00>)
 8004998:	2200      	movs	r2, #0
 800499a:	f7fb fe35 	bl	8000608 <__aeabi_dmul>
 800499e:	4680      	mov	r8, r0
 80049a0:	4689      	mov	r9, r1
 80049a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80049a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80049aa:	9315      	str	r3, [sp, #84]	; 0x54
 80049ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80049b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049b4:	e79d      	b.n	80048f2 <_strtod_l+0x9aa>
 80049b6:	f1ba 0f01 	cmp.w	sl, #1
 80049ba:	d102      	bne.n	80049c2 <_strtod_l+0xa7a>
 80049bc:	2f00      	cmp	r7, #0
 80049be:	f43f ad83 	beq.w	80044c8 <_strtod_l+0x580>
 80049c2:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <_strtod_l+0xc04>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	e78e      	b.n	80048e6 <_strtod_l+0x99e>
 80049c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004b48 <_strtod_l+0xc00>
 80049cc:	f04f 0800 	mov.w	r8, #0
 80049d0:	e7e7      	b.n	80049a2 <_strtod_l+0xa5a>
 80049d2:	4b5d      	ldr	r3, [pc, #372]	; (8004b48 <_strtod_l+0xc00>)
 80049d4:	4640      	mov	r0, r8
 80049d6:	4649      	mov	r1, r9
 80049d8:	2200      	movs	r2, #0
 80049da:	f7fb fe15 	bl	8000608 <__aeabi_dmul>
 80049de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e0:	4680      	mov	r8, r0
 80049e2:	4689      	mov	r9, r1
 80049e4:	b933      	cbnz	r3, 80049f4 <_strtod_l+0xaac>
 80049e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049ea:	900e      	str	r0, [sp, #56]	; 0x38
 80049ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80049ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80049f2:	e7dd      	b.n	80049b0 <_strtod_l+0xa68>
 80049f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80049f8:	e7f9      	b.n	80049ee <_strtod_l+0xaa6>
 80049fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1a8      	bne.n	8004956 <_strtod_l+0xa0e>
 8004a04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a0a:	0d1b      	lsrs	r3, r3, #20
 8004a0c:	051b      	lsls	r3, r3, #20
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d1a1      	bne.n	8004956 <_strtod_l+0xa0e>
 8004a12:	4640      	mov	r0, r8
 8004a14:	4649      	mov	r1, r9
 8004a16:	f7fc f8f1 	bl	8000bfc <__aeabi_d2lz>
 8004a1a:	f7fb fdc7 	bl	80005ac <__aeabi_l2d>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4640      	mov	r0, r8
 8004a24:	4649      	mov	r1, r9
 8004a26:	f7fb fc37 	bl	8000298 <__aeabi_dsub>
 8004a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a30:	ea43 030a 	orr.w	r3, r3, sl
 8004a34:	4313      	orrs	r3, r2
 8004a36:	4680      	mov	r8, r0
 8004a38:	4689      	mov	r9, r1
 8004a3a:	d055      	beq.n	8004ae8 <_strtod_l+0xba0>
 8004a3c:	a336      	add	r3, pc, #216	; (adr r3, 8004b18 <_strtod_l+0xbd0>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fc f853 	bl	8000aec <__aeabi_dcmplt>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	f47f acd0 	bne.w	80043ec <_strtod_l+0x4a4>
 8004a4c:	a334      	add	r3, pc, #208	; (adr r3, 8004b20 <_strtod_l+0xbd8>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	4640      	mov	r0, r8
 8004a54:	4649      	mov	r1, r9
 8004a56:	f7fc f867 	bl	8000b28 <__aeabi_dcmpgt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f43f af7b 	beq.w	8004956 <_strtod_l+0xa0e>
 8004a60:	e4c4      	b.n	80043ec <_strtod_l+0x4a4>
 8004a62:	9b04      	ldr	r3, [sp, #16]
 8004a64:	b333      	cbz	r3, 8004ab4 <_strtod_l+0xb6c>
 8004a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a6c:	d822      	bhi.n	8004ab4 <_strtod_l+0xb6c>
 8004a6e:	a32e      	add	r3, pc, #184	; (adr r3, 8004b28 <_strtod_l+0xbe0>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	4640      	mov	r0, r8
 8004a76:	4649      	mov	r1, r9
 8004a78:	f7fc f842 	bl	8000b00 <__aeabi_dcmple>
 8004a7c:	b1a0      	cbz	r0, 8004aa8 <_strtod_l+0xb60>
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	f7fc f883 	bl	8000b8c <__aeabi_d2uiz>
 8004a86:	2801      	cmp	r0, #1
 8004a88:	bf38      	it	cc
 8004a8a:	2001      	movcc	r0, #1
 8004a8c:	f7fb fd42 	bl	8000514 <__aeabi_ui2d>
 8004a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a92:	4680      	mov	r8, r0
 8004a94:	4689      	mov	r9, r1
 8004a96:	bb23      	cbnz	r3, 8004ae2 <_strtod_l+0xb9a>
 8004a98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a9c:	9010      	str	r0, [sp, #64]	; 0x40
 8004a9e:	9311      	str	r3, [sp, #68]	; 0x44
 8004aa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004aa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004aac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ab8:	eeb0 0a48 	vmov.f32	s0, s16
 8004abc:	eef0 0a68 	vmov.f32	s1, s17
 8004ac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ac4:	f000 ff46 	bl	8005954 <__ulp>
 8004ac8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004acc:	ec53 2b10 	vmov	r2, r3, d0
 8004ad0:	f7fb fd9a 	bl	8000608 <__aeabi_dmul>
 8004ad4:	ec53 2b18 	vmov	r2, r3, d8
 8004ad8:	f7fb fbe0 	bl	800029c <__adddf3>
 8004adc:	4682      	mov	sl, r0
 8004ade:	468b      	mov	fp, r1
 8004ae0:	e78d      	b.n	80049fe <_strtod_l+0xab6>
 8004ae2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004ae6:	e7db      	b.n	8004aa0 <_strtod_l+0xb58>
 8004ae8:	a311      	add	r3, pc, #68	; (adr r3, 8004b30 <_strtod_l+0xbe8>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fffd 	bl	8000aec <__aeabi_dcmplt>
 8004af2:	e7b2      	b.n	8004a5a <_strtod_l+0xb12>
 8004af4:	2300      	movs	r3, #0
 8004af6:	930a      	str	r3, [sp, #40]	; 0x28
 8004af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004afa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	f7ff ba6b 	b.w	8003fd8 <_strtod_l+0x90>
 8004b02:	2a65      	cmp	r2, #101	; 0x65
 8004b04:	f43f ab5f 	beq.w	80041c6 <_strtod_l+0x27e>
 8004b08:	2a45      	cmp	r2, #69	; 0x45
 8004b0a:	f43f ab5c 	beq.w	80041c6 <_strtod_l+0x27e>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f7ff bb94 	b.w	800423c <_strtod_l+0x2f4>
 8004b14:	f3af 8000 	nop.w
 8004b18:	94a03595 	.word	0x94a03595
 8004b1c:	3fdfffff 	.word	0x3fdfffff
 8004b20:	35afe535 	.word	0x35afe535
 8004b24:	3fe00000 	.word	0x3fe00000
 8004b28:	ffc00000 	.word	0xffc00000
 8004b2c:	41dfffff 	.word	0x41dfffff
 8004b30:	94a03595 	.word	0x94a03595
 8004b34:	3fcfffff 	.word	0x3fcfffff
 8004b38:	3ff00000 	.word	0x3ff00000
 8004b3c:	7ff00000 	.word	0x7ff00000
 8004b40:	7fe00000 	.word	0x7fe00000
 8004b44:	7c9fffff 	.word	0x7c9fffff
 8004b48:	3fe00000 	.word	0x3fe00000
 8004b4c:	bff00000 	.word	0xbff00000
 8004b50:	7fefffff 	.word	0x7fefffff

08004b54 <strtod>:
 8004b54:	460a      	mov	r2, r1
 8004b56:	4601      	mov	r1, r0
 8004b58:	4802      	ldr	r0, [pc, #8]	; (8004b64 <strtod+0x10>)
 8004b5a:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <strtod+0x14>)
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f7ff b9f3 	b.w	8003f48 <_strtod_l>
 8004b62:	bf00      	nop
 8004b64:	2000000c 	.word	0x2000000c
 8004b68:	20000074 	.word	0x20000074

08004b6c <rshift>:
 8004b6c:	6903      	ldr	r3, [r0, #16]
 8004b6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004b72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004b7a:	f100 0414 	add.w	r4, r0, #20
 8004b7e:	dd45      	ble.n	8004c0c <rshift+0xa0>
 8004b80:	f011 011f 	ands.w	r1, r1, #31
 8004b84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004b88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004b8c:	d10c      	bne.n	8004ba8 <rshift+0x3c>
 8004b8e:	f100 0710 	add.w	r7, r0, #16
 8004b92:	4629      	mov	r1, r5
 8004b94:	42b1      	cmp	r1, r6
 8004b96:	d334      	bcc.n	8004c02 <rshift+0x96>
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	1eea      	subs	r2, r5, #3
 8004b9e:	4296      	cmp	r6, r2
 8004ba0:	bf38      	it	cc
 8004ba2:	2300      	movcc	r3, #0
 8004ba4:	4423      	add	r3, r4
 8004ba6:	e015      	b.n	8004bd4 <rshift+0x68>
 8004ba8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004bac:	f1c1 0820 	rsb	r8, r1, #32
 8004bb0:	40cf      	lsrs	r7, r1
 8004bb2:	f105 0e04 	add.w	lr, r5, #4
 8004bb6:	46a1      	mov	r9, r4
 8004bb8:	4576      	cmp	r6, lr
 8004bba:	46f4      	mov	ip, lr
 8004bbc:	d815      	bhi.n	8004bea <rshift+0x7e>
 8004bbe:	1a9a      	subs	r2, r3, r2
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	3a04      	subs	r2, #4
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	42ae      	cmp	r6, r5
 8004bc8:	bf38      	it	cc
 8004bca:	2200      	movcc	r2, #0
 8004bcc:	18a3      	adds	r3, r4, r2
 8004bce:	50a7      	str	r7, [r4, r2]
 8004bd0:	b107      	cbz	r7, 8004bd4 <rshift+0x68>
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	1b1a      	subs	r2, r3, r4
 8004bd6:	42a3      	cmp	r3, r4
 8004bd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004bdc:	bf08      	it	eq
 8004bde:	2300      	moveq	r3, #0
 8004be0:	6102      	str	r2, [r0, #16]
 8004be2:	bf08      	it	eq
 8004be4:	6143      	streq	r3, [r0, #20]
 8004be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bea:	f8dc c000 	ldr.w	ip, [ip]
 8004bee:	fa0c fc08 	lsl.w	ip, ip, r8
 8004bf2:	ea4c 0707 	orr.w	r7, ip, r7
 8004bf6:	f849 7b04 	str.w	r7, [r9], #4
 8004bfa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004bfe:	40cf      	lsrs	r7, r1
 8004c00:	e7da      	b.n	8004bb8 <rshift+0x4c>
 8004c02:	f851 cb04 	ldr.w	ip, [r1], #4
 8004c06:	f847 cf04 	str.w	ip, [r7, #4]!
 8004c0a:	e7c3      	b.n	8004b94 <rshift+0x28>
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	e7e1      	b.n	8004bd4 <rshift+0x68>

08004c10 <__hexdig_fun>:
 8004c10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	d802      	bhi.n	8004c1e <__hexdig_fun+0xe>
 8004c18:	3820      	subs	r0, #32
 8004c1a:	b2c0      	uxtb	r0, r0
 8004c1c:	4770      	bx	lr
 8004c1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d801      	bhi.n	8004c2a <__hexdig_fun+0x1a>
 8004c26:	3847      	subs	r0, #71	; 0x47
 8004c28:	e7f7      	b.n	8004c1a <__hexdig_fun+0xa>
 8004c2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d801      	bhi.n	8004c36 <__hexdig_fun+0x26>
 8004c32:	3827      	subs	r0, #39	; 0x27
 8004c34:	e7f1      	b.n	8004c1a <__hexdig_fun+0xa>
 8004c36:	2000      	movs	r0, #0
 8004c38:	4770      	bx	lr
	...

08004c3c <__gethex>:
 8004c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c40:	ed2d 8b02 	vpush	{d8}
 8004c44:	b089      	sub	sp, #36	; 0x24
 8004c46:	ee08 0a10 	vmov	s16, r0
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	4bb4      	ldr	r3, [pc, #720]	; (8004f20 <__gethex+0x2e4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	4618      	mov	r0, r3
 8004c54:	468b      	mov	fp, r1
 8004c56:	4690      	mov	r8, r2
 8004c58:	f7fb fac2 	bl	80001e0 <strlen>
 8004c5c:	9b01      	ldr	r3, [sp, #4]
 8004c5e:	f8db 2000 	ldr.w	r2, [fp]
 8004c62:	4403      	add	r3, r0
 8004c64:	4682      	mov	sl, r0
 8004c66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	1c93      	adds	r3, r2, #2
 8004c6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004c72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004c76:	32fe      	adds	r2, #254	; 0xfe
 8004c78:	18d1      	adds	r1, r2, r3
 8004c7a:	461f      	mov	r7, r3
 8004c7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004c80:	9100      	str	r1, [sp, #0]
 8004c82:	2830      	cmp	r0, #48	; 0x30
 8004c84:	d0f8      	beq.n	8004c78 <__gethex+0x3c>
 8004c86:	f7ff ffc3 	bl	8004c10 <__hexdig_fun>
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d13a      	bne.n	8004d06 <__gethex+0xca>
 8004c90:	9901      	ldr	r1, [sp, #4]
 8004c92:	4652      	mov	r2, sl
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff f927 	bl	8003ee8 <strncmp>
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d168      	bne.n	8004d72 <__gethex+0x136>
 8004ca0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004ca4:	eb07 060a 	add.w	r6, r7, sl
 8004ca8:	f7ff ffb2 	bl	8004c10 <__hexdig_fun>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d062      	beq.n	8004d76 <__gethex+0x13a>
 8004cb0:	4633      	mov	r3, r6
 8004cb2:	7818      	ldrb	r0, [r3, #0]
 8004cb4:	2830      	cmp	r0, #48	; 0x30
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	f103 0301 	add.w	r3, r3, #1
 8004cbc:	d0f9      	beq.n	8004cb2 <__gethex+0x76>
 8004cbe:	f7ff ffa7 	bl	8004c10 <__hexdig_fun>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	fab0 f480 	clz	r4, r0
 8004cc8:	0964      	lsrs	r4, r4, #5
 8004cca:	4635      	mov	r5, r6
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	463a      	mov	r2, r7
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	3201      	adds	r2, #1
 8004cd4:	7830      	ldrb	r0, [r6, #0]
 8004cd6:	f7ff ff9b 	bl	8004c10 <__hexdig_fun>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1f8      	bne.n	8004cd0 <__gethex+0x94>
 8004cde:	9901      	ldr	r1, [sp, #4]
 8004ce0:	4652      	mov	r2, sl
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7ff f900 	bl	8003ee8 <strncmp>
 8004ce8:	b980      	cbnz	r0, 8004d0c <__gethex+0xd0>
 8004cea:	b94d      	cbnz	r5, 8004d00 <__gethex+0xc4>
 8004cec:	eb06 050a 	add.w	r5, r6, sl
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4616      	mov	r6, r2
 8004cf4:	3201      	adds	r2, #1
 8004cf6:	7830      	ldrb	r0, [r6, #0]
 8004cf8:	f7ff ff8a 	bl	8004c10 <__hexdig_fun>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d1f8      	bne.n	8004cf2 <__gethex+0xb6>
 8004d00:	1bad      	subs	r5, r5, r6
 8004d02:	00ad      	lsls	r5, r5, #2
 8004d04:	e004      	b.n	8004d10 <__gethex+0xd4>
 8004d06:	2400      	movs	r4, #0
 8004d08:	4625      	mov	r5, r4
 8004d0a:	e7e0      	b.n	8004cce <__gethex+0x92>
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	d1f7      	bne.n	8004d00 <__gethex+0xc4>
 8004d10:	7833      	ldrb	r3, [r6, #0]
 8004d12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004d16:	2b50      	cmp	r3, #80	; 0x50
 8004d18:	d13b      	bne.n	8004d92 <__gethex+0x156>
 8004d1a:	7873      	ldrb	r3, [r6, #1]
 8004d1c:	2b2b      	cmp	r3, #43	; 0x2b
 8004d1e:	d02c      	beq.n	8004d7a <__gethex+0x13e>
 8004d20:	2b2d      	cmp	r3, #45	; 0x2d
 8004d22:	d02e      	beq.n	8004d82 <__gethex+0x146>
 8004d24:	1c71      	adds	r1, r6, #1
 8004d26:	f04f 0900 	mov.w	r9, #0
 8004d2a:	7808      	ldrb	r0, [r1, #0]
 8004d2c:	f7ff ff70 	bl	8004c10 <__hexdig_fun>
 8004d30:	1e43      	subs	r3, r0, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b18      	cmp	r3, #24
 8004d36:	d82c      	bhi.n	8004d92 <__gethex+0x156>
 8004d38:	f1a0 0210 	sub.w	r2, r0, #16
 8004d3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004d40:	f7ff ff66 	bl	8004c10 <__hexdig_fun>
 8004d44:	1e43      	subs	r3, r0, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b18      	cmp	r3, #24
 8004d4a:	d91d      	bls.n	8004d88 <__gethex+0x14c>
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	d000      	beq.n	8004d54 <__gethex+0x118>
 8004d52:	4252      	negs	r2, r2
 8004d54:	4415      	add	r5, r2
 8004d56:	f8cb 1000 	str.w	r1, [fp]
 8004d5a:	b1e4      	cbz	r4, 8004d96 <__gethex+0x15a>
 8004d5c:	9b00      	ldr	r3, [sp, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bf14      	ite	ne
 8004d62:	2700      	movne	r7, #0
 8004d64:	2706      	moveq	r7, #6
 8004d66:	4638      	mov	r0, r7
 8004d68:	b009      	add	sp, #36	; 0x24
 8004d6a:	ecbd 8b02 	vpop	{d8}
 8004d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d72:	463e      	mov	r6, r7
 8004d74:	4625      	mov	r5, r4
 8004d76:	2401      	movs	r4, #1
 8004d78:	e7ca      	b.n	8004d10 <__gethex+0xd4>
 8004d7a:	f04f 0900 	mov.w	r9, #0
 8004d7e:	1cb1      	adds	r1, r6, #2
 8004d80:	e7d3      	b.n	8004d2a <__gethex+0xee>
 8004d82:	f04f 0901 	mov.w	r9, #1
 8004d86:	e7fa      	b.n	8004d7e <__gethex+0x142>
 8004d88:	230a      	movs	r3, #10
 8004d8a:	fb03 0202 	mla	r2, r3, r2, r0
 8004d8e:	3a10      	subs	r2, #16
 8004d90:	e7d4      	b.n	8004d3c <__gethex+0x100>
 8004d92:	4631      	mov	r1, r6
 8004d94:	e7df      	b.n	8004d56 <__gethex+0x11a>
 8004d96:	1bf3      	subs	r3, r6, r7
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	2b07      	cmp	r3, #7
 8004d9e:	dc0b      	bgt.n	8004db8 <__gethex+0x17c>
 8004da0:	ee18 0a10 	vmov	r0, s16
 8004da4:	f000 fa64 	bl	8005270 <_Balloc>
 8004da8:	4604      	mov	r4, r0
 8004daa:	b940      	cbnz	r0, 8004dbe <__gethex+0x182>
 8004dac:	4b5d      	ldr	r3, [pc, #372]	; (8004f24 <__gethex+0x2e8>)
 8004dae:	4602      	mov	r2, r0
 8004db0:	21de      	movs	r1, #222	; 0xde
 8004db2:	485d      	ldr	r0, [pc, #372]	; (8004f28 <__gethex+0x2ec>)
 8004db4:	f000 ffee 	bl	8005d94 <__assert_func>
 8004db8:	3101      	adds	r1, #1
 8004dba:	105b      	asrs	r3, r3, #1
 8004dbc:	e7ee      	b.n	8004d9c <__gethex+0x160>
 8004dbe:	f100 0914 	add.w	r9, r0, #20
 8004dc2:	f04f 0b00 	mov.w	fp, #0
 8004dc6:	f1ca 0301 	rsb	r3, sl, #1
 8004dca:	f8cd 9008 	str.w	r9, [sp, #8]
 8004dce:	f8cd b000 	str.w	fp, [sp]
 8004dd2:	9306      	str	r3, [sp, #24]
 8004dd4:	42b7      	cmp	r7, r6
 8004dd6:	d340      	bcc.n	8004e5a <__gethex+0x21e>
 8004dd8:	9802      	ldr	r0, [sp, #8]
 8004dda:	9b00      	ldr	r3, [sp, #0]
 8004ddc:	f840 3b04 	str.w	r3, [r0], #4
 8004de0:	eba0 0009 	sub.w	r0, r0, r9
 8004de4:	1080      	asrs	r0, r0, #2
 8004de6:	0146      	lsls	r6, r0, #5
 8004de8:	6120      	str	r0, [r4, #16]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fb32 	bl	8005454 <__hi0bits>
 8004df0:	1a30      	subs	r0, r6, r0
 8004df2:	f8d8 6000 	ldr.w	r6, [r8]
 8004df6:	42b0      	cmp	r0, r6
 8004df8:	dd63      	ble.n	8004ec2 <__gethex+0x286>
 8004dfa:	1b87      	subs	r7, r0, r6
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 fed6 	bl	8005bb0 <__any_on>
 8004e04:	4682      	mov	sl, r0
 8004e06:	b1a8      	cbz	r0, 8004e34 <__gethex+0x1f8>
 8004e08:	1e7b      	subs	r3, r7, #1
 8004e0a:	1159      	asrs	r1, r3, #5
 8004e0c:	f003 021f 	and.w	r2, r3, #31
 8004e10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004e14:	f04f 0a01 	mov.w	sl, #1
 8004e18:	fa0a f202 	lsl.w	r2, sl, r2
 8004e1c:	420a      	tst	r2, r1
 8004e1e:	d009      	beq.n	8004e34 <__gethex+0x1f8>
 8004e20:	4553      	cmp	r3, sl
 8004e22:	dd05      	ble.n	8004e30 <__gethex+0x1f4>
 8004e24:	1eb9      	subs	r1, r7, #2
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 fec2 	bl	8005bb0 <__any_on>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d145      	bne.n	8004ebc <__gethex+0x280>
 8004e30:	f04f 0a02 	mov.w	sl, #2
 8004e34:	4639      	mov	r1, r7
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fe98 	bl	8004b6c <rshift>
 8004e3c:	443d      	add	r5, r7
 8004e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004e42:	42ab      	cmp	r3, r5
 8004e44:	da4c      	bge.n	8004ee0 <__gethex+0x2a4>
 8004e46:	ee18 0a10 	vmov	r0, s16
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	f000 fa50 	bl	80052f0 <_Bfree>
 8004e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004e52:	2300      	movs	r3, #0
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	27a3      	movs	r7, #163	; 0xa3
 8004e58:	e785      	b.n	8004d66 <__gethex+0x12a>
 8004e5a:	1e73      	subs	r3, r6, #1
 8004e5c:	9a05      	ldr	r2, [sp, #20]
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d019      	beq.n	8004e9c <__gethex+0x260>
 8004e68:	f1bb 0f20 	cmp.w	fp, #32
 8004e6c:	d107      	bne.n	8004e7e <__gethex+0x242>
 8004e6e:	9b02      	ldr	r3, [sp, #8]
 8004e70:	9a00      	ldr	r2, [sp, #0]
 8004e72:	f843 2b04 	str.w	r2, [r3], #4
 8004e76:	9302      	str	r3, [sp, #8]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	469b      	mov	fp, r3
 8004e7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004e82:	f7ff fec5 	bl	8004c10 <__hexdig_fun>
 8004e86:	9b00      	ldr	r3, [sp, #0]
 8004e88:	f000 000f 	and.w	r0, r0, #15
 8004e8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8004e90:	4303      	orrs	r3, r0
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	f10b 0b04 	add.w	fp, fp, #4
 8004e98:	9b03      	ldr	r3, [sp, #12]
 8004e9a:	e00d      	b.n	8004eb8 <__gethex+0x27c>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	9a06      	ldr	r2, [sp, #24]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	42bb      	cmp	r3, r7
 8004ea4:	d3e0      	bcc.n	8004e68 <__gethex+0x22c>
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	9901      	ldr	r1, [sp, #4]
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	4652      	mov	r2, sl
 8004eae:	f7ff f81b 	bl	8003ee8 <strncmp>
 8004eb2:	9b07      	ldr	r3, [sp, #28]
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1d7      	bne.n	8004e68 <__gethex+0x22c>
 8004eb8:	461e      	mov	r6, r3
 8004eba:	e78b      	b.n	8004dd4 <__gethex+0x198>
 8004ebc:	f04f 0a03 	mov.w	sl, #3
 8004ec0:	e7b8      	b.n	8004e34 <__gethex+0x1f8>
 8004ec2:	da0a      	bge.n	8004eda <__gethex+0x29e>
 8004ec4:	1a37      	subs	r7, r6, r0
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	ee18 0a10 	vmov	r0, s16
 8004ecc:	463a      	mov	r2, r7
 8004ece:	f000 fc2b 	bl	8005728 <__lshift>
 8004ed2:	1bed      	subs	r5, r5, r7
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	f100 0914 	add.w	r9, r0, #20
 8004eda:	f04f 0a00 	mov.w	sl, #0
 8004ede:	e7ae      	b.n	8004e3e <__gethex+0x202>
 8004ee0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004ee4:	42a8      	cmp	r0, r5
 8004ee6:	dd72      	ble.n	8004fce <__gethex+0x392>
 8004ee8:	1b45      	subs	r5, r0, r5
 8004eea:	42ae      	cmp	r6, r5
 8004eec:	dc36      	bgt.n	8004f5c <__gethex+0x320>
 8004eee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d02a      	beq.n	8004f4c <__gethex+0x310>
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d02c      	beq.n	8004f54 <__gethex+0x318>
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d11c      	bne.n	8004f38 <__gethex+0x2fc>
 8004efe:	42ae      	cmp	r6, r5
 8004f00:	d11a      	bne.n	8004f38 <__gethex+0x2fc>
 8004f02:	2e01      	cmp	r6, #1
 8004f04:	d112      	bne.n	8004f2c <__gethex+0x2f0>
 8004f06:	9a04      	ldr	r2, [sp, #16]
 8004f08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	2301      	movs	r3, #1
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	f8c9 3000 	str.w	r3, [r9]
 8004f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f18:	2762      	movs	r7, #98	; 0x62
 8004f1a:	601c      	str	r4, [r3, #0]
 8004f1c:	e723      	b.n	8004d66 <__gethex+0x12a>
 8004f1e:	bf00      	nop
 8004f20:	08006d88 	.word	0x08006d88
 8004f24:	08006d10 	.word	0x08006d10
 8004f28:	08006d21 	.word	0x08006d21
 8004f2c:	1e71      	subs	r1, r6, #1
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f000 fe3e 	bl	8005bb0 <__any_on>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d1e6      	bne.n	8004f06 <__gethex+0x2ca>
 8004f38:	ee18 0a10 	vmov	r0, s16
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	f000 f9d7 	bl	80052f0 <_Bfree>
 8004f42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004f44:	2300      	movs	r3, #0
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	2750      	movs	r7, #80	; 0x50
 8004f4a:	e70c      	b.n	8004d66 <__gethex+0x12a>
 8004f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f2      	bne.n	8004f38 <__gethex+0x2fc>
 8004f52:	e7d8      	b.n	8004f06 <__gethex+0x2ca>
 8004f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1d5      	bne.n	8004f06 <__gethex+0x2ca>
 8004f5a:	e7ed      	b.n	8004f38 <__gethex+0x2fc>
 8004f5c:	1e6f      	subs	r7, r5, #1
 8004f5e:	f1ba 0f00 	cmp.w	sl, #0
 8004f62:	d131      	bne.n	8004fc8 <__gethex+0x38c>
 8004f64:	b127      	cbz	r7, 8004f70 <__gethex+0x334>
 8004f66:	4639      	mov	r1, r7
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f000 fe21 	bl	8005bb0 <__any_on>
 8004f6e:	4682      	mov	sl, r0
 8004f70:	117b      	asrs	r3, r7, #5
 8004f72:	2101      	movs	r1, #1
 8004f74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004f78:	f007 071f 	and.w	r7, r7, #31
 8004f7c:	fa01 f707 	lsl.w	r7, r1, r7
 8004f80:	421f      	tst	r7, r3
 8004f82:	4629      	mov	r1, r5
 8004f84:	4620      	mov	r0, r4
 8004f86:	bf18      	it	ne
 8004f88:	f04a 0a02 	orrne.w	sl, sl, #2
 8004f8c:	1b76      	subs	r6, r6, r5
 8004f8e:	f7ff fded 	bl	8004b6c <rshift>
 8004f92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004f96:	2702      	movs	r7, #2
 8004f98:	f1ba 0f00 	cmp.w	sl, #0
 8004f9c:	d048      	beq.n	8005030 <__gethex+0x3f4>
 8004f9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d015      	beq.n	8004fd2 <__gethex+0x396>
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d017      	beq.n	8004fda <__gethex+0x39e>
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d109      	bne.n	8004fc2 <__gethex+0x386>
 8004fae:	f01a 0f02 	tst.w	sl, #2
 8004fb2:	d006      	beq.n	8004fc2 <__gethex+0x386>
 8004fb4:	f8d9 0000 	ldr.w	r0, [r9]
 8004fb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8004fbc:	f01a 0f01 	tst.w	sl, #1
 8004fc0:	d10e      	bne.n	8004fe0 <__gethex+0x3a4>
 8004fc2:	f047 0710 	orr.w	r7, r7, #16
 8004fc6:	e033      	b.n	8005030 <__gethex+0x3f4>
 8004fc8:	f04f 0a01 	mov.w	sl, #1
 8004fcc:	e7d0      	b.n	8004f70 <__gethex+0x334>
 8004fce:	2701      	movs	r7, #1
 8004fd0:	e7e2      	b.n	8004f98 <__gethex+0x35c>
 8004fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fd4:	f1c3 0301 	rsb	r3, r3, #1
 8004fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8004fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <__gethex+0x386>
 8004fe0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004fe4:	f104 0314 	add.w	r3, r4, #20
 8004fe8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004fec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004ff0:	f04f 0c00 	mov.w	ip, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ffa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004ffe:	d01c      	beq.n	800503a <__gethex+0x3fe>
 8005000:	3201      	adds	r2, #1
 8005002:	6002      	str	r2, [r0, #0]
 8005004:	2f02      	cmp	r7, #2
 8005006:	f104 0314 	add.w	r3, r4, #20
 800500a:	d13f      	bne.n	800508c <__gethex+0x450>
 800500c:	f8d8 2000 	ldr.w	r2, [r8]
 8005010:	3a01      	subs	r2, #1
 8005012:	42b2      	cmp	r2, r6
 8005014:	d10a      	bne.n	800502c <__gethex+0x3f0>
 8005016:	1171      	asrs	r1, r6, #5
 8005018:	2201      	movs	r2, #1
 800501a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800501e:	f006 061f 	and.w	r6, r6, #31
 8005022:	fa02 f606 	lsl.w	r6, r2, r6
 8005026:	421e      	tst	r6, r3
 8005028:	bf18      	it	ne
 800502a:	4617      	movne	r7, r2
 800502c:	f047 0720 	orr.w	r7, r7, #32
 8005030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005032:	601c      	str	r4, [r3, #0]
 8005034:	9b04      	ldr	r3, [sp, #16]
 8005036:	601d      	str	r5, [r3, #0]
 8005038:	e695      	b.n	8004d66 <__gethex+0x12a>
 800503a:	4299      	cmp	r1, r3
 800503c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005040:	d8d8      	bhi.n	8004ff4 <__gethex+0x3b8>
 8005042:	68a3      	ldr	r3, [r4, #8]
 8005044:	459b      	cmp	fp, r3
 8005046:	db19      	blt.n	800507c <__gethex+0x440>
 8005048:	6861      	ldr	r1, [r4, #4]
 800504a:	ee18 0a10 	vmov	r0, s16
 800504e:	3101      	adds	r1, #1
 8005050:	f000 f90e 	bl	8005270 <_Balloc>
 8005054:	4681      	mov	r9, r0
 8005056:	b918      	cbnz	r0, 8005060 <__gethex+0x424>
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <__gethex+0x488>)
 800505a:	4602      	mov	r2, r0
 800505c:	2184      	movs	r1, #132	; 0x84
 800505e:	e6a8      	b.n	8004db2 <__gethex+0x176>
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	3202      	adds	r2, #2
 8005064:	f104 010c 	add.w	r1, r4, #12
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	300c      	adds	r0, #12
 800506c:	f7fe ff26 	bl	8003ebc <memcpy>
 8005070:	4621      	mov	r1, r4
 8005072:	ee18 0a10 	vmov	r0, s16
 8005076:	f000 f93b 	bl	80052f0 <_Bfree>
 800507a:	464c      	mov	r4, r9
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005084:	6122      	str	r2, [r4, #16]
 8005086:	2201      	movs	r2, #1
 8005088:	615a      	str	r2, [r3, #20]
 800508a:	e7bb      	b.n	8005004 <__gethex+0x3c8>
 800508c:	6922      	ldr	r2, [r4, #16]
 800508e:	455a      	cmp	r2, fp
 8005090:	dd0b      	ble.n	80050aa <__gethex+0x46e>
 8005092:	2101      	movs	r1, #1
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff fd69 	bl	8004b6c <rshift>
 800509a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800509e:	3501      	adds	r5, #1
 80050a0:	42ab      	cmp	r3, r5
 80050a2:	f6ff aed0 	blt.w	8004e46 <__gethex+0x20a>
 80050a6:	2701      	movs	r7, #1
 80050a8:	e7c0      	b.n	800502c <__gethex+0x3f0>
 80050aa:	f016 061f 	ands.w	r6, r6, #31
 80050ae:	d0fa      	beq.n	80050a6 <__gethex+0x46a>
 80050b0:	4453      	add	r3, sl
 80050b2:	f1c6 0620 	rsb	r6, r6, #32
 80050b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80050ba:	f000 f9cb 	bl	8005454 <__hi0bits>
 80050be:	42b0      	cmp	r0, r6
 80050c0:	dbe7      	blt.n	8005092 <__gethex+0x456>
 80050c2:	e7f0      	b.n	80050a6 <__gethex+0x46a>
 80050c4:	08006d10 	.word	0x08006d10

080050c8 <L_shift>:
 80050c8:	f1c2 0208 	rsb	r2, r2, #8
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	b570      	push	{r4, r5, r6, lr}
 80050d0:	f1c2 0620 	rsb	r6, r2, #32
 80050d4:	6843      	ldr	r3, [r0, #4]
 80050d6:	6804      	ldr	r4, [r0, #0]
 80050d8:	fa03 f506 	lsl.w	r5, r3, r6
 80050dc:	432c      	orrs	r4, r5
 80050de:	40d3      	lsrs	r3, r2
 80050e0:	6004      	str	r4, [r0, #0]
 80050e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80050e6:	4288      	cmp	r0, r1
 80050e8:	d3f4      	bcc.n	80050d4 <L_shift+0xc>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}

080050ec <__match>:
 80050ec:	b530      	push	{r4, r5, lr}
 80050ee:	6803      	ldr	r3, [r0, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f6:	b914      	cbnz	r4, 80050fe <__match+0x12>
 80050f8:	6003      	str	r3, [r0, #0]
 80050fa:	2001      	movs	r0, #1
 80050fc:	bd30      	pop	{r4, r5, pc}
 80050fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005106:	2d19      	cmp	r5, #25
 8005108:	bf98      	it	ls
 800510a:	3220      	addls	r2, #32
 800510c:	42a2      	cmp	r2, r4
 800510e:	d0f0      	beq.n	80050f2 <__match+0x6>
 8005110:	2000      	movs	r0, #0
 8005112:	e7f3      	b.n	80050fc <__match+0x10>

08005114 <__hexnan>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	680b      	ldr	r3, [r1, #0]
 800511a:	115e      	asrs	r6, r3, #5
 800511c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005120:	f013 031f 	ands.w	r3, r3, #31
 8005124:	b087      	sub	sp, #28
 8005126:	bf18      	it	ne
 8005128:	3604      	addne	r6, #4
 800512a:	2500      	movs	r5, #0
 800512c:	1f37      	subs	r7, r6, #4
 800512e:	4690      	mov	r8, r2
 8005130:	6802      	ldr	r2, [r0, #0]
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	4682      	mov	sl, r0
 8005136:	f846 5c04 	str.w	r5, [r6, #-4]
 800513a:	46b9      	mov	r9, r7
 800513c:	463c      	mov	r4, r7
 800513e:	9502      	str	r5, [sp, #8]
 8005140:	46ab      	mov	fp, r5
 8005142:	7851      	ldrb	r1, [r2, #1]
 8005144:	1c53      	adds	r3, r2, #1
 8005146:	9303      	str	r3, [sp, #12]
 8005148:	b341      	cbz	r1, 800519c <__hexnan+0x88>
 800514a:	4608      	mov	r0, r1
 800514c:	9205      	str	r2, [sp, #20]
 800514e:	9104      	str	r1, [sp, #16]
 8005150:	f7ff fd5e 	bl	8004c10 <__hexdig_fun>
 8005154:	2800      	cmp	r0, #0
 8005156:	d14f      	bne.n	80051f8 <__hexnan+0xe4>
 8005158:	9904      	ldr	r1, [sp, #16]
 800515a:	9a05      	ldr	r2, [sp, #20]
 800515c:	2920      	cmp	r1, #32
 800515e:	d818      	bhi.n	8005192 <__hexnan+0x7e>
 8005160:	9b02      	ldr	r3, [sp, #8]
 8005162:	459b      	cmp	fp, r3
 8005164:	dd13      	ble.n	800518e <__hexnan+0x7a>
 8005166:	454c      	cmp	r4, r9
 8005168:	d206      	bcs.n	8005178 <__hexnan+0x64>
 800516a:	2d07      	cmp	r5, #7
 800516c:	dc04      	bgt.n	8005178 <__hexnan+0x64>
 800516e:	462a      	mov	r2, r5
 8005170:	4649      	mov	r1, r9
 8005172:	4620      	mov	r0, r4
 8005174:	f7ff ffa8 	bl	80050c8 <L_shift>
 8005178:	4544      	cmp	r4, r8
 800517a:	d950      	bls.n	800521e <__hexnan+0x10a>
 800517c:	2300      	movs	r3, #0
 800517e:	f1a4 0904 	sub.w	r9, r4, #4
 8005182:	f844 3c04 	str.w	r3, [r4, #-4]
 8005186:	f8cd b008 	str.w	fp, [sp, #8]
 800518a:	464c      	mov	r4, r9
 800518c:	461d      	mov	r5, r3
 800518e:	9a03      	ldr	r2, [sp, #12]
 8005190:	e7d7      	b.n	8005142 <__hexnan+0x2e>
 8005192:	2929      	cmp	r1, #41	; 0x29
 8005194:	d156      	bne.n	8005244 <__hexnan+0x130>
 8005196:	3202      	adds	r2, #2
 8005198:	f8ca 2000 	str.w	r2, [sl]
 800519c:	f1bb 0f00 	cmp.w	fp, #0
 80051a0:	d050      	beq.n	8005244 <__hexnan+0x130>
 80051a2:	454c      	cmp	r4, r9
 80051a4:	d206      	bcs.n	80051b4 <__hexnan+0xa0>
 80051a6:	2d07      	cmp	r5, #7
 80051a8:	dc04      	bgt.n	80051b4 <__hexnan+0xa0>
 80051aa:	462a      	mov	r2, r5
 80051ac:	4649      	mov	r1, r9
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff ff8a 	bl	80050c8 <L_shift>
 80051b4:	4544      	cmp	r4, r8
 80051b6:	d934      	bls.n	8005222 <__hexnan+0x10e>
 80051b8:	f1a8 0204 	sub.w	r2, r8, #4
 80051bc:	4623      	mov	r3, r4
 80051be:	f853 1b04 	ldr.w	r1, [r3], #4
 80051c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80051c6:	429f      	cmp	r7, r3
 80051c8:	d2f9      	bcs.n	80051be <__hexnan+0xaa>
 80051ca:	1b3b      	subs	r3, r7, r4
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	3304      	adds	r3, #4
 80051d2:	3401      	adds	r4, #1
 80051d4:	3e03      	subs	r6, #3
 80051d6:	42b4      	cmp	r4, r6
 80051d8:	bf88      	it	hi
 80051da:	2304      	movhi	r3, #4
 80051dc:	4443      	add	r3, r8
 80051de:	2200      	movs	r2, #0
 80051e0:	f843 2b04 	str.w	r2, [r3], #4
 80051e4:	429f      	cmp	r7, r3
 80051e6:	d2fb      	bcs.n	80051e0 <__hexnan+0xcc>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	b91b      	cbnz	r3, 80051f4 <__hexnan+0xe0>
 80051ec:	4547      	cmp	r7, r8
 80051ee:	d127      	bne.n	8005240 <__hexnan+0x12c>
 80051f0:	2301      	movs	r3, #1
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	2005      	movs	r0, #5
 80051f6:	e026      	b.n	8005246 <__hexnan+0x132>
 80051f8:	3501      	adds	r5, #1
 80051fa:	2d08      	cmp	r5, #8
 80051fc:	f10b 0b01 	add.w	fp, fp, #1
 8005200:	dd06      	ble.n	8005210 <__hexnan+0xfc>
 8005202:	4544      	cmp	r4, r8
 8005204:	d9c3      	bls.n	800518e <__hexnan+0x7a>
 8005206:	2300      	movs	r3, #0
 8005208:	f844 3c04 	str.w	r3, [r4, #-4]
 800520c:	2501      	movs	r5, #1
 800520e:	3c04      	subs	r4, #4
 8005210:	6822      	ldr	r2, [r4, #0]
 8005212:	f000 000f 	and.w	r0, r0, #15
 8005216:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	e7b7      	b.n	800518e <__hexnan+0x7a>
 800521e:	2508      	movs	r5, #8
 8005220:	e7b5      	b.n	800518e <__hexnan+0x7a>
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0df      	beq.n	80051e8 <__hexnan+0xd4>
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	f1c3 0320 	rsb	r3, r3, #32
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
 8005234:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005238:	401a      	ands	r2, r3
 800523a:	f846 2c04 	str.w	r2, [r6, #-4]
 800523e:	e7d3      	b.n	80051e8 <__hexnan+0xd4>
 8005240:	3f04      	subs	r7, #4
 8005242:	e7d1      	b.n	80051e8 <__hexnan+0xd4>
 8005244:	2004      	movs	r0, #4
 8005246:	b007      	add	sp, #28
 8005248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800524c <__ascii_mbtowc>:
 800524c:	b082      	sub	sp, #8
 800524e:	b901      	cbnz	r1, 8005252 <__ascii_mbtowc+0x6>
 8005250:	a901      	add	r1, sp, #4
 8005252:	b142      	cbz	r2, 8005266 <__ascii_mbtowc+0x1a>
 8005254:	b14b      	cbz	r3, 800526a <__ascii_mbtowc+0x1e>
 8005256:	7813      	ldrb	r3, [r2, #0]
 8005258:	600b      	str	r3, [r1, #0]
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	1e10      	subs	r0, r2, #0
 800525e:	bf18      	it	ne
 8005260:	2001      	movne	r0, #1
 8005262:	b002      	add	sp, #8
 8005264:	4770      	bx	lr
 8005266:	4610      	mov	r0, r2
 8005268:	e7fb      	b.n	8005262 <__ascii_mbtowc+0x16>
 800526a:	f06f 0001 	mvn.w	r0, #1
 800526e:	e7f8      	b.n	8005262 <__ascii_mbtowc+0x16>

08005270 <_Balloc>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005274:	4604      	mov	r4, r0
 8005276:	460d      	mov	r5, r1
 8005278:	b976      	cbnz	r6, 8005298 <_Balloc+0x28>
 800527a:	2010      	movs	r0, #16
 800527c:	f000 fdba 	bl	8005df4 <malloc>
 8005280:	4602      	mov	r2, r0
 8005282:	6260      	str	r0, [r4, #36]	; 0x24
 8005284:	b920      	cbnz	r0, 8005290 <_Balloc+0x20>
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <_Balloc+0x78>)
 8005288:	4818      	ldr	r0, [pc, #96]	; (80052ec <_Balloc+0x7c>)
 800528a:	2166      	movs	r1, #102	; 0x66
 800528c:	f000 fd82 	bl	8005d94 <__assert_func>
 8005290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005294:	6006      	str	r6, [r0, #0]
 8005296:	60c6      	str	r6, [r0, #12]
 8005298:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800529a:	68f3      	ldr	r3, [r6, #12]
 800529c:	b183      	cbz	r3, 80052c0 <_Balloc+0x50>
 800529e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052a6:	b9b8      	cbnz	r0, 80052d8 <_Balloc+0x68>
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f605 	lsl.w	r6, r1, r5
 80052ae:	1d72      	adds	r2, r6, #5
 80052b0:	0092      	lsls	r2, r2, #2
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 fc9d 	bl	8005bf2 <_calloc_r>
 80052b8:	b160      	cbz	r0, 80052d4 <_Balloc+0x64>
 80052ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052be:	e00e      	b.n	80052de <_Balloc+0x6e>
 80052c0:	2221      	movs	r2, #33	; 0x21
 80052c2:	2104      	movs	r1, #4
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 fc94 	bl	8005bf2 <_calloc_r>
 80052ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052cc:	60f0      	str	r0, [r6, #12]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e4      	bne.n	800529e <_Balloc+0x2e>
 80052d4:	2000      	movs	r0, #0
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052de:	2300      	movs	r3, #0
 80052e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052e4:	e7f7      	b.n	80052d6 <_Balloc+0x66>
 80052e6:	bf00      	nop
 80052e8:	08006d9c 	.word	0x08006d9c
 80052ec:	08006db3 	.word	0x08006db3

080052f0 <_Bfree>:
 80052f0:	b570      	push	{r4, r5, r6, lr}
 80052f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80052f4:	4605      	mov	r5, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	b976      	cbnz	r6, 8005318 <_Bfree+0x28>
 80052fa:	2010      	movs	r0, #16
 80052fc:	f000 fd7a 	bl	8005df4 <malloc>
 8005300:	4602      	mov	r2, r0
 8005302:	6268      	str	r0, [r5, #36]	; 0x24
 8005304:	b920      	cbnz	r0, 8005310 <_Bfree+0x20>
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <_Bfree+0x3c>)
 8005308:	4809      	ldr	r0, [pc, #36]	; (8005330 <_Bfree+0x40>)
 800530a:	218a      	movs	r1, #138	; 0x8a
 800530c:	f000 fd42 	bl	8005d94 <__assert_func>
 8005310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005314:	6006      	str	r6, [r0, #0]
 8005316:	60c6      	str	r6, [r0, #12]
 8005318:	b13c      	cbz	r4, 800532a <_Bfree+0x3a>
 800531a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800531c:	6862      	ldr	r2, [r4, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005324:	6021      	str	r1, [r4, #0]
 8005326:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	08006d9c 	.word	0x08006d9c
 8005330:	08006db3 	.word	0x08006db3

08005334 <__multadd>:
 8005334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005338:	690d      	ldr	r5, [r1, #16]
 800533a:	4607      	mov	r7, r0
 800533c:	460c      	mov	r4, r1
 800533e:	461e      	mov	r6, r3
 8005340:	f101 0c14 	add.w	ip, r1, #20
 8005344:	2000      	movs	r0, #0
 8005346:	f8dc 3000 	ldr.w	r3, [ip]
 800534a:	b299      	uxth	r1, r3
 800534c:	fb02 6101 	mla	r1, r2, r1, r6
 8005350:	0c1e      	lsrs	r6, r3, #16
 8005352:	0c0b      	lsrs	r3, r1, #16
 8005354:	fb02 3306 	mla	r3, r2, r6, r3
 8005358:	b289      	uxth	r1, r1
 800535a:	3001      	adds	r0, #1
 800535c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005360:	4285      	cmp	r5, r0
 8005362:	f84c 1b04 	str.w	r1, [ip], #4
 8005366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800536a:	dcec      	bgt.n	8005346 <__multadd+0x12>
 800536c:	b30e      	cbz	r6, 80053b2 <__multadd+0x7e>
 800536e:	68a3      	ldr	r3, [r4, #8]
 8005370:	42ab      	cmp	r3, r5
 8005372:	dc19      	bgt.n	80053a8 <__multadd+0x74>
 8005374:	6861      	ldr	r1, [r4, #4]
 8005376:	4638      	mov	r0, r7
 8005378:	3101      	adds	r1, #1
 800537a:	f7ff ff79 	bl	8005270 <_Balloc>
 800537e:	4680      	mov	r8, r0
 8005380:	b928      	cbnz	r0, 800538e <__multadd+0x5a>
 8005382:	4602      	mov	r2, r0
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <__multadd+0x84>)
 8005386:	480d      	ldr	r0, [pc, #52]	; (80053bc <__multadd+0x88>)
 8005388:	21b5      	movs	r1, #181	; 0xb5
 800538a:	f000 fd03 	bl	8005d94 <__assert_func>
 800538e:	6922      	ldr	r2, [r4, #16]
 8005390:	3202      	adds	r2, #2
 8005392:	f104 010c 	add.w	r1, r4, #12
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	300c      	adds	r0, #12
 800539a:	f7fe fd8f 	bl	8003ebc <memcpy>
 800539e:	4621      	mov	r1, r4
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ffa5 	bl	80052f0 <_Bfree>
 80053a6:	4644      	mov	r4, r8
 80053a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053ac:	3501      	adds	r5, #1
 80053ae:	615e      	str	r6, [r3, #20]
 80053b0:	6125      	str	r5, [r4, #16]
 80053b2:	4620      	mov	r0, r4
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	08006d10 	.word	0x08006d10
 80053bc:	08006db3 	.word	0x08006db3

080053c0 <__s2b>:
 80053c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c4:	460c      	mov	r4, r1
 80053c6:	4615      	mov	r5, r2
 80053c8:	461f      	mov	r7, r3
 80053ca:	2209      	movs	r2, #9
 80053cc:	3308      	adds	r3, #8
 80053ce:	4606      	mov	r6, r0
 80053d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d4:	2100      	movs	r1, #0
 80053d6:	2201      	movs	r2, #1
 80053d8:	429a      	cmp	r2, r3
 80053da:	db09      	blt.n	80053f0 <__s2b+0x30>
 80053dc:	4630      	mov	r0, r6
 80053de:	f7ff ff47 	bl	8005270 <_Balloc>
 80053e2:	b940      	cbnz	r0, 80053f6 <__s2b+0x36>
 80053e4:	4602      	mov	r2, r0
 80053e6:	4b19      	ldr	r3, [pc, #100]	; (800544c <__s2b+0x8c>)
 80053e8:	4819      	ldr	r0, [pc, #100]	; (8005450 <__s2b+0x90>)
 80053ea:	21ce      	movs	r1, #206	; 0xce
 80053ec:	f000 fcd2 	bl	8005d94 <__assert_func>
 80053f0:	0052      	lsls	r2, r2, #1
 80053f2:	3101      	adds	r1, #1
 80053f4:	e7f0      	b.n	80053d8 <__s2b+0x18>
 80053f6:	9b08      	ldr	r3, [sp, #32]
 80053f8:	6143      	str	r3, [r0, #20]
 80053fa:	2d09      	cmp	r5, #9
 80053fc:	f04f 0301 	mov.w	r3, #1
 8005400:	6103      	str	r3, [r0, #16]
 8005402:	dd16      	ble.n	8005432 <__s2b+0x72>
 8005404:	f104 0909 	add.w	r9, r4, #9
 8005408:	46c8      	mov	r8, r9
 800540a:	442c      	add	r4, r5
 800540c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005410:	4601      	mov	r1, r0
 8005412:	3b30      	subs	r3, #48	; 0x30
 8005414:	220a      	movs	r2, #10
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff ff8c 	bl	8005334 <__multadd>
 800541c:	45a0      	cmp	r8, r4
 800541e:	d1f5      	bne.n	800540c <__s2b+0x4c>
 8005420:	f1a5 0408 	sub.w	r4, r5, #8
 8005424:	444c      	add	r4, r9
 8005426:	1b2d      	subs	r5, r5, r4
 8005428:	1963      	adds	r3, r4, r5
 800542a:	42bb      	cmp	r3, r7
 800542c:	db04      	blt.n	8005438 <__s2b+0x78>
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	340a      	adds	r4, #10
 8005434:	2509      	movs	r5, #9
 8005436:	e7f6      	b.n	8005426 <__s2b+0x66>
 8005438:	f814 3b01 	ldrb.w	r3, [r4], #1
 800543c:	4601      	mov	r1, r0
 800543e:	3b30      	subs	r3, #48	; 0x30
 8005440:	220a      	movs	r2, #10
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ff76 	bl	8005334 <__multadd>
 8005448:	e7ee      	b.n	8005428 <__s2b+0x68>
 800544a:	bf00      	nop
 800544c:	08006d10 	.word	0x08006d10
 8005450:	08006db3 	.word	0x08006db3

08005454 <__hi0bits>:
 8005454:	0c03      	lsrs	r3, r0, #16
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	b9d3      	cbnz	r3, 8005490 <__hi0bits+0x3c>
 800545a:	0400      	lsls	r0, r0, #16
 800545c:	2310      	movs	r3, #16
 800545e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005462:	bf04      	itt	eq
 8005464:	0200      	lsleq	r0, r0, #8
 8005466:	3308      	addeq	r3, #8
 8005468:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800546c:	bf04      	itt	eq
 800546e:	0100      	lsleq	r0, r0, #4
 8005470:	3304      	addeq	r3, #4
 8005472:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005476:	bf04      	itt	eq
 8005478:	0080      	lsleq	r0, r0, #2
 800547a:	3302      	addeq	r3, #2
 800547c:	2800      	cmp	r0, #0
 800547e:	db05      	blt.n	800548c <__hi0bits+0x38>
 8005480:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005484:	f103 0301 	add.w	r3, r3, #1
 8005488:	bf08      	it	eq
 800548a:	2320      	moveq	r3, #32
 800548c:	4618      	mov	r0, r3
 800548e:	4770      	bx	lr
 8005490:	2300      	movs	r3, #0
 8005492:	e7e4      	b.n	800545e <__hi0bits+0xa>

08005494 <__lo0bits>:
 8005494:	6803      	ldr	r3, [r0, #0]
 8005496:	f013 0207 	ands.w	r2, r3, #7
 800549a:	4601      	mov	r1, r0
 800549c:	d00b      	beq.n	80054b6 <__lo0bits+0x22>
 800549e:	07da      	lsls	r2, r3, #31
 80054a0:	d423      	bmi.n	80054ea <__lo0bits+0x56>
 80054a2:	0798      	lsls	r0, r3, #30
 80054a4:	bf49      	itett	mi
 80054a6:	085b      	lsrmi	r3, r3, #1
 80054a8:	089b      	lsrpl	r3, r3, #2
 80054aa:	2001      	movmi	r0, #1
 80054ac:	600b      	strmi	r3, [r1, #0]
 80054ae:	bf5c      	itt	pl
 80054b0:	600b      	strpl	r3, [r1, #0]
 80054b2:	2002      	movpl	r0, #2
 80054b4:	4770      	bx	lr
 80054b6:	b298      	uxth	r0, r3
 80054b8:	b9a8      	cbnz	r0, 80054e6 <__lo0bits+0x52>
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	2010      	movs	r0, #16
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	b90a      	cbnz	r2, 80054c6 <__lo0bits+0x32>
 80054c2:	3008      	adds	r0, #8
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	071a      	lsls	r2, r3, #28
 80054c8:	bf04      	itt	eq
 80054ca:	091b      	lsreq	r3, r3, #4
 80054cc:	3004      	addeq	r0, #4
 80054ce:	079a      	lsls	r2, r3, #30
 80054d0:	bf04      	itt	eq
 80054d2:	089b      	lsreq	r3, r3, #2
 80054d4:	3002      	addeq	r0, #2
 80054d6:	07da      	lsls	r2, r3, #31
 80054d8:	d403      	bmi.n	80054e2 <__lo0bits+0x4e>
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	f100 0001 	add.w	r0, r0, #1
 80054e0:	d005      	beq.n	80054ee <__lo0bits+0x5a>
 80054e2:	600b      	str	r3, [r1, #0]
 80054e4:	4770      	bx	lr
 80054e6:	4610      	mov	r0, r2
 80054e8:	e7e9      	b.n	80054be <__lo0bits+0x2a>
 80054ea:	2000      	movs	r0, #0
 80054ec:	4770      	bx	lr
 80054ee:	2020      	movs	r0, #32
 80054f0:	4770      	bx	lr
	...

080054f4 <__i2b>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	460c      	mov	r4, r1
 80054f8:	2101      	movs	r1, #1
 80054fa:	f7ff feb9 	bl	8005270 <_Balloc>
 80054fe:	4602      	mov	r2, r0
 8005500:	b928      	cbnz	r0, 800550e <__i2b+0x1a>
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <__i2b+0x24>)
 8005504:	4805      	ldr	r0, [pc, #20]	; (800551c <__i2b+0x28>)
 8005506:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800550a:	f000 fc43 	bl	8005d94 <__assert_func>
 800550e:	2301      	movs	r3, #1
 8005510:	6144      	str	r4, [r0, #20]
 8005512:	6103      	str	r3, [r0, #16]
 8005514:	bd10      	pop	{r4, pc}
 8005516:	bf00      	nop
 8005518:	08006d10 	.word	0x08006d10
 800551c:	08006db3 	.word	0x08006db3

08005520 <__multiply>:
 8005520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	4691      	mov	r9, r2
 8005526:	690a      	ldr	r2, [r1, #16]
 8005528:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	bfb8      	it	lt
 8005530:	460b      	movlt	r3, r1
 8005532:	460c      	mov	r4, r1
 8005534:	bfbc      	itt	lt
 8005536:	464c      	movlt	r4, r9
 8005538:	4699      	movlt	r9, r3
 800553a:	6927      	ldr	r7, [r4, #16]
 800553c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005540:	68a3      	ldr	r3, [r4, #8]
 8005542:	6861      	ldr	r1, [r4, #4]
 8005544:	eb07 060a 	add.w	r6, r7, sl
 8005548:	42b3      	cmp	r3, r6
 800554a:	b085      	sub	sp, #20
 800554c:	bfb8      	it	lt
 800554e:	3101      	addlt	r1, #1
 8005550:	f7ff fe8e 	bl	8005270 <_Balloc>
 8005554:	b930      	cbnz	r0, 8005564 <__multiply+0x44>
 8005556:	4602      	mov	r2, r0
 8005558:	4b44      	ldr	r3, [pc, #272]	; (800566c <__multiply+0x14c>)
 800555a:	4845      	ldr	r0, [pc, #276]	; (8005670 <__multiply+0x150>)
 800555c:	f240 115d 	movw	r1, #349	; 0x15d
 8005560:	f000 fc18 	bl	8005d94 <__assert_func>
 8005564:	f100 0514 	add.w	r5, r0, #20
 8005568:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800556c:	462b      	mov	r3, r5
 800556e:	2200      	movs	r2, #0
 8005570:	4543      	cmp	r3, r8
 8005572:	d321      	bcc.n	80055b8 <__multiply+0x98>
 8005574:	f104 0314 	add.w	r3, r4, #20
 8005578:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800557c:	f109 0314 	add.w	r3, r9, #20
 8005580:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005584:	9202      	str	r2, [sp, #8]
 8005586:	1b3a      	subs	r2, r7, r4
 8005588:	3a15      	subs	r2, #21
 800558a:	f022 0203 	bic.w	r2, r2, #3
 800558e:	3204      	adds	r2, #4
 8005590:	f104 0115 	add.w	r1, r4, #21
 8005594:	428f      	cmp	r7, r1
 8005596:	bf38      	it	cc
 8005598:	2204      	movcc	r2, #4
 800559a:	9201      	str	r2, [sp, #4]
 800559c:	9a02      	ldr	r2, [sp, #8]
 800559e:	9303      	str	r3, [sp, #12]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d80c      	bhi.n	80055be <__multiply+0x9e>
 80055a4:	2e00      	cmp	r6, #0
 80055a6:	dd03      	ble.n	80055b0 <__multiply+0x90>
 80055a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d05a      	beq.n	8005666 <__multiply+0x146>
 80055b0:	6106      	str	r6, [r0, #16]
 80055b2:	b005      	add	sp, #20
 80055b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b8:	f843 2b04 	str.w	r2, [r3], #4
 80055bc:	e7d8      	b.n	8005570 <__multiply+0x50>
 80055be:	f8b3 a000 	ldrh.w	sl, [r3]
 80055c2:	f1ba 0f00 	cmp.w	sl, #0
 80055c6:	d024      	beq.n	8005612 <__multiply+0xf2>
 80055c8:	f104 0e14 	add.w	lr, r4, #20
 80055cc:	46a9      	mov	r9, r5
 80055ce:	f04f 0c00 	mov.w	ip, #0
 80055d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80055d6:	f8d9 1000 	ldr.w	r1, [r9]
 80055da:	fa1f fb82 	uxth.w	fp, r2
 80055de:	b289      	uxth	r1, r1
 80055e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80055e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80055e8:	f8d9 2000 	ldr.w	r2, [r9]
 80055ec:	4461      	add	r1, ip
 80055ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80055f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055fa:	b289      	uxth	r1, r1
 80055fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005600:	4577      	cmp	r7, lr
 8005602:	f849 1b04 	str.w	r1, [r9], #4
 8005606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800560a:	d8e2      	bhi.n	80055d2 <__multiply+0xb2>
 800560c:	9a01      	ldr	r2, [sp, #4]
 800560e:	f845 c002 	str.w	ip, [r5, r2]
 8005612:	9a03      	ldr	r2, [sp, #12]
 8005614:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005618:	3304      	adds	r3, #4
 800561a:	f1b9 0f00 	cmp.w	r9, #0
 800561e:	d020      	beq.n	8005662 <__multiply+0x142>
 8005620:	6829      	ldr	r1, [r5, #0]
 8005622:	f104 0c14 	add.w	ip, r4, #20
 8005626:	46ae      	mov	lr, r5
 8005628:	f04f 0a00 	mov.w	sl, #0
 800562c:	f8bc b000 	ldrh.w	fp, [ip]
 8005630:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005634:	fb09 220b 	mla	r2, r9, fp, r2
 8005638:	4492      	add	sl, r2
 800563a:	b289      	uxth	r1, r1
 800563c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005640:	f84e 1b04 	str.w	r1, [lr], #4
 8005644:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005648:	f8be 1000 	ldrh.w	r1, [lr]
 800564c:	0c12      	lsrs	r2, r2, #16
 800564e:	fb09 1102 	mla	r1, r9, r2, r1
 8005652:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005656:	4567      	cmp	r7, ip
 8005658:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800565c:	d8e6      	bhi.n	800562c <__multiply+0x10c>
 800565e:	9a01      	ldr	r2, [sp, #4]
 8005660:	50a9      	str	r1, [r5, r2]
 8005662:	3504      	adds	r5, #4
 8005664:	e79a      	b.n	800559c <__multiply+0x7c>
 8005666:	3e01      	subs	r6, #1
 8005668:	e79c      	b.n	80055a4 <__multiply+0x84>
 800566a:	bf00      	nop
 800566c:	08006d10 	.word	0x08006d10
 8005670:	08006db3 	.word	0x08006db3

08005674 <__pow5mult>:
 8005674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005678:	4615      	mov	r5, r2
 800567a:	f012 0203 	ands.w	r2, r2, #3
 800567e:	4606      	mov	r6, r0
 8005680:	460f      	mov	r7, r1
 8005682:	d007      	beq.n	8005694 <__pow5mult+0x20>
 8005684:	4c25      	ldr	r4, [pc, #148]	; (800571c <__pow5mult+0xa8>)
 8005686:	3a01      	subs	r2, #1
 8005688:	2300      	movs	r3, #0
 800568a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800568e:	f7ff fe51 	bl	8005334 <__multadd>
 8005692:	4607      	mov	r7, r0
 8005694:	10ad      	asrs	r5, r5, #2
 8005696:	d03d      	beq.n	8005714 <__pow5mult+0xa0>
 8005698:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800569a:	b97c      	cbnz	r4, 80056bc <__pow5mult+0x48>
 800569c:	2010      	movs	r0, #16
 800569e:	f000 fba9 	bl	8005df4 <malloc>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6270      	str	r0, [r6, #36]	; 0x24
 80056a6:	b928      	cbnz	r0, 80056b4 <__pow5mult+0x40>
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <__pow5mult+0xac>)
 80056aa:	481e      	ldr	r0, [pc, #120]	; (8005724 <__pow5mult+0xb0>)
 80056ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80056b0:	f000 fb70 	bl	8005d94 <__assert_func>
 80056b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056b8:	6004      	str	r4, [r0, #0]
 80056ba:	60c4      	str	r4, [r0, #12]
 80056bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80056c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056c4:	b94c      	cbnz	r4, 80056da <__pow5mult+0x66>
 80056c6:	f240 2171 	movw	r1, #625	; 0x271
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff ff12 	bl	80054f4 <__i2b>
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80056d6:	4604      	mov	r4, r0
 80056d8:	6003      	str	r3, [r0, #0]
 80056da:	f04f 0900 	mov.w	r9, #0
 80056de:	07eb      	lsls	r3, r5, #31
 80056e0:	d50a      	bpl.n	80056f8 <__pow5mult+0x84>
 80056e2:	4639      	mov	r1, r7
 80056e4:	4622      	mov	r2, r4
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7ff ff1a 	bl	8005520 <__multiply>
 80056ec:	4639      	mov	r1, r7
 80056ee:	4680      	mov	r8, r0
 80056f0:	4630      	mov	r0, r6
 80056f2:	f7ff fdfd 	bl	80052f0 <_Bfree>
 80056f6:	4647      	mov	r7, r8
 80056f8:	106d      	asrs	r5, r5, #1
 80056fa:	d00b      	beq.n	8005714 <__pow5mult+0xa0>
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	b938      	cbnz	r0, 8005710 <__pow5mult+0x9c>
 8005700:	4622      	mov	r2, r4
 8005702:	4621      	mov	r1, r4
 8005704:	4630      	mov	r0, r6
 8005706:	f7ff ff0b 	bl	8005520 <__multiply>
 800570a:	6020      	str	r0, [r4, #0]
 800570c:	f8c0 9000 	str.w	r9, [r0]
 8005710:	4604      	mov	r4, r0
 8005712:	e7e4      	b.n	80056de <__pow5mult+0x6a>
 8005714:	4638      	mov	r0, r7
 8005716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571a:	bf00      	nop
 800571c:	08006f00 	.word	0x08006f00
 8005720:	08006d9c 	.word	0x08006d9c
 8005724:	08006db3 	.word	0x08006db3

08005728 <__lshift>:
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	460c      	mov	r4, r1
 800572e:	6849      	ldr	r1, [r1, #4]
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	4607      	mov	r7, r0
 800573a:	4691      	mov	r9, r2
 800573c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005740:	f108 0601 	add.w	r6, r8, #1
 8005744:	42b3      	cmp	r3, r6
 8005746:	db0b      	blt.n	8005760 <__lshift+0x38>
 8005748:	4638      	mov	r0, r7
 800574a:	f7ff fd91 	bl	8005270 <_Balloc>
 800574e:	4605      	mov	r5, r0
 8005750:	b948      	cbnz	r0, 8005766 <__lshift+0x3e>
 8005752:	4602      	mov	r2, r0
 8005754:	4b2a      	ldr	r3, [pc, #168]	; (8005800 <__lshift+0xd8>)
 8005756:	482b      	ldr	r0, [pc, #172]	; (8005804 <__lshift+0xdc>)
 8005758:	f240 11d9 	movw	r1, #473	; 0x1d9
 800575c:	f000 fb1a 	bl	8005d94 <__assert_func>
 8005760:	3101      	adds	r1, #1
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	e7ee      	b.n	8005744 <__lshift+0x1c>
 8005766:	2300      	movs	r3, #0
 8005768:	f100 0114 	add.w	r1, r0, #20
 800576c:	f100 0210 	add.w	r2, r0, #16
 8005770:	4618      	mov	r0, r3
 8005772:	4553      	cmp	r3, sl
 8005774:	db37      	blt.n	80057e6 <__lshift+0xbe>
 8005776:	6920      	ldr	r0, [r4, #16]
 8005778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800577c:	f104 0314 	add.w	r3, r4, #20
 8005780:	f019 091f 	ands.w	r9, r9, #31
 8005784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005788:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800578c:	d02f      	beq.n	80057ee <__lshift+0xc6>
 800578e:	f1c9 0e20 	rsb	lr, r9, #32
 8005792:	468a      	mov	sl, r1
 8005794:	f04f 0c00 	mov.w	ip, #0
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	fa02 f209 	lsl.w	r2, r2, r9
 800579e:	ea42 020c 	orr.w	r2, r2, ip
 80057a2:	f84a 2b04 	str.w	r2, [sl], #4
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	4298      	cmp	r0, r3
 80057ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80057b0:	d8f2      	bhi.n	8005798 <__lshift+0x70>
 80057b2:	1b03      	subs	r3, r0, r4
 80057b4:	3b15      	subs	r3, #21
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	3304      	adds	r3, #4
 80057bc:	f104 0215 	add.w	r2, r4, #21
 80057c0:	4290      	cmp	r0, r2
 80057c2:	bf38      	it	cc
 80057c4:	2304      	movcc	r3, #4
 80057c6:	f841 c003 	str.w	ip, [r1, r3]
 80057ca:	f1bc 0f00 	cmp.w	ip, #0
 80057ce:	d001      	beq.n	80057d4 <__lshift+0xac>
 80057d0:	f108 0602 	add.w	r6, r8, #2
 80057d4:	3e01      	subs	r6, #1
 80057d6:	4638      	mov	r0, r7
 80057d8:	612e      	str	r6, [r5, #16]
 80057da:	4621      	mov	r1, r4
 80057dc:	f7ff fd88 	bl	80052f0 <_Bfree>
 80057e0:	4628      	mov	r0, r5
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80057ea:	3301      	adds	r3, #1
 80057ec:	e7c1      	b.n	8005772 <__lshift+0x4a>
 80057ee:	3904      	subs	r1, #4
 80057f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80057f8:	4298      	cmp	r0, r3
 80057fa:	d8f9      	bhi.n	80057f0 <__lshift+0xc8>
 80057fc:	e7ea      	b.n	80057d4 <__lshift+0xac>
 80057fe:	bf00      	nop
 8005800:	08006d10 	.word	0x08006d10
 8005804:	08006db3 	.word	0x08006db3

08005808 <__mcmp>:
 8005808:	b530      	push	{r4, r5, lr}
 800580a:	6902      	ldr	r2, [r0, #16]
 800580c:	690c      	ldr	r4, [r1, #16]
 800580e:	1b12      	subs	r2, r2, r4
 8005810:	d10e      	bne.n	8005830 <__mcmp+0x28>
 8005812:	f100 0314 	add.w	r3, r0, #20
 8005816:	3114      	adds	r1, #20
 8005818:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800581c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005820:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005824:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005828:	42a5      	cmp	r5, r4
 800582a:	d003      	beq.n	8005834 <__mcmp+0x2c>
 800582c:	d305      	bcc.n	800583a <__mcmp+0x32>
 800582e:	2201      	movs	r2, #1
 8005830:	4610      	mov	r0, r2
 8005832:	bd30      	pop	{r4, r5, pc}
 8005834:	4283      	cmp	r3, r0
 8005836:	d3f3      	bcc.n	8005820 <__mcmp+0x18>
 8005838:	e7fa      	b.n	8005830 <__mcmp+0x28>
 800583a:	f04f 32ff 	mov.w	r2, #4294967295
 800583e:	e7f7      	b.n	8005830 <__mcmp+0x28>

08005840 <__mdiff>:
 8005840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	4606      	mov	r6, r0
 8005848:	4611      	mov	r1, r2
 800584a:	4620      	mov	r0, r4
 800584c:	4690      	mov	r8, r2
 800584e:	f7ff ffdb 	bl	8005808 <__mcmp>
 8005852:	1e05      	subs	r5, r0, #0
 8005854:	d110      	bne.n	8005878 <__mdiff+0x38>
 8005856:	4629      	mov	r1, r5
 8005858:	4630      	mov	r0, r6
 800585a:	f7ff fd09 	bl	8005270 <_Balloc>
 800585e:	b930      	cbnz	r0, 800586e <__mdiff+0x2e>
 8005860:	4b3a      	ldr	r3, [pc, #232]	; (800594c <__mdiff+0x10c>)
 8005862:	4602      	mov	r2, r0
 8005864:	f240 2132 	movw	r1, #562	; 0x232
 8005868:	4839      	ldr	r0, [pc, #228]	; (8005950 <__mdiff+0x110>)
 800586a:	f000 fa93 	bl	8005d94 <__assert_func>
 800586e:	2301      	movs	r3, #1
 8005870:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	bfa4      	itt	ge
 800587a:	4643      	movge	r3, r8
 800587c:	46a0      	movge	r8, r4
 800587e:	4630      	mov	r0, r6
 8005880:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005884:	bfa6      	itte	ge
 8005886:	461c      	movge	r4, r3
 8005888:	2500      	movge	r5, #0
 800588a:	2501      	movlt	r5, #1
 800588c:	f7ff fcf0 	bl	8005270 <_Balloc>
 8005890:	b920      	cbnz	r0, 800589c <__mdiff+0x5c>
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <__mdiff+0x10c>)
 8005894:	4602      	mov	r2, r0
 8005896:	f44f 7110 	mov.w	r1, #576	; 0x240
 800589a:	e7e5      	b.n	8005868 <__mdiff+0x28>
 800589c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80058a0:	6926      	ldr	r6, [r4, #16]
 80058a2:	60c5      	str	r5, [r0, #12]
 80058a4:	f104 0914 	add.w	r9, r4, #20
 80058a8:	f108 0514 	add.w	r5, r8, #20
 80058ac:	f100 0e14 	add.w	lr, r0, #20
 80058b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80058b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80058b8:	f108 0210 	add.w	r2, r8, #16
 80058bc:	46f2      	mov	sl, lr
 80058be:	2100      	movs	r1, #0
 80058c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80058c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80058c8:	fa1f f883 	uxth.w	r8, r3
 80058cc:	fa11 f18b 	uxtah	r1, r1, fp
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	eba1 0808 	sub.w	r8, r1, r8
 80058d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80058da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80058de:	fa1f f888 	uxth.w	r8, r8
 80058e2:	1419      	asrs	r1, r3, #16
 80058e4:	454e      	cmp	r6, r9
 80058e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80058ea:	f84a 3b04 	str.w	r3, [sl], #4
 80058ee:	d8e7      	bhi.n	80058c0 <__mdiff+0x80>
 80058f0:	1b33      	subs	r3, r6, r4
 80058f2:	3b15      	subs	r3, #21
 80058f4:	f023 0303 	bic.w	r3, r3, #3
 80058f8:	3304      	adds	r3, #4
 80058fa:	3415      	adds	r4, #21
 80058fc:	42a6      	cmp	r6, r4
 80058fe:	bf38      	it	cc
 8005900:	2304      	movcc	r3, #4
 8005902:	441d      	add	r5, r3
 8005904:	4473      	add	r3, lr
 8005906:	469e      	mov	lr, r3
 8005908:	462e      	mov	r6, r5
 800590a:	4566      	cmp	r6, ip
 800590c:	d30e      	bcc.n	800592c <__mdiff+0xec>
 800590e:	f10c 0203 	add.w	r2, ip, #3
 8005912:	1b52      	subs	r2, r2, r5
 8005914:	f022 0203 	bic.w	r2, r2, #3
 8005918:	3d03      	subs	r5, #3
 800591a:	45ac      	cmp	ip, r5
 800591c:	bf38      	it	cc
 800591e:	2200      	movcc	r2, #0
 8005920:	441a      	add	r2, r3
 8005922:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005926:	b17b      	cbz	r3, 8005948 <__mdiff+0x108>
 8005928:	6107      	str	r7, [r0, #16]
 800592a:	e7a3      	b.n	8005874 <__mdiff+0x34>
 800592c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005930:	fa11 f288 	uxtah	r2, r1, r8
 8005934:	1414      	asrs	r4, r2, #16
 8005936:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800593a:	b292      	uxth	r2, r2
 800593c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005940:	f84e 2b04 	str.w	r2, [lr], #4
 8005944:	1421      	asrs	r1, r4, #16
 8005946:	e7e0      	b.n	800590a <__mdiff+0xca>
 8005948:	3f01      	subs	r7, #1
 800594a:	e7ea      	b.n	8005922 <__mdiff+0xe2>
 800594c:	08006d10 	.word	0x08006d10
 8005950:	08006db3 	.word	0x08006db3

08005954 <__ulp>:
 8005954:	b082      	sub	sp, #8
 8005956:	ed8d 0b00 	vstr	d0, [sp]
 800595a:	9b01      	ldr	r3, [sp, #4]
 800595c:	4912      	ldr	r1, [pc, #72]	; (80059a8 <__ulp+0x54>)
 800595e:	4019      	ands	r1, r3
 8005960:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005964:	2900      	cmp	r1, #0
 8005966:	dd05      	ble.n	8005974 <__ulp+0x20>
 8005968:	2200      	movs	r2, #0
 800596a:	460b      	mov	r3, r1
 800596c:	ec43 2b10 	vmov	d0, r2, r3
 8005970:	b002      	add	sp, #8
 8005972:	4770      	bx	lr
 8005974:	4249      	negs	r1, r1
 8005976:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800597a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	da04      	bge.n	8005992 <__ulp+0x3e>
 8005988:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800598c:	fa41 f300 	asr.w	r3, r1, r0
 8005990:	e7ec      	b.n	800596c <__ulp+0x18>
 8005992:	f1a0 0114 	sub.w	r1, r0, #20
 8005996:	291e      	cmp	r1, #30
 8005998:	bfda      	itte	le
 800599a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800599e:	fa20 f101 	lsrle.w	r1, r0, r1
 80059a2:	2101      	movgt	r1, #1
 80059a4:	460a      	mov	r2, r1
 80059a6:	e7e1      	b.n	800596c <__ulp+0x18>
 80059a8:	7ff00000 	.word	0x7ff00000

080059ac <__b2d>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	6905      	ldr	r5, [r0, #16]
 80059b0:	f100 0714 	add.w	r7, r0, #20
 80059b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80059b8:	1f2e      	subs	r6, r5, #4
 80059ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff fd48 	bl	8005454 <__hi0bits>
 80059c4:	f1c0 0320 	rsb	r3, r0, #32
 80059c8:	280a      	cmp	r0, #10
 80059ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005a48 <__b2d+0x9c>
 80059ce:	600b      	str	r3, [r1, #0]
 80059d0:	dc14      	bgt.n	80059fc <__b2d+0x50>
 80059d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80059d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80059da:	42b7      	cmp	r7, r6
 80059dc:	ea41 030c 	orr.w	r3, r1, ip
 80059e0:	bf34      	ite	cc
 80059e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80059e6:	2100      	movcs	r1, #0
 80059e8:	3015      	adds	r0, #21
 80059ea:	fa04 f000 	lsl.w	r0, r4, r0
 80059ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80059f2:	ea40 0201 	orr.w	r2, r0, r1
 80059f6:	ec43 2b10 	vmov	d0, r2, r3
 80059fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fc:	42b7      	cmp	r7, r6
 80059fe:	bf3a      	itte	cc
 8005a00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005a04:	f1a5 0608 	subcc.w	r6, r5, #8
 8005a08:	2100      	movcs	r1, #0
 8005a0a:	380b      	subs	r0, #11
 8005a0c:	d017      	beq.n	8005a3e <__b2d+0x92>
 8005a0e:	f1c0 0c20 	rsb	ip, r0, #32
 8005a12:	fa04 f500 	lsl.w	r5, r4, r0
 8005a16:	42be      	cmp	r6, r7
 8005a18:	fa21 f40c 	lsr.w	r4, r1, ip
 8005a1c:	ea45 0504 	orr.w	r5, r5, r4
 8005a20:	bf8c      	ite	hi
 8005a22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005a26:	2400      	movls	r4, #0
 8005a28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005a2c:	fa01 f000 	lsl.w	r0, r1, r0
 8005a30:	fa24 f40c 	lsr.w	r4, r4, ip
 8005a34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a38:	ea40 0204 	orr.w	r2, r0, r4
 8005a3c:	e7db      	b.n	80059f6 <__b2d+0x4a>
 8005a3e:	ea44 030c 	orr.w	r3, r4, ip
 8005a42:	460a      	mov	r2, r1
 8005a44:	e7d7      	b.n	80059f6 <__b2d+0x4a>
 8005a46:	bf00      	nop
 8005a48:	3ff00000 	.word	0x3ff00000

08005a4c <__d2b>:
 8005a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a50:	4689      	mov	r9, r1
 8005a52:	2101      	movs	r1, #1
 8005a54:	ec57 6b10 	vmov	r6, r7, d0
 8005a58:	4690      	mov	r8, r2
 8005a5a:	f7ff fc09 	bl	8005270 <_Balloc>
 8005a5e:	4604      	mov	r4, r0
 8005a60:	b930      	cbnz	r0, 8005a70 <__d2b+0x24>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <__d2b+0xb0>)
 8005a66:	4826      	ldr	r0, [pc, #152]	; (8005b00 <__d2b+0xb4>)
 8005a68:	f240 310a 	movw	r1, #778	; 0x30a
 8005a6c:	f000 f992 	bl	8005d94 <__assert_func>
 8005a70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005a74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a78:	bb35      	cbnz	r5, 8005ac8 <__d2b+0x7c>
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	d028      	beq.n	8005ad2 <__d2b+0x86>
 8005a80:	4668      	mov	r0, sp
 8005a82:	9600      	str	r6, [sp, #0]
 8005a84:	f7ff fd06 	bl	8005494 <__lo0bits>
 8005a88:	9900      	ldr	r1, [sp, #0]
 8005a8a:	b300      	cbz	r0, 8005ace <__d2b+0x82>
 8005a8c:	9a01      	ldr	r2, [sp, #4]
 8005a8e:	f1c0 0320 	rsb	r3, r0, #32
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	430b      	orrs	r3, r1
 8005a98:	40c2      	lsrs	r2, r0
 8005a9a:	6163      	str	r3, [r4, #20]
 8005a9c:	9201      	str	r2, [sp, #4]
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	61a3      	str	r3, [r4, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	2202      	movne	r2, #2
 8005aa8:	2201      	moveq	r2, #1
 8005aaa:	6122      	str	r2, [r4, #16]
 8005aac:	b1d5      	cbz	r5, 8005ae4 <__d2b+0x98>
 8005aae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ab2:	4405      	add	r5, r0
 8005ab4:	f8c9 5000 	str.w	r5, [r9]
 8005ab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005abc:	f8c8 0000 	str.w	r0, [r8]
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	b003      	add	sp, #12
 8005ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005acc:	e7d5      	b.n	8005a7a <__d2b+0x2e>
 8005ace:	6161      	str	r1, [r4, #20]
 8005ad0:	e7e5      	b.n	8005a9e <__d2b+0x52>
 8005ad2:	a801      	add	r0, sp, #4
 8005ad4:	f7ff fcde 	bl	8005494 <__lo0bits>
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	6163      	str	r3, [r4, #20]
 8005adc:	2201      	movs	r2, #1
 8005ade:	6122      	str	r2, [r4, #16]
 8005ae0:	3020      	adds	r0, #32
 8005ae2:	e7e3      	b.n	8005aac <__d2b+0x60>
 8005ae4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005aec:	f8c9 0000 	str.w	r0, [r9]
 8005af0:	6918      	ldr	r0, [r3, #16]
 8005af2:	f7ff fcaf 	bl	8005454 <__hi0bits>
 8005af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005afa:	e7df      	b.n	8005abc <__d2b+0x70>
 8005afc:	08006d10 	.word	0x08006d10
 8005b00:	08006db3 	.word	0x08006db3

08005b04 <__ratio>:
 8005b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	4688      	mov	r8, r1
 8005b0a:	4669      	mov	r1, sp
 8005b0c:	4681      	mov	r9, r0
 8005b0e:	f7ff ff4d 	bl	80059ac <__b2d>
 8005b12:	a901      	add	r1, sp, #4
 8005b14:	4640      	mov	r0, r8
 8005b16:	ec55 4b10 	vmov	r4, r5, d0
 8005b1a:	f7ff ff47 	bl	80059ac <__b2d>
 8005b1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005b26:	eba3 0c02 	sub.w	ip, r3, r2
 8005b2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005b34:	ec51 0b10 	vmov	r0, r1, d0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfd6      	itet	le
 8005b3c:	460a      	movle	r2, r1
 8005b3e:	462a      	movgt	r2, r5
 8005b40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005b44:	468b      	mov	fp, r1
 8005b46:	462f      	mov	r7, r5
 8005b48:	bfd4      	ite	le
 8005b4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005b4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005b52:	4620      	mov	r0, r4
 8005b54:	ee10 2a10 	vmov	r2, s0
 8005b58:	465b      	mov	r3, fp
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa fe7e 	bl	800085c <__aeabi_ddiv>
 8005b60:	ec41 0b10 	vmov	d0, r0, r1
 8005b64:	b003      	add	sp, #12
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b6a <__copybits>:
 8005b6a:	3901      	subs	r1, #1
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	1149      	asrs	r1, r1, #5
 8005b70:	6914      	ldr	r4, [r2, #16]
 8005b72:	3101      	adds	r1, #1
 8005b74:	f102 0314 	add.w	r3, r2, #20
 8005b78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b80:	1f05      	subs	r5, r0, #4
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	d30c      	bcc.n	8005ba0 <__copybits+0x36>
 8005b86:	1aa3      	subs	r3, r4, r2
 8005b88:	3b11      	subs	r3, #17
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	3211      	adds	r2, #17
 8005b90:	42a2      	cmp	r2, r4
 8005b92:	bf88      	it	hi
 8005b94:	2300      	movhi	r3, #0
 8005b96:	4418      	add	r0, r3
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4288      	cmp	r0, r1
 8005b9c:	d305      	bcc.n	8005baa <__copybits+0x40>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	f853 6b04 	ldr.w	r6, [r3], #4
 8005ba4:	f845 6f04 	str.w	r6, [r5, #4]!
 8005ba8:	e7eb      	b.n	8005b82 <__copybits+0x18>
 8005baa:	f840 3b04 	str.w	r3, [r0], #4
 8005bae:	e7f4      	b.n	8005b9a <__copybits+0x30>

08005bb0 <__any_on>:
 8005bb0:	f100 0214 	add.w	r2, r0, #20
 8005bb4:	6900      	ldr	r0, [r0, #16]
 8005bb6:	114b      	asrs	r3, r1, #5
 8005bb8:	4298      	cmp	r0, r3
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	db11      	blt.n	8005be2 <__any_on+0x32>
 8005bbe:	dd0a      	ble.n	8005bd6 <__any_on+0x26>
 8005bc0:	f011 011f 	ands.w	r1, r1, #31
 8005bc4:	d007      	beq.n	8005bd6 <__any_on+0x26>
 8005bc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005bca:	fa24 f001 	lsr.w	r0, r4, r1
 8005bce:	fa00 f101 	lsl.w	r1, r0, r1
 8005bd2:	428c      	cmp	r4, r1
 8005bd4:	d10b      	bne.n	8005bee <__any_on+0x3e>
 8005bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d803      	bhi.n	8005be6 <__any_on+0x36>
 8005bde:	2000      	movs	r0, #0
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	4603      	mov	r3, r0
 8005be4:	e7f7      	b.n	8005bd6 <__any_on+0x26>
 8005be6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bea:	2900      	cmp	r1, #0
 8005bec:	d0f5      	beq.n	8005bda <__any_on+0x2a>
 8005bee:	2001      	movs	r0, #1
 8005bf0:	e7f6      	b.n	8005be0 <__any_on+0x30>

08005bf2 <_calloc_r>:
 8005bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bf4:	fba1 2402 	umull	r2, r4, r1, r2
 8005bf8:	b94c      	cbnz	r4, 8005c0e <_calloc_r+0x1c>
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	9201      	str	r2, [sp, #4]
 8005bfe:	f000 f82f 	bl	8005c60 <_malloc_r>
 8005c02:	9a01      	ldr	r2, [sp, #4]
 8005c04:	4605      	mov	r5, r0
 8005c06:	b930      	cbnz	r0, 8005c16 <_calloc_r+0x24>
 8005c08:	4628      	mov	r0, r5
 8005c0a:	b003      	add	sp, #12
 8005c0c:	bd30      	pop	{r4, r5, pc}
 8005c0e:	220c      	movs	r2, #12
 8005c10:	6002      	str	r2, [r0, #0]
 8005c12:	2500      	movs	r5, #0
 8005c14:	e7f8      	b.n	8005c08 <_calloc_r+0x16>
 8005c16:	4621      	mov	r1, r4
 8005c18:	f7fe f95e 	bl	8003ed8 <memset>
 8005c1c:	e7f4      	b.n	8005c08 <_calloc_r+0x16>
	...

08005c20 <sbrk_aligned>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4e0e      	ldr	r6, [pc, #56]	; (8005c5c <sbrk_aligned+0x3c>)
 8005c24:	460c      	mov	r4, r1
 8005c26:	6831      	ldr	r1, [r6, #0]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b911      	cbnz	r1, 8005c32 <sbrk_aligned+0x12>
 8005c2c:	f000 f894 	bl	8005d58 <_sbrk_r>
 8005c30:	6030      	str	r0, [r6, #0]
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 f88f 	bl	8005d58 <_sbrk_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d00a      	beq.n	8005c54 <sbrk_aligned+0x34>
 8005c3e:	1cc4      	adds	r4, r0, #3
 8005c40:	f024 0403 	bic.w	r4, r4, #3
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d007      	beq.n	8005c58 <sbrk_aligned+0x38>
 8005c48:	1a21      	subs	r1, r4, r0
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f884 	bl	8005d58 <_sbrk_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d101      	bne.n	8005c58 <sbrk_aligned+0x38>
 8005c54:	f04f 34ff 	mov.w	r4, #4294967295
 8005c58:	4620      	mov	r0, r4
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	20000380 	.word	0x20000380

08005c60 <_malloc_r>:
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	1ccd      	adds	r5, r1, #3
 8005c66:	f025 0503 	bic.w	r5, r5, #3
 8005c6a:	3508      	adds	r5, #8
 8005c6c:	2d0c      	cmp	r5, #12
 8005c6e:	bf38      	it	cc
 8005c70:	250c      	movcc	r5, #12
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	4607      	mov	r7, r0
 8005c76:	db01      	blt.n	8005c7c <_malloc_r+0x1c>
 8005c78:	42a9      	cmp	r1, r5
 8005c7a:	d905      	bls.n	8005c88 <_malloc_r+0x28>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	2600      	movs	r6, #0
 8005c82:	4630      	mov	r0, r6
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	4e2e      	ldr	r6, [pc, #184]	; (8005d44 <_malloc_r+0xe4>)
 8005c8a:	f000 f8bb 	bl	8005e04 <__malloc_lock>
 8005c8e:	6833      	ldr	r3, [r6, #0]
 8005c90:	461c      	mov	r4, r3
 8005c92:	bb34      	cbnz	r4, 8005ce2 <_malloc_r+0x82>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4638      	mov	r0, r7
 8005c98:	f7ff ffc2 	bl	8005c20 <sbrk_aligned>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	d14d      	bne.n	8005d3e <_malloc_r+0xde>
 8005ca2:	6834      	ldr	r4, [r6, #0]
 8005ca4:	4626      	mov	r6, r4
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d140      	bne.n	8005d2c <_malloc_r+0xcc>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4631      	mov	r1, r6
 8005cae:	4638      	mov	r0, r7
 8005cb0:	eb04 0803 	add.w	r8, r4, r3
 8005cb4:	f000 f850 	bl	8005d58 <_sbrk_r>
 8005cb8:	4580      	cmp	r8, r0
 8005cba:	d13a      	bne.n	8005d32 <_malloc_r+0xd2>
 8005cbc:	6821      	ldr	r1, [r4, #0]
 8005cbe:	3503      	adds	r5, #3
 8005cc0:	1a6d      	subs	r5, r5, r1
 8005cc2:	f025 0503 	bic.w	r5, r5, #3
 8005cc6:	3508      	adds	r5, #8
 8005cc8:	2d0c      	cmp	r5, #12
 8005cca:	bf38      	it	cc
 8005ccc:	250c      	movcc	r5, #12
 8005cce:	4629      	mov	r1, r5
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f7ff ffa5 	bl	8005c20 <sbrk_aligned>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d02b      	beq.n	8005d32 <_malloc_r+0xd2>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	442b      	add	r3, r5
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	e00e      	b.n	8005d00 <_malloc_r+0xa0>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	1b52      	subs	r2, r2, r5
 8005ce6:	d41e      	bmi.n	8005d26 <_malloc_r+0xc6>
 8005ce8:	2a0b      	cmp	r2, #11
 8005cea:	d916      	bls.n	8005d1a <_malloc_r+0xba>
 8005cec:	1961      	adds	r1, r4, r5
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6025      	str	r5, [r4, #0]
 8005cf2:	bf18      	it	ne
 8005cf4:	6059      	strne	r1, [r3, #4]
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	bf08      	it	eq
 8005cfa:	6031      	streq	r1, [r6, #0]
 8005cfc:	5162      	str	r2, [r4, r5]
 8005cfe:	604b      	str	r3, [r1, #4]
 8005d00:	4638      	mov	r0, r7
 8005d02:	f104 060b 	add.w	r6, r4, #11
 8005d06:	f000 f883 	bl	8005e10 <__malloc_unlock>
 8005d0a:	f026 0607 	bic.w	r6, r6, #7
 8005d0e:	1d23      	adds	r3, r4, #4
 8005d10:	1af2      	subs	r2, r6, r3
 8005d12:	d0b6      	beq.n	8005c82 <_malloc_r+0x22>
 8005d14:	1b9b      	subs	r3, r3, r6
 8005d16:	50a3      	str	r3, [r4, r2]
 8005d18:	e7b3      	b.n	8005c82 <_malloc_r+0x22>
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	bf0c      	ite	eq
 8005d20:	6032      	streq	r2, [r6, #0]
 8005d22:	605a      	strne	r2, [r3, #4]
 8005d24:	e7ec      	b.n	8005d00 <_malloc_r+0xa0>
 8005d26:	4623      	mov	r3, r4
 8005d28:	6864      	ldr	r4, [r4, #4]
 8005d2a:	e7b2      	b.n	8005c92 <_malloc_r+0x32>
 8005d2c:	4634      	mov	r4, r6
 8005d2e:	6876      	ldr	r6, [r6, #4]
 8005d30:	e7b9      	b.n	8005ca6 <_malloc_r+0x46>
 8005d32:	230c      	movs	r3, #12
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4638      	mov	r0, r7
 8005d38:	f000 f86a 	bl	8005e10 <__malloc_unlock>
 8005d3c:	e7a1      	b.n	8005c82 <_malloc_r+0x22>
 8005d3e:	6025      	str	r5, [r4, #0]
 8005d40:	e7de      	b.n	8005d00 <_malloc_r+0xa0>
 8005d42:	bf00      	nop
 8005d44:	2000037c 	.word	0x2000037c

08005d48 <nan>:
 8005d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005d50 <nan+0x8>
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	00000000 	.word	0x00000000
 8005d54:	7ff80000 	.word	0x7ff80000

08005d58 <_sbrk_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d06      	ldr	r5, [pc, #24]	; (8005d74 <_sbrk_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	f7fc f8a4 	bl	8001eb0 <_sbrk>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_sbrk_r+0x1a>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_sbrk_r+0x1a>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000384 	.word	0x20000384

08005d78 <__ascii_wctomb>:
 8005d78:	b149      	cbz	r1, 8005d8e <__ascii_wctomb+0x16>
 8005d7a:	2aff      	cmp	r2, #255	; 0xff
 8005d7c:	bf85      	ittet	hi
 8005d7e:	238a      	movhi	r3, #138	; 0x8a
 8005d80:	6003      	strhi	r3, [r0, #0]
 8005d82:	700a      	strbls	r2, [r1, #0]
 8005d84:	f04f 30ff 	movhi.w	r0, #4294967295
 8005d88:	bf98      	it	ls
 8005d8a:	2001      	movls	r0, #1
 8005d8c:	4770      	bx	lr
 8005d8e:	4608      	mov	r0, r1
 8005d90:	4770      	bx	lr
	...

08005d94 <__assert_func>:
 8005d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d96:	4614      	mov	r4, r2
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <__assert_func+0x2c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4605      	mov	r5, r0
 8005da0:	68d8      	ldr	r0, [r3, #12]
 8005da2:	b14c      	cbz	r4, 8005db8 <__assert_func+0x24>
 8005da4:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <__assert_func+0x30>)
 8005da6:	9100      	str	r1, [sp, #0]
 8005da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dac:	4906      	ldr	r1, [pc, #24]	; (8005dc8 <__assert_func+0x34>)
 8005dae:	462b      	mov	r3, r5
 8005db0:	f000 f80e 	bl	8005dd0 <fiprintf>
 8005db4:	f000 fc2c 	bl	8006610 <abort>
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <__assert_func+0x38>)
 8005dba:	461c      	mov	r4, r3
 8005dbc:	e7f3      	b.n	8005da6 <__assert_func+0x12>
 8005dbe:	bf00      	nop
 8005dc0:	2000000c 	.word	0x2000000c
 8005dc4:	08006f0c 	.word	0x08006f0c
 8005dc8:	08006f19 	.word	0x08006f19
 8005dcc:	08006f47 	.word	0x08006f47

08005dd0 <fiprintf>:
 8005dd0:	b40e      	push	{r1, r2, r3}
 8005dd2:	b503      	push	{r0, r1, lr}
 8005dd4:	4601      	mov	r1, r0
 8005dd6:	ab03      	add	r3, sp, #12
 8005dd8:	4805      	ldr	r0, [pc, #20]	; (8005df0 <fiprintf+0x20>)
 8005dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dde:	6800      	ldr	r0, [r0, #0]
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	f000 f891 	bl	8005f08 <_vfiprintf_r>
 8005de6:	b002      	add	sp, #8
 8005de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dec:	b003      	add	sp, #12
 8005dee:	4770      	bx	lr
 8005df0:	2000000c 	.word	0x2000000c

08005df4 <malloc>:
 8005df4:	4b02      	ldr	r3, [pc, #8]	; (8005e00 <malloc+0xc>)
 8005df6:	4601      	mov	r1, r0
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f7ff bf31 	b.w	8005c60 <_malloc_r>
 8005dfe:	bf00      	nop
 8005e00:	2000000c 	.word	0x2000000c

08005e04 <__malloc_lock>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__malloc_lock+0x8>)
 8005e06:	f000 bdc3 	b.w	8006990 <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	20000388 	.word	0x20000388

08005e10 <__malloc_unlock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__malloc_unlock+0x8>)
 8005e12:	f000 bdbe 	b.w	8006992 <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	20000388 	.word	0x20000388

08005e1c <_free_r>:
 8005e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d044      	beq.n	8005eac <_free_r+0x90>
 8005e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e26:	9001      	str	r0, [sp, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e2e:	bfb8      	it	lt
 8005e30:	18e4      	addlt	r4, r4, r3
 8005e32:	f7ff ffe7 	bl	8005e04 <__malloc_lock>
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <_free_r+0x94>)
 8005e38:	9801      	ldr	r0, [sp, #4]
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	b933      	cbnz	r3, 8005e4c <_free_r+0x30>
 8005e3e:	6063      	str	r3, [r4, #4]
 8005e40:	6014      	str	r4, [r2, #0]
 8005e42:	b003      	add	sp, #12
 8005e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e48:	f7ff bfe2 	b.w	8005e10 <__malloc_unlock>
 8005e4c:	42a3      	cmp	r3, r4
 8005e4e:	d908      	bls.n	8005e62 <_free_r+0x46>
 8005e50:	6825      	ldr	r5, [r4, #0]
 8005e52:	1961      	adds	r1, r4, r5
 8005e54:	428b      	cmp	r3, r1
 8005e56:	bf01      	itttt	eq
 8005e58:	6819      	ldreq	r1, [r3, #0]
 8005e5a:	685b      	ldreq	r3, [r3, #4]
 8005e5c:	1949      	addeq	r1, r1, r5
 8005e5e:	6021      	streq	r1, [r4, #0]
 8005e60:	e7ed      	b.n	8005e3e <_free_r+0x22>
 8005e62:	461a      	mov	r2, r3
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b10b      	cbz	r3, 8005e6c <_free_r+0x50>
 8005e68:	42a3      	cmp	r3, r4
 8005e6a:	d9fa      	bls.n	8005e62 <_free_r+0x46>
 8005e6c:	6811      	ldr	r1, [r2, #0]
 8005e6e:	1855      	adds	r5, r2, r1
 8005e70:	42a5      	cmp	r5, r4
 8005e72:	d10b      	bne.n	8005e8c <_free_r+0x70>
 8005e74:	6824      	ldr	r4, [r4, #0]
 8005e76:	4421      	add	r1, r4
 8005e78:	1854      	adds	r4, r2, r1
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	6011      	str	r1, [r2, #0]
 8005e7e:	d1e0      	bne.n	8005e42 <_free_r+0x26>
 8005e80:	681c      	ldr	r4, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	6053      	str	r3, [r2, #4]
 8005e86:	4421      	add	r1, r4
 8005e88:	6011      	str	r1, [r2, #0]
 8005e8a:	e7da      	b.n	8005e42 <_free_r+0x26>
 8005e8c:	d902      	bls.n	8005e94 <_free_r+0x78>
 8005e8e:	230c      	movs	r3, #12
 8005e90:	6003      	str	r3, [r0, #0]
 8005e92:	e7d6      	b.n	8005e42 <_free_r+0x26>
 8005e94:	6825      	ldr	r5, [r4, #0]
 8005e96:	1961      	adds	r1, r4, r5
 8005e98:	428b      	cmp	r3, r1
 8005e9a:	bf04      	itt	eq
 8005e9c:	6819      	ldreq	r1, [r3, #0]
 8005e9e:	685b      	ldreq	r3, [r3, #4]
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	bf04      	itt	eq
 8005ea4:	1949      	addeq	r1, r1, r5
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	6054      	str	r4, [r2, #4]
 8005eaa:	e7ca      	b.n	8005e42 <_free_r+0x26>
 8005eac:	b003      	add	sp, #12
 8005eae:	bd30      	pop	{r4, r5, pc}
 8005eb0:	2000037c 	.word	0x2000037c

08005eb4 <__sfputc_r>:
 8005eb4:	6893      	ldr	r3, [r2, #8]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	b410      	push	{r4}
 8005ebc:	6093      	str	r3, [r2, #8]
 8005ebe:	da08      	bge.n	8005ed2 <__sfputc_r+0x1e>
 8005ec0:	6994      	ldr	r4, [r2, #24]
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	db01      	blt.n	8005eca <__sfputc_r+0x16>
 8005ec6:	290a      	cmp	r1, #10
 8005ec8:	d103      	bne.n	8005ed2 <__sfputc_r+0x1e>
 8005eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ece:	f000 badf 	b.w	8006490 <__swbuf_r>
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	1c58      	adds	r0, r3, #1
 8005ed6:	6010      	str	r0, [r2, #0]
 8005ed8:	7019      	strb	r1, [r3, #0]
 8005eda:	4608      	mov	r0, r1
 8005edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <__sfputs_r>:
 8005ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	18d5      	adds	r5, r2, r3
 8005eec:	42ac      	cmp	r4, r5
 8005eee:	d101      	bne.n	8005ef4 <__sfputs_r+0x12>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e007      	b.n	8005f04 <__sfputs_r+0x22>
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	463a      	mov	r2, r7
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7ff ffda 	bl	8005eb4 <__sfputc_r>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d1f3      	bne.n	8005eec <__sfputs_r+0xa>
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f08 <_vfiprintf_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	b09d      	sub	sp, #116	; 0x74
 8005f10:	4614      	mov	r4, r2
 8005f12:	4698      	mov	r8, r3
 8005f14:	4606      	mov	r6, r0
 8005f16:	b118      	cbz	r0, 8005f20 <_vfiprintf_r+0x18>
 8005f18:	6983      	ldr	r3, [r0, #24]
 8005f1a:	b90b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x18>
 8005f1c:	f000 fc9a 	bl	8006854 <__sinit>
 8005f20:	4b89      	ldr	r3, [pc, #548]	; (8006148 <_vfiprintf_r+0x240>)
 8005f22:	429d      	cmp	r5, r3
 8005f24:	d11b      	bne.n	8005f5e <_vfiprintf_r+0x56>
 8005f26:	6875      	ldr	r5, [r6, #4]
 8005f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f2a:	07d9      	lsls	r1, r3, #31
 8005f2c:	d405      	bmi.n	8005f3a <_vfiprintf_r+0x32>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	059a      	lsls	r2, r3, #22
 8005f32:	d402      	bmi.n	8005f3a <_vfiprintf_r+0x32>
 8005f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f36:	f000 fd2b 	bl	8006990 <__retarget_lock_acquire_recursive>
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	071b      	lsls	r3, r3, #28
 8005f3e:	d501      	bpl.n	8005f44 <_vfiprintf_r+0x3c>
 8005f40:	692b      	ldr	r3, [r5, #16]
 8005f42:	b9eb      	cbnz	r3, 8005f80 <_vfiprintf_r+0x78>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4630      	mov	r0, r6
 8005f48:	f000 faf4 	bl	8006534 <__swsetup_r>
 8005f4c:	b1c0      	cbz	r0, 8005f80 <_vfiprintf_r+0x78>
 8005f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f50:	07dc      	lsls	r4, r3, #31
 8005f52:	d50e      	bpl.n	8005f72 <_vfiprintf_r+0x6a>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	b01d      	add	sp, #116	; 0x74
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	4b7b      	ldr	r3, [pc, #492]	; (800614c <_vfiprintf_r+0x244>)
 8005f60:	429d      	cmp	r5, r3
 8005f62:	d101      	bne.n	8005f68 <_vfiprintf_r+0x60>
 8005f64:	68b5      	ldr	r5, [r6, #8]
 8005f66:	e7df      	b.n	8005f28 <_vfiprintf_r+0x20>
 8005f68:	4b79      	ldr	r3, [pc, #484]	; (8006150 <_vfiprintf_r+0x248>)
 8005f6a:	429d      	cmp	r5, r3
 8005f6c:	bf08      	it	eq
 8005f6e:	68f5      	ldreq	r5, [r6, #12]
 8005f70:	e7da      	b.n	8005f28 <_vfiprintf_r+0x20>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	0598      	lsls	r0, r3, #22
 8005f76:	d4ed      	bmi.n	8005f54 <_vfiprintf_r+0x4c>
 8005f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7a:	f000 fd0a 	bl	8006992 <__retarget_lock_release_recursive>
 8005f7e:	e7e9      	b.n	8005f54 <_vfiprintf_r+0x4c>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	2320      	movs	r3, #32
 8005f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	2330      	movs	r3, #48	; 0x30
 8005f90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006154 <_vfiprintf_r+0x24c>
 8005f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f98:	f04f 0901 	mov.w	r9, #1
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa4:	b10a      	cbz	r2, 8005faa <_vfiprintf_r+0xa2>
 8005fa6:	2a25      	cmp	r2, #37	; 0x25
 8005fa8:	d1f9      	bne.n	8005f9e <_vfiprintf_r+0x96>
 8005faa:	ebba 0b04 	subs.w	fp, sl, r4
 8005fae:	d00b      	beq.n	8005fc8 <_vfiprintf_r+0xc0>
 8005fb0:	465b      	mov	r3, fp
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ff93 	bl	8005ee2 <__sfputs_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f000 80aa 	beq.w	8006116 <_vfiprintf_r+0x20e>
 8005fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc4:	445a      	add	r2, fp
 8005fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80a2 	beq.w	8006116 <_vfiprintf_r+0x20e>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8005fea:	4654      	mov	r4, sl
 8005fec:	2205      	movs	r2, #5
 8005fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff2:	4858      	ldr	r0, [pc, #352]	; (8006154 <_vfiprintf_r+0x24c>)
 8005ff4:	f7fa f8fc 	bl	80001f0 <memchr>
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	b9d8      	cbnz	r0, 8006034 <_vfiprintf_r+0x12c>
 8005ffc:	06d1      	lsls	r1, r2, #27
 8005ffe:	bf44      	itt	mi
 8006000:	2320      	movmi	r3, #32
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	0713      	lsls	r3, r2, #28
 8006008:	bf44      	itt	mi
 800600a:	232b      	movmi	r3, #43	; 0x2b
 800600c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006010:	f89a 3000 	ldrb.w	r3, [sl]
 8006014:	2b2a      	cmp	r3, #42	; 0x2a
 8006016:	d015      	beq.n	8006044 <_vfiprintf_r+0x13c>
 8006018:	9a07      	ldr	r2, [sp, #28]
 800601a:	4654      	mov	r4, sl
 800601c:	2000      	movs	r0, #0
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4621      	mov	r1, r4
 8006024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	2b09      	cmp	r3, #9
 800602c:	d94e      	bls.n	80060cc <_vfiprintf_r+0x1c4>
 800602e:	b1b0      	cbz	r0, 800605e <_vfiprintf_r+0x156>
 8006030:	9207      	str	r2, [sp, #28]
 8006032:	e014      	b.n	800605e <_vfiprintf_r+0x156>
 8006034:	eba0 0308 	sub.w	r3, r0, r8
 8006038:	fa09 f303 	lsl.w	r3, r9, r3
 800603c:	4313      	orrs	r3, r2
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	46a2      	mov	sl, r4
 8006042:	e7d2      	b.n	8005fea <_vfiprintf_r+0xe2>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9103      	str	r1, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfbb      	ittet	lt
 8006050:	425b      	neglt	r3, r3
 8006052:	f042 0202 	orrlt.w	r2, r2, #2
 8006056:	9307      	strge	r3, [sp, #28]
 8006058:	9307      	strlt	r3, [sp, #28]
 800605a:	bfb8      	it	lt
 800605c:	9204      	strlt	r2, [sp, #16]
 800605e:	7823      	ldrb	r3, [r4, #0]
 8006060:	2b2e      	cmp	r3, #46	; 0x2e
 8006062:	d10c      	bne.n	800607e <_vfiprintf_r+0x176>
 8006064:	7863      	ldrb	r3, [r4, #1]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d135      	bne.n	80060d6 <_vfiprintf_r+0x1ce>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	1d1a      	adds	r2, r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfb8      	it	lt
 8006076:	f04f 33ff 	movlt.w	r3, #4294967295
 800607a:	3402      	adds	r4, #2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006164 <_vfiprintf_r+0x25c>
 8006082:	7821      	ldrb	r1, [r4, #0]
 8006084:	2203      	movs	r2, #3
 8006086:	4650      	mov	r0, sl
 8006088:	f7fa f8b2 	bl	80001f0 <memchr>
 800608c:	b140      	cbz	r0, 80060a0 <_vfiprintf_r+0x198>
 800608e:	2340      	movs	r3, #64	; 0x40
 8006090:	eba0 000a 	sub.w	r0, r0, sl
 8006094:	fa03 f000 	lsl.w	r0, r3, r0
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	4303      	orrs	r3, r0
 800609c:	3401      	adds	r4, #1
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a4:	482c      	ldr	r0, [pc, #176]	; (8006158 <_vfiprintf_r+0x250>)
 80060a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060aa:	2206      	movs	r2, #6
 80060ac:	f7fa f8a0 	bl	80001f0 <memchr>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d03f      	beq.n	8006134 <_vfiprintf_r+0x22c>
 80060b4:	4b29      	ldr	r3, [pc, #164]	; (800615c <_vfiprintf_r+0x254>)
 80060b6:	bb1b      	cbnz	r3, 8006100 <_vfiprintf_r+0x1f8>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	3307      	adds	r3, #7
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	3308      	adds	r3, #8
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	443b      	add	r3, r7
 80060c8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ca:	e767      	b.n	8005f9c <_vfiprintf_r+0x94>
 80060cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d0:	460c      	mov	r4, r1
 80060d2:	2001      	movs	r0, #1
 80060d4:	e7a5      	b.n	8006022 <_vfiprintf_r+0x11a>
 80060d6:	2300      	movs	r3, #0
 80060d8:	3401      	adds	r4, #1
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0c0a 	mov.w	ip, #10
 80060e2:	4620      	mov	r0, r4
 80060e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e8:	3a30      	subs	r2, #48	; 0x30
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	d903      	bls.n	80060f6 <_vfiprintf_r+0x1ee>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c5      	beq.n	800607e <_vfiprintf_r+0x176>
 80060f2:	9105      	str	r1, [sp, #20]
 80060f4:	e7c3      	b.n	800607e <_vfiprintf_r+0x176>
 80060f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060fa:	4604      	mov	r4, r0
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7f0      	b.n	80060e2 <_vfiprintf_r+0x1da>
 8006100:	ab03      	add	r3, sp, #12
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	462a      	mov	r2, r5
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <_vfiprintf_r+0x258>)
 8006108:	a904      	add	r1, sp, #16
 800610a:	4630      	mov	r0, r6
 800610c:	f3af 8000 	nop.w
 8006110:	4607      	mov	r7, r0
 8006112:	1c78      	adds	r0, r7, #1
 8006114:	d1d6      	bne.n	80060c4 <_vfiprintf_r+0x1bc>
 8006116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006118:	07d9      	lsls	r1, r3, #31
 800611a:	d405      	bmi.n	8006128 <_vfiprintf_r+0x220>
 800611c:	89ab      	ldrh	r3, [r5, #12]
 800611e:	059a      	lsls	r2, r3, #22
 8006120:	d402      	bmi.n	8006128 <_vfiprintf_r+0x220>
 8006122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006124:	f000 fc35 	bl	8006992 <__retarget_lock_release_recursive>
 8006128:	89ab      	ldrh	r3, [r5, #12]
 800612a:	065b      	lsls	r3, r3, #25
 800612c:	f53f af12 	bmi.w	8005f54 <_vfiprintf_r+0x4c>
 8006130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006132:	e711      	b.n	8005f58 <_vfiprintf_r+0x50>
 8006134:	ab03      	add	r3, sp, #12
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	462a      	mov	r2, r5
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <_vfiprintf_r+0x258>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f880 	bl	8006244 <_printf_i>
 8006144:	e7e4      	b.n	8006110 <_vfiprintf_r+0x208>
 8006146:	bf00      	nop
 8006148:	0800709c 	.word	0x0800709c
 800614c:	080070bc 	.word	0x080070bc
 8006150:	0800707c 	.word	0x0800707c
 8006154:	08007049 	.word	0x08007049
 8006158:	08007053 	.word	0x08007053
 800615c:	00000000 	.word	0x00000000
 8006160:	08005ee3 	.word	0x08005ee3
 8006164:	0800704f 	.word	0x0800704f

08006168 <_printf_common>:
 8006168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	4616      	mov	r6, r2
 800616e:	4699      	mov	r9, r3
 8006170:	688a      	ldr	r2, [r1, #8]
 8006172:	690b      	ldr	r3, [r1, #16]
 8006174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006178:	4293      	cmp	r3, r2
 800617a:	bfb8      	it	lt
 800617c:	4613      	movlt	r3, r2
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006184:	4607      	mov	r7, r0
 8006186:	460c      	mov	r4, r1
 8006188:	b10a      	cbz	r2, 800618e <_printf_common+0x26>
 800618a:	3301      	adds	r3, #1
 800618c:	6033      	str	r3, [r6, #0]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	0699      	lsls	r1, r3, #26
 8006192:	bf42      	ittt	mi
 8006194:	6833      	ldrmi	r3, [r6, #0]
 8006196:	3302      	addmi	r3, #2
 8006198:	6033      	strmi	r3, [r6, #0]
 800619a:	6825      	ldr	r5, [r4, #0]
 800619c:	f015 0506 	ands.w	r5, r5, #6
 80061a0:	d106      	bne.n	80061b0 <_printf_common+0x48>
 80061a2:	f104 0a19 	add.w	sl, r4, #25
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	6832      	ldr	r2, [r6, #0]
 80061aa:	1a9b      	subs	r3, r3, r2
 80061ac:	42ab      	cmp	r3, r5
 80061ae:	dc26      	bgt.n	80061fe <_printf_common+0x96>
 80061b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b4:	1e13      	subs	r3, r2, #0
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	bf18      	it	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	0692      	lsls	r2, r2, #26
 80061be:	d42b      	bmi.n	8006218 <_printf_common+0xb0>
 80061c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c4:	4649      	mov	r1, r9
 80061c6:	4638      	mov	r0, r7
 80061c8:	47c0      	blx	r8
 80061ca:	3001      	adds	r0, #1
 80061cc:	d01e      	beq.n	800620c <_printf_common+0xa4>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	68e5      	ldr	r5, [r4, #12]
 80061d2:	6832      	ldr	r2, [r6, #0]
 80061d4:	f003 0306 	and.w	r3, r3, #6
 80061d8:	2b04      	cmp	r3, #4
 80061da:	bf08      	it	eq
 80061dc:	1aad      	subeq	r5, r5, r2
 80061de:	68a3      	ldr	r3, [r4, #8]
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	bf0c      	ite	eq
 80061e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e8:	2500      	movne	r5, #0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bfc4      	itt	gt
 80061ee:	1a9b      	subgt	r3, r3, r2
 80061f0:	18ed      	addgt	r5, r5, r3
 80061f2:	2600      	movs	r6, #0
 80061f4:	341a      	adds	r4, #26
 80061f6:	42b5      	cmp	r5, r6
 80061f8:	d11a      	bne.n	8006230 <_printf_common+0xc8>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e008      	b.n	8006210 <_printf_common+0xa8>
 80061fe:	2301      	movs	r3, #1
 8006200:	4652      	mov	r2, sl
 8006202:	4649      	mov	r1, r9
 8006204:	4638      	mov	r0, r7
 8006206:	47c0      	blx	r8
 8006208:	3001      	adds	r0, #1
 800620a:	d103      	bne.n	8006214 <_printf_common+0xac>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006214:	3501      	adds	r5, #1
 8006216:	e7c6      	b.n	80061a6 <_printf_common+0x3e>
 8006218:	18e1      	adds	r1, r4, r3
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	2030      	movs	r0, #48	; 0x30
 800621e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006222:	4422      	add	r2, r4
 8006224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800622c:	3302      	adds	r3, #2
 800622e:	e7c7      	b.n	80061c0 <_printf_common+0x58>
 8006230:	2301      	movs	r3, #1
 8006232:	4622      	mov	r2, r4
 8006234:	4649      	mov	r1, r9
 8006236:	4638      	mov	r0, r7
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d0e6      	beq.n	800620c <_printf_common+0xa4>
 800623e:	3601      	adds	r6, #1
 8006240:	e7d9      	b.n	80061f6 <_printf_common+0x8e>
	...

08006244 <_printf_i>:
 8006244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	7e0f      	ldrb	r7, [r1, #24]
 800624a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800624c:	2f78      	cmp	r7, #120	; 0x78
 800624e:	4691      	mov	r9, r2
 8006250:	4680      	mov	r8, r0
 8006252:	460c      	mov	r4, r1
 8006254:	469a      	mov	sl, r3
 8006256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800625a:	d807      	bhi.n	800626c <_printf_i+0x28>
 800625c:	2f62      	cmp	r7, #98	; 0x62
 800625e:	d80a      	bhi.n	8006276 <_printf_i+0x32>
 8006260:	2f00      	cmp	r7, #0
 8006262:	f000 80d8 	beq.w	8006416 <_printf_i+0x1d2>
 8006266:	2f58      	cmp	r7, #88	; 0x58
 8006268:	f000 80a3 	beq.w	80063b2 <_printf_i+0x16e>
 800626c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006274:	e03a      	b.n	80062ec <_printf_i+0xa8>
 8006276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800627a:	2b15      	cmp	r3, #21
 800627c:	d8f6      	bhi.n	800626c <_printf_i+0x28>
 800627e:	a101      	add	r1, pc, #4	; (adr r1, 8006284 <_printf_i+0x40>)
 8006280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006284:	080062dd 	.word	0x080062dd
 8006288:	080062f1 	.word	0x080062f1
 800628c:	0800626d 	.word	0x0800626d
 8006290:	0800626d 	.word	0x0800626d
 8006294:	0800626d 	.word	0x0800626d
 8006298:	0800626d 	.word	0x0800626d
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	0800626d 	.word	0x0800626d
 80062a4:	0800626d 	.word	0x0800626d
 80062a8:	0800626d 	.word	0x0800626d
 80062ac:	0800626d 	.word	0x0800626d
 80062b0:	080063fd 	.word	0x080063fd
 80062b4:	08006321 	.word	0x08006321
 80062b8:	080063df 	.word	0x080063df
 80062bc:	0800626d 	.word	0x0800626d
 80062c0:	0800626d 	.word	0x0800626d
 80062c4:	0800641f 	.word	0x0800641f
 80062c8:	0800626d 	.word	0x0800626d
 80062cc:	08006321 	.word	0x08006321
 80062d0:	0800626d 	.word	0x0800626d
 80062d4:	0800626d 	.word	0x0800626d
 80062d8:	080063e7 	.word	0x080063e7
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	1d1a      	adds	r2, r3, #4
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	602a      	str	r2, [r5, #0]
 80062e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0a3      	b.n	8006438 <_printf_i+0x1f4>
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	6829      	ldr	r1, [r5, #0]
 80062f4:	0606      	lsls	r6, r0, #24
 80062f6:	f101 0304 	add.w	r3, r1, #4
 80062fa:	d50a      	bpl.n	8006312 <_printf_i+0xce>
 80062fc:	680e      	ldr	r6, [r1, #0]
 80062fe:	602b      	str	r3, [r5, #0]
 8006300:	2e00      	cmp	r6, #0
 8006302:	da03      	bge.n	800630c <_printf_i+0xc8>
 8006304:	232d      	movs	r3, #45	; 0x2d
 8006306:	4276      	negs	r6, r6
 8006308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630c:	485e      	ldr	r0, [pc, #376]	; (8006488 <_printf_i+0x244>)
 800630e:	230a      	movs	r3, #10
 8006310:	e019      	b.n	8006346 <_printf_i+0x102>
 8006312:	680e      	ldr	r6, [r1, #0]
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800631a:	bf18      	it	ne
 800631c:	b236      	sxthne	r6, r6
 800631e:	e7ef      	b.n	8006300 <_printf_i+0xbc>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	6820      	ldr	r0, [r4, #0]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	6029      	str	r1, [r5, #0]
 8006328:	0601      	lsls	r1, r0, #24
 800632a:	d501      	bpl.n	8006330 <_printf_i+0xec>
 800632c:	681e      	ldr	r6, [r3, #0]
 800632e:	e002      	b.n	8006336 <_printf_i+0xf2>
 8006330:	0646      	lsls	r6, r0, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0xe8>
 8006334:	881e      	ldrh	r6, [r3, #0]
 8006336:	4854      	ldr	r0, [pc, #336]	; (8006488 <_printf_i+0x244>)
 8006338:	2f6f      	cmp	r7, #111	; 0x6f
 800633a:	bf0c      	ite	eq
 800633c:	2308      	moveq	r3, #8
 800633e:	230a      	movne	r3, #10
 8006340:	2100      	movs	r1, #0
 8006342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006346:	6865      	ldr	r5, [r4, #4]
 8006348:	60a5      	str	r5, [r4, #8]
 800634a:	2d00      	cmp	r5, #0
 800634c:	bfa2      	ittt	ge
 800634e:	6821      	ldrge	r1, [r4, #0]
 8006350:	f021 0104 	bicge.w	r1, r1, #4
 8006354:	6021      	strge	r1, [r4, #0]
 8006356:	b90e      	cbnz	r6, 800635c <_printf_i+0x118>
 8006358:	2d00      	cmp	r5, #0
 800635a:	d04d      	beq.n	80063f8 <_printf_i+0x1b4>
 800635c:	4615      	mov	r5, r2
 800635e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006362:	fb03 6711 	mls	r7, r3, r1, r6
 8006366:	5dc7      	ldrb	r7, [r0, r7]
 8006368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800636c:	4637      	mov	r7, r6
 800636e:	42bb      	cmp	r3, r7
 8006370:	460e      	mov	r6, r1
 8006372:	d9f4      	bls.n	800635e <_printf_i+0x11a>
 8006374:	2b08      	cmp	r3, #8
 8006376:	d10b      	bne.n	8006390 <_printf_i+0x14c>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	07de      	lsls	r6, r3, #31
 800637c:	d508      	bpl.n	8006390 <_printf_i+0x14c>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	6861      	ldr	r1, [r4, #4]
 8006382:	4299      	cmp	r1, r3
 8006384:	bfde      	ittt	le
 8006386:	2330      	movle	r3, #48	; 0x30
 8006388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800638c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006390:	1b52      	subs	r2, r2, r5
 8006392:	6122      	str	r2, [r4, #16]
 8006394:	f8cd a000 	str.w	sl, [sp]
 8006398:	464b      	mov	r3, r9
 800639a:	aa03      	add	r2, sp, #12
 800639c:	4621      	mov	r1, r4
 800639e:	4640      	mov	r0, r8
 80063a0:	f7ff fee2 	bl	8006168 <_printf_common>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d14c      	bne.n	8006442 <_printf_i+0x1fe>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	b004      	add	sp, #16
 80063ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b2:	4835      	ldr	r0, [pc, #212]	; (8006488 <_printf_i+0x244>)
 80063b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80063b8:	6829      	ldr	r1, [r5, #0]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80063c0:	6029      	str	r1, [r5, #0]
 80063c2:	061d      	lsls	r5, r3, #24
 80063c4:	d514      	bpl.n	80063f0 <_printf_i+0x1ac>
 80063c6:	07df      	lsls	r7, r3, #31
 80063c8:	bf44      	itt	mi
 80063ca:	f043 0320 	orrmi.w	r3, r3, #32
 80063ce:	6023      	strmi	r3, [r4, #0]
 80063d0:	b91e      	cbnz	r6, 80063da <_printf_i+0x196>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	f023 0320 	bic.w	r3, r3, #32
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	2310      	movs	r3, #16
 80063dc:	e7b0      	b.n	8006340 <_printf_i+0xfc>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	f043 0320 	orr.w	r3, r3, #32
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	2378      	movs	r3, #120	; 0x78
 80063e8:	4828      	ldr	r0, [pc, #160]	; (800648c <_printf_i+0x248>)
 80063ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ee:	e7e3      	b.n	80063b8 <_printf_i+0x174>
 80063f0:	0659      	lsls	r1, r3, #25
 80063f2:	bf48      	it	mi
 80063f4:	b2b6      	uxthmi	r6, r6
 80063f6:	e7e6      	b.n	80063c6 <_printf_i+0x182>
 80063f8:	4615      	mov	r5, r2
 80063fa:	e7bb      	b.n	8006374 <_printf_i+0x130>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	6826      	ldr	r6, [r4, #0]
 8006400:	6961      	ldr	r1, [r4, #20]
 8006402:	1d18      	adds	r0, r3, #4
 8006404:	6028      	str	r0, [r5, #0]
 8006406:	0635      	lsls	r5, r6, #24
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	d501      	bpl.n	8006410 <_printf_i+0x1cc>
 800640c:	6019      	str	r1, [r3, #0]
 800640e:	e002      	b.n	8006416 <_printf_i+0x1d2>
 8006410:	0670      	lsls	r0, r6, #25
 8006412:	d5fb      	bpl.n	800640c <_printf_i+0x1c8>
 8006414:	8019      	strh	r1, [r3, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	4615      	mov	r5, r2
 800641c:	e7ba      	b.n	8006394 <_printf_i+0x150>
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	1d1a      	adds	r2, r3, #4
 8006422:	602a      	str	r2, [r5, #0]
 8006424:	681d      	ldr	r5, [r3, #0]
 8006426:	6862      	ldr	r2, [r4, #4]
 8006428:	2100      	movs	r1, #0
 800642a:	4628      	mov	r0, r5
 800642c:	f7f9 fee0 	bl	80001f0 <memchr>
 8006430:	b108      	cbz	r0, 8006436 <_printf_i+0x1f2>
 8006432:	1b40      	subs	r0, r0, r5
 8006434:	6060      	str	r0, [r4, #4]
 8006436:	6863      	ldr	r3, [r4, #4]
 8006438:	6123      	str	r3, [r4, #16]
 800643a:	2300      	movs	r3, #0
 800643c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006440:	e7a8      	b.n	8006394 <_printf_i+0x150>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	462a      	mov	r2, r5
 8006446:	4649      	mov	r1, r9
 8006448:	4640      	mov	r0, r8
 800644a:	47d0      	blx	sl
 800644c:	3001      	adds	r0, #1
 800644e:	d0ab      	beq.n	80063a8 <_printf_i+0x164>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	079b      	lsls	r3, r3, #30
 8006454:	d413      	bmi.n	800647e <_printf_i+0x23a>
 8006456:	68e0      	ldr	r0, [r4, #12]
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	4298      	cmp	r0, r3
 800645c:	bfb8      	it	lt
 800645e:	4618      	movlt	r0, r3
 8006460:	e7a4      	b.n	80063ac <_printf_i+0x168>
 8006462:	2301      	movs	r3, #1
 8006464:	4632      	mov	r2, r6
 8006466:	4649      	mov	r1, r9
 8006468:	4640      	mov	r0, r8
 800646a:	47d0      	blx	sl
 800646c:	3001      	adds	r0, #1
 800646e:	d09b      	beq.n	80063a8 <_printf_i+0x164>
 8006470:	3501      	adds	r5, #1
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	9903      	ldr	r1, [sp, #12]
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	42ab      	cmp	r3, r5
 800647a:	dcf2      	bgt.n	8006462 <_printf_i+0x21e>
 800647c:	e7eb      	b.n	8006456 <_printf_i+0x212>
 800647e:	2500      	movs	r5, #0
 8006480:	f104 0619 	add.w	r6, r4, #25
 8006484:	e7f5      	b.n	8006472 <_printf_i+0x22e>
 8006486:	bf00      	nop
 8006488:	0800705a 	.word	0x0800705a
 800648c:	0800706b 	.word	0x0800706b

08006490 <__swbuf_r>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	460e      	mov	r6, r1
 8006494:	4614      	mov	r4, r2
 8006496:	4605      	mov	r5, r0
 8006498:	b118      	cbz	r0, 80064a2 <__swbuf_r+0x12>
 800649a:	6983      	ldr	r3, [r0, #24]
 800649c:	b90b      	cbnz	r3, 80064a2 <__swbuf_r+0x12>
 800649e:	f000 f9d9 	bl	8006854 <__sinit>
 80064a2:	4b21      	ldr	r3, [pc, #132]	; (8006528 <__swbuf_r+0x98>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	d12b      	bne.n	8006500 <__swbuf_r+0x70>
 80064a8:	686c      	ldr	r4, [r5, #4]
 80064aa:	69a3      	ldr	r3, [r4, #24]
 80064ac:	60a3      	str	r3, [r4, #8]
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	071a      	lsls	r2, r3, #28
 80064b2:	d52f      	bpl.n	8006514 <__swbuf_r+0x84>
 80064b4:	6923      	ldr	r3, [r4, #16]
 80064b6:	b36b      	cbz	r3, 8006514 <__swbuf_r+0x84>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	1ac0      	subs	r0, r0, r3
 80064be:	6963      	ldr	r3, [r4, #20]
 80064c0:	b2f6      	uxtb	r6, r6
 80064c2:	4283      	cmp	r3, r0
 80064c4:	4637      	mov	r7, r6
 80064c6:	dc04      	bgt.n	80064d2 <__swbuf_r+0x42>
 80064c8:	4621      	mov	r1, r4
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 f92e 	bl	800672c <_fflush_r>
 80064d0:	bb30      	cbnz	r0, 8006520 <__swbuf_r+0x90>
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	701e      	strb	r6, [r3, #0]
 80064e0:	6963      	ldr	r3, [r4, #20]
 80064e2:	3001      	adds	r0, #1
 80064e4:	4283      	cmp	r3, r0
 80064e6:	d004      	beq.n	80064f2 <__swbuf_r+0x62>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	07db      	lsls	r3, r3, #31
 80064ec:	d506      	bpl.n	80064fc <__swbuf_r+0x6c>
 80064ee:	2e0a      	cmp	r6, #10
 80064f0:	d104      	bne.n	80064fc <__swbuf_r+0x6c>
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 f919 	bl	800672c <_fflush_r>
 80064fa:	b988      	cbnz	r0, 8006520 <__swbuf_r+0x90>
 80064fc:	4638      	mov	r0, r7
 80064fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <__swbuf_r+0x9c>)
 8006502:	429c      	cmp	r4, r3
 8006504:	d101      	bne.n	800650a <__swbuf_r+0x7a>
 8006506:	68ac      	ldr	r4, [r5, #8]
 8006508:	e7cf      	b.n	80064aa <__swbuf_r+0x1a>
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <__swbuf_r+0xa0>)
 800650c:	429c      	cmp	r4, r3
 800650e:	bf08      	it	eq
 8006510:	68ec      	ldreq	r4, [r5, #12]
 8006512:	e7ca      	b.n	80064aa <__swbuf_r+0x1a>
 8006514:	4621      	mov	r1, r4
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f80c 	bl	8006534 <__swsetup_r>
 800651c:	2800      	cmp	r0, #0
 800651e:	d0cb      	beq.n	80064b8 <__swbuf_r+0x28>
 8006520:	f04f 37ff 	mov.w	r7, #4294967295
 8006524:	e7ea      	b.n	80064fc <__swbuf_r+0x6c>
 8006526:	bf00      	nop
 8006528:	0800709c 	.word	0x0800709c
 800652c:	080070bc 	.word	0x080070bc
 8006530:	0800707c 	.word	0x0800707c

08006534 <__swsetup_r>:
 8006534:	4b32      	ldr	r3, [pc, #200]	; (8006600 <__swsetup_r+0xcc>)
 8006536:	b570      	push	{r4, r5, r6, lr}
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	4606      	mov	r6, r0
 800653c:	460c      	mov	r4, r1
 800653e:	b125      	cbz	r5, 800654a <__swsetup_r+0x16>
 8006540:	69ab      	ldr	r3, [r5, #24]
 8006542:	b913      	cbnz	r3, 800654a <__swsetup_r+0x16>
 8006544:	4628      	mov	r0, r5
 8006546:	f000 f985 	bl	8006854 <__sinit>
 800654a:	4b2e      	ldr	r3, [pc, #184]	; (8006604 <__swsetup_r+0xd0>)
 800654c:	429c      	cmp	r4, r3
 800654e:	d10f      	bne.n	8006570 <__swsetup_r+0x3c>
 8006550:	686c      	ldr	r4, [r5, #4]
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006558:	0719      	lsls	r1, r3, #28
 800655a:	d42c      	bmi.n	80065b6 <__swsetup_r+0x82>
 800655c:	06dd      	lsls	r5, r3, #27
 800655e:	d411      	bmi.n	8006584 <__swsetup_r+0x50>
 8006560:	2309      	movs	r3, #9
 8006562:	6033      	str	r3, [r6, #0]
 8006564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	e03e      	b.n	80065ee <__swsetup_r+0xba>
 8006570:	4b25      	ldr	r3, [pc, #148]	; (8006608 <__swsetup_r+0xd4>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <__swsetup_r+0x46>
 8006576:	68ac      	ldr	r4, [r5, #8]
 8006578:	e7eb      	b.n	8006552 <__swsetup_r+0x1e>
 800657a:	4b24      	ldr	r3, [pc, #144]	; (800660c <__swsetup_r+0xd8>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68ec      	ldreq	r4, [r5, #12]
 8006582:	e7e6      	b.n	8006552 <__swsetup_r+0x1e>
 8006584:	0758      	lsls	r0, r3, #29
 8006586:	d512      	bpl.n	80065ae <__swsetup_r+0x7a>
 8006588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800658a:	b141      	cbz	r1, 800659e <__swsetup_r+0x6a>
 800658c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006590:	4299      	cmp	r1, r3
 8006592:	d002      	beq.n	800659a <__swsetup_r+0x66>
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff fc41 	bl	8005e1c <_free_r>
 800659a:	2300      	movs	r3, #0
 800659c:	6363      	str	r3, [r4, #52]	; 0x34
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065a4:	81a3      	strh	r3, [r4, #12]
 80065a6:	2300      	movs	r3, #0
 80065a8:	6063      	str	r3, [r4, #4]
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	6023      	str	r3, [r4, #0]
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f043 0308 	orr.w	r3, r3, #8
 80065b4:	81a3      	strh	r3, [r4, #12]
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	b94b      	cbnz	r3, 80065ce <__swsetup_r+0x9a>
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c4:	d003      	beq.n	80065ce <__swsetup_r+0x9a>
 80065c6:	4621      	mov	r1, r4
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 fa09 	bl	80069e0 <__smakebuf_r>
 80065ce:	89a0      	ldrh	r0, [r4, #12]
 80065d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065d4:	f010 0301 	ands.w	r3, r0, #1
 80065d8:	d00a      	beq.n	80065f0 <__swsetup_r+0xbc>
 80065da:	2300      	movs	r3, #0
 80065dc:	60a3      	str	r3, [r4, #8]
 80065de:	6963      	ldr	r3, [r4, #20]
 80065e0:	425b      	negs	r3, r3
 80065e2:	61a3      	str	r3, [r4, #24]
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	b943      	cbnz	r3, 80065fa <__swsetup_r+0xc6>
 80065e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065ec:	d1ba      	bne.n	8006564 <__swsetup_r+0x30>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	0781      	lsls	r1, r0, #30
 80065f2:	bf58      	it	pl
 80065f4:	6963      	ldrpl	r3, [r4, #20]
 80065f6:	60a3      	str	r3, [r4, #8]
 80065f8:	e7f4      	b.n	80065e4 <__swsetup_r+0xb0>
 80065fa:	2000      	movs	r0, #0
 80065fc:	e7f7      	b.n	80065ee <__swsetup_r+0xba>
 80065fe:	bf00      	nop
 8006600:	2000000c 	.word	0x2000000c
 8006604:	0800709c 	.word	0x0800709c
 8006608:	080070bc 	.word	0x080070bc
 800660c:	0800707c 	.word	0x0800707c

08006610 <abort>:
 8006610:	b508      	push	{r3, lr}
 8006612:	2006      	movs	r0, #6
 8006614:	f000 fa4c 	bl	8006ab0 <raise>
 8006618:	2001      	movs	r0, #1
 800661a:	f7fb fbd1 	bl	8001dc0 <_exit>
	...

08006620 <__sflush_r>:
 8006620:	898a      	ldrh	r2, [r1, #12]
 8006622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006626:	4605      	mov	r5, r0
 8006628:	0710      	lsls	r0, r2, #28
 800662a:	460c      	mov	r4, r1
 800662c:	d458      	bmi.n	80066e0 <__sflush_r+0xc0>
 800662e:	684b      	ldr	r3, [r1, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dc05      	bgt.n	8006640 <__sflush_r+0x20>
 8006634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	dc02      	bgt.n	8006640 <__sflush_r+0x20>
 800663a:	2000      	movs	r0, #0
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006642:	2e00      	cmp	r6, #0
 8006644:	d0f9      	beq.n	800663a <__sflush_r+0x1a>
 8006646:	2300      	movs	r3, #0
 8006648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800664c:	682f      	ldr	r7, [r5, #0]
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	d032      	beq.n	80066b8 <__sflush_r+0x98>
 8006652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	075a      	lsls	r2, r3, #29
 8006658:	d505      	bpl.n	8006666 <__sflush_r+0x46>
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	1ac0      	subs	r0, r0, r3
 800665e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006660:	b10b      	cbz	r3, 8006666 <__sflush_r+0x46>
 8006662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006664:	1ac0      	subs	r0, r0, r3
 8006666:	2300      	movs	r3, #0
 8006668:	4602      	mov	r2, r0
 800666a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666c:	6a21      	ldr	r1, [r4, #32]
 800666e:	4628      	mov	r0, r5
 8006670:	47b0      	blx	r6
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	d106      	bne.n	8006686 <__sflush_r+0x66>
 8006678:	6829      	ldr	r1, [r5, #0]
 800667a:	291d      	cmp	r1, #29
 800667c:	d82c      	bhi.n	80066d8 <__sflush_r+0xb8>
 800667e:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <__sflush_r+0x108>)
 8006680:	40ca      	lsrs	r2, r1
 8006682:	07d6      	lsls	r6, r2, #31
 8006684:	d528      	bpl.n	80066d8 <__sflush_r+0xb8>
 8006686:	2200      	movs	r2, #0
 8006688:	6062      	str	r2, [r4, #4]
 800668a:	04d9      	lsls	r1, r3, #19
 800668c:	6922      	ldr	r2, [r4, #16]
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	d504      	bpl.n	800669c <__sflush_r+0x7c>
 8006692:	1c42      	adds	r2, r0, #1
 8006694:	d101      	bne.n	800669a <__sflush_r+0x7a>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	b903      	cbnz	r3, 800669c <__sflush_r+0x7c>
 800669a:	6560      	str	r0, [r4, #84]	; 0x54
 800669c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800669e:	602f      	str	r7, [r5, #0]
 80066a0:	2900      	cmp	r1, #0
 80066a2:	d0ca      	beq.n	800663a <__sflush_r+0x1a>
 80066a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <__sflush_r+0x92>
 80066ac:	4628      	mov	r0, r5
 80066ae:	f7ff fbb5 	bl	8005e1c <_free_r>
 80066b2:	2000      	movs	r0, #0
 80066b4:	6360      	str	r0, [r4, #52]	; 0x34
 80066b6:	e7c1      	b.n	800663c <__sflush_r+0x1c>
 80066b8:	6a21      	ldr	r1, [r4, #32]
 80066ba:	2301      	movs	r3, #1
 80066bc:	4628      	mov	r0, r5
 80066be:	47b0      	blx	r6
 80066c0:	1c41      	adds	r1, r0, #1
 80066c2:	d1c7      	bne.n	8006654 <__sflush_r+0x34>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0c4      	beq.n	8006654 <__sflush_r+0x34>
 80066ca:	2b1d      	cmp	r3, #29
 80066cc:	d001      	beq.n	80066d2 <__sflush_r+0xb2>
 80066ce:	2b16      	cmp	r3, #22
 80066d0:	d101      	bne.n	80066d6 <__sflush_r+0xb6>
 80066d2:	602f      	str	r7, [r5, #0]
 80066d4:	e7b1      	b.n	800663a <__sflush_r+0x1a>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	e7ad      	b.n	800663c <__sflush_r+0x1c>
 80066e0:	690f      	ldr	r7, [r1, #16]
 80066e2:	2f00      	cmp	r7, #0
 80066e4:	d0a9      	beq.n	800663a <__sflush_r+0x1a>
 80066e6:	0793      	lsls	r3, r2, #30
 80066e8:	680e      	ldr	r6, [r1, #0]
 80066ea:	bf08      	it	eq
 80066ec:	694b      	ldreq	r3, [r1, #20]
 80066ee:	600f      	str	r7, [r1, #0]
 80066f0:	bf18      	it	ne
 80066f2:	2300      	movne	r3, #0
 80066f4:	eba6 0807 	sub.w	r8, r6, r7
 80066f8:	608b      	str	r3, [r1, #8]
 80066fa:	f1b8 0f00 	cmp.w	r8, #0
 80066fe:	dd9c      	ble.n	800663a <__sflush_r+0x1a>
 8006700:	6a21      	ldr	r1, [r4, #32]
 8006702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006704:	4643      	mov	r3, r8
 8006706:	463a      	mov	r2, r7
 8006708:	4628      	mov	r0, r5
 800670a:	47b0      	blx	r6
 800670c:	2800      	cmp	r0, #0
 800670e:	dc06      	bgt.n	800671e <__sflush_r+0xfe>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	e78e      	b.n	800663c <__sflush_r+0x1c>
 800671e:	4407      	add	r7, r0
 8006720:	eba8 0800 	sub.w	r8, r8, r0
 8006724:	e7e9      	b.n	80066fa <__sflush_r+0xda>
 8006726:	bf00      	nop
 8006728:	20400001 	.word	0x20400001

0800672c <_fflush_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	690b      	ldr	r3, [r1, #16]
 8006730:	4605      	mov	r5, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b913      	cbnz	r3, 800673c <_fflush_r+0x10>
 8006736:	2500      	movs	r5, #0
 8006738:	4628      	mov	r0, r5
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	b118      	cbz	r0, 8006746 <_fflush_r+0x1a>
 800673e:	6983      	ldr	r3, [r0, #24]
 8006740:	b90b      	cbnz	r3, 8006746 <_fflush_r+0x1a>
 8006742:	f000 f887 	bl	8006854 <__sinit>
 8006746:	4b14      	ldr	r3, [pc, #80]	; (8006798 <_fflush_r+0x6c>)
 8006748:	429c      	cmp	r4, r3
 800674a:	d11b      	bne.n	8006784 <_fflush_r+0x58>
 800674c:	686c      	ldr	r4, [r5, #4]
 800674e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0ef      	beq.n	8006736 <_fflush_r+0xa>
 8006756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006758:	07d0      	lsls	r0, r2, #31
 800675a:	d404      	bmi.n	8006766 <_fflush_r+0x3a>
 800675c:	0599      	lsls	r1, r3, #22
 800675e:	d402      	bmi.n	8006766 <_fflush_r+0x3a>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f000 f915 	bl	8006990 <__retarget_lock_acquire_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	4621      	mov	r1, r4
 800676a:	f7ff ff59 	bl	8006620 <__sflush_r>
 800676e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006770:	07da      	lsls	r2, r3, #31
 8006772:	4605      	mov	r5, r0
 8006774:	d4e0      	bmi.n	8006738 <_fflush_r+0xc>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	059b      	lsls	r3, r3, #22
 800677a:	d4dd      	bmi.n	8006738 <_fflush_r+0xc>
 800677c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677e:	f000 f908 	bl	8006992 <__retarget_lock_release_recursive>
 8006782:	e7d9      	b.n	8006738 <_fflush_r+0xc>
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <_fflush_r+0x70>)
 8006786:	429c      	cmp	r4, r3
 8006788:	d101      	bne.n	800678e <_fflush_r+0x62>
 800678a:	68ac      	ldr	r4, [r5, #8]
 800678c:	e7df      	b.n	800674e <_fflush_r+0x22>
 800678e:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <_fflush_r+0x74>)
 8006790:	429c      	cmp	r4, r3
 8006792:	bf08      	it	eq
 8006794:	68ec      	ldreq	r4, [r5, #12]
 8006796:	e7da      	b.n	800674e <_fflush_r+0x22>
 8006798:	0800709c 	.word	0x0800709c
 800679c:	080070bc 	.word	0x080070bc
 80067a0:	0800707c 	.word	0x0800707c

080067a4 <std>:
 80067a4:	2300      	movs	r3, #0
 80067a6:	b510      	push	{r4, lr}
 80067a8:	4604      	mov	r4, r0
 80067aa:	e9c0 3300 	strd	r3, r3, [r0]
 80067ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067b2:	6083      	str	r3, [r0, #8]
 80067b4:	8181      	strh	r1, [r0, #12]
 80067b6:	6643      	str	r3, [r0, #100]	; 0x64
 80067b8:	81c2      	strh	r2, [r0, #14]
 80067ba:	6183      	str	r3, [r0, #24]
 80067bc:	4619      	mov	r1, r3
 80067be:	2208      	movs	r2, #8
 80067c0:	305c      	adds	r0, #92	; 0x5c
 80067c2:	f7fd fb89 	bl	8003ed8 <memset>
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <std+0x38>)
 80067c8:	6263      	str	r3, [r4, #36]	; 0x24
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <std+0x3c>)
 80067cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <std+0x40>)
 80067d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <std+0x44>)
 80067d4:	6224      	str	r4, [r4, #32]
 80067d6:	6323      	str	r3, [r4, #48]	; 0x30
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	08006ae9 	.word	0x08006ae9
 80067e0:	08006b0b 	.word	0x08006b0b
 80067e4:	08006b43 	.word	0x08006b43
 80067e8:	08006b67 	.word	0x08006b67

080067ec <_cleanup_r>:
 80067ec:	4901      	ldr	r1, [pc, #4]	; (80067f4 <_cleanup_r+0x8>)
 80067ee:	f000 b8af 	b.w	8006950 <_fwalk_reent>
 80067f2:	bf00      	nop
 80067f4:	0800672d 	.word	0x0800672d

080067f8 <__sfmoreglue>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	2268      	movs	r2, #104	; 0x68
 80067fc:	1e4d      	subs	r5, r1, #1
 80067fe:	4355      	muls	r5, r2
 8006800:	460e      	mov	r6, r1
 8006802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006806:	f7ff fa2b 	bl	8005c60 <_malloc_r>
 800680a:	4604      	mov	r4, r0
 800680c:	b140      	cbz	r0, 8006820 <__sfmoreglue+0x28>
 800680e:	2100      	movs	r1, #0
 8006810:	e9c0 1600 	strd	r1, r6, [r0]
 8006814:	300c      	adds	r0, #12
 8006816:	60a0      	str	r0, [r4, #8]
 8006818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800681c:	f7fd fb5c 	bl	8003ed8 <memset>
 8006820:	4620      	mov	r0, r4
 8006822:	bd70      	pop	{r4, r5, r6, pc}

08006824 <__sfp_lock_acquire>:
 8006824:	4801      	ldr	r0, [pc, #4]	; (800682c <__sfp_lock_acquire+0x8>)
 8006826:	f000 b8b3 	b.w	8006990 <__retarget_lock_acquire_recursive>
 800682a:	bf00      	nop
 800682c:	20000389 	.word	0x20000389

08006830 <__sfp_lock_release>:
 8006830:	4801      	ldr	r0, [pc, #4]	; (8006838 <__sfp_lock_release+0x8>)
 8006832:	f000 b8ae 	b.w	8006992 <__retarget_lock_release_recursive>
 8006836:	bf00      	nop
 8006838:	20000389 	.word	0x20000389

0800683c <__sinit_lock_acquire>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__sinit_lock_acquire+0x8>)
 800683e:	f000 b8a7 	b.w	8006990 <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	2000038a 	.word	0x2000038a

08006848 <__sinit_lock_release>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__sinit_lock_release+0x8>)
 800684a:	f000 b8a2 	b.w	8006992 <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	2000038a 	.word	0x2000038a

08006854 <__sinit>:
 8006854:	b510      	push	{r4, lr}
 8006856:	4604      	mov	r4, r0
 8006858:	f7ff fff0 	bl	800683c <__sinit_lock_acquire>
 800685c:	69a3      	ldr	r3, [r4, #24]
 800685e:	b11b      	cbz	r3, 8006868 <__sinit+0x14>
 8006860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006864:	f7ff bff0 	b.w	8006848 <__sinit_lock_release>
 8006868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800686c:	6523      	str	r3, [r4, #80]	; 0x50
 800686e:	4b13      	ldr	r3, [pc, #76]	; (80068bc <__sinit+0x68>)
 8006870:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <__sinit+0x6c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	62a2      	str	r2, [r4, #40]	; 0x28
 8006876:	42a3      	cmp	r3, r4
 8006878:	bf04      	itt	eq
 800687a:	2301      	moveq	r3, #1
 800687c:	61a3      	streq	r3, [r4, #24]
 800687e:	4620      	mov	r0, r4
 8006880:	f000 f820 	bl	80068c4 <__sfp>
 8006884:	6060      	str	r0, [r4, #4]
 8006886:	4620      	mov	r0, r4
 8006888:	f000 f81c 	bl	80068c4 <__sfp>
 800688c:	60a0      	str	r0, [r4, #8]
 800688e:	4620      	mov	r0, r4
 8006890:	f000 f818 	bl	80068c4 <__sfp>
 8006894:	2200      	movs	r2, #0
 8006896:	60e0      	str	r0, [r4, #12]
 8006898:	2104      	movs	r1, #4
 800689a:	6860      	ldr	r0, [r4, #4]
 800689c:	f7ff ff82 	bl	80067a4 <std>
 80068a0:	68a0      	ldr	r0, [r4, #8]
 80068a2:	2201      	movs	r2, #1
 80068a4:	2109      	movs	r1, #9
 80068a6:	f7ff ff7d 	bl	80067a4 <std>
 80068aa:	68e0      	ldr	r0, [r4, #12]
 80068ac:	2202      	movs	r2, #2
 80068ae:	2112      	movs	r1, #18
 80068b0:	f7ff ff78 	bl	80067a4 <std>
 80068b4:	2301      	movs	r3, #1
 80068b6:	61a3      	str	r3, [r4, #24]
 80068b8:	e7d2      	b.n	8006860 <__sinit+0xc>
 80068ba:	bf00      	nop
 80068bc:	08006cb0 	.word	0x08006cb0
 80068c0:	080067ed 	.word	0x080067ed

080068c4 <__sfp>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	4607      	mov	r7, r0
 80068c8:	f7ff ffac 	bl	8006824 <__sfp_lock_acquire>
 80068cc:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <__sfp+0x84>)
 80068ce:	681e      	ldr	r6, [r3, #0]
 80068d0:	69b3      	ldr	r3, [r6, #24]
 80068d2:	b913      	cbnz	r3, 80068da <__sfp+0x16>
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff ffbd 	bl	8006854 <__sinit>
 80068da:	3648      	adds	r6, #72	; 0x48
 80068dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	d503      	bpl.n	80068ec <__sfp+0x28>
 80068e4:	6833      	ldr	r3, [r6, #0]
 80068e6:	b30b      	cbz	r3, 800692c <__sfp+0x68>
 80068e8:	6836      	ldr	r6, [r6, #0]
 80068ea:	e7f7      	b.n	80068dc <__sfp+0x18>
 80068ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068f0:	b9d5      	cbnz	r5, 8006928 <__sfp+0x64>
 80068f2:	4b16      	ldr	r3, [pc, #88]	; (800694c <__sfp+0x88>)
 80068f4:	60e3      	str	r3, [r4, #12]
 80068f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068fa:	6665      	str	r5, [r4, #100]	; 0x64
 80068fc:	f000 f847 	bl	800698e <__retarget_lock_init_recursive>
 8006900:	f7ff ff96 	bl	8006830 <__sfp_lock_release>
 8006904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800690c:	6025      	str	r5, [r4, #0]
 800690e:	61a5      	str	r5, [r4, #24]
 8006910:	2208      	movs	r2, #8
 8006912:	4629      	mov	r1, r5
 8006914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006918:	f7fd fade 	bl	8003ed8 <memset>
 800691c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006924:	4620      	mov	r0, r4
 8006926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006928:	3468      	adds	r4, #104	; 0x68
 800692a:	e7d9      	b.n	80068e0 <__sfp+0x1c>
 800692c:	2104      	movs	r1, #4
 800692e:	4638      	mov	r0, r7
 8006930:	f7ff ff62 	bl	80067f8 <__sfmoreglue>
 8006934:	4604      	mov	r4, r0
 8006936:	6030      	str	r0, [r6, #0]
 8006938:	2800      	cmp	r0, #0
 800693a:	d1d5      	bne.n	80068e8 <__sfp+0x24>
 800693c:	f7ff ff78 	bl	8006830 <__sfp_lock_release>
 8006940:	230c      	movs	r3, #12
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	e7ee      	b.n	8006924 <__sfp+0x60>
 8006946:	bf00      	nop
 8006948:	08006cb0 	.word	0x08006cb0
 800694c:	ffff0001 	.word	0xffff0001

08006950 <_fwalk_reent>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	4606      	mov	r6, r0
 8006956:	4688      	mov	r8, r1
 8006958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800695c:	2700      	movs	r7, #0
 800695e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006962:	f1b9 0901 	subs.w	r9, r9, #1
 8006966:	d505      	bpl.n	8006974 <_fwalk_reent+0x24>
 8006968:	6824      	ldr	r4, [r4, #0]
 800696a:	2c00      	cmp	r4, #0
 800696c:	d1f7      	bne.n	800695e <_fwalk_reent+0xe>
 800696e:	4638      	mov	r0, r7
 8006970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006974:	89ab      	ldrh	r3, [r5, #12]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d907      	bls.n	800698a <_fwalk_reent+0x3a>
 800697a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800697e:	3301      	adds	r3, #1
 8006980:	d003      	beq.n	800698a <_fwalk_reent+0x3a>
 8006982:	4629      	mov	r1, r5
 8006984:	4630      	mov	r0, r6
 8006986:	47c0      	blx	r8
 8006988:	4307      	orrs	r7, r0
 800698a:	3568      	adds	r5, #104	; 0x68
 800698c:	e7e9      	b.n	8006962 <_fwalk_reent+0x12>

0800698e <__retarget_lock_init_recursive>:
 800698e:	4770      	bx	lr

08006990 <__retarget_lock_acquire_recursive>:
 8006990:	4770      	bx	lr

08006992 <__retarget_lock_release_recursive>:
 8006992:	4770      	bx	lr

08006994 <__swhatbuf_r>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	460e      	mov	r6, r1
 8006998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699c:	2900      	cmp	r1, #0
 800699e:	b096      	sub	sp, #88	; 0x58
 80069a0:	4614      	mov	r4, r2
 80069a2:	461d      	mov	r5, r3
 80069a4:	da08      	bge.n	80069b8 <__swhatbuf_r+0x24>
 80069a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	061a      	lsls	r2, r3, #24
 80069b0:	d410      	bmi.n	80069d4 <__swhatbuf_r+0x40>
 80069b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b6:	e00e      	b.n	80069d6 <__swhatbuf_r+0x42>
 80069b8:	466a      	mov	r2, sp
 80069ba:	f000 f8fb 	bl	8006bb4 <_fstat_r>
 80069be:	2800      	cmp	r0, #0
 80069c0:	dbf1      	blt.n	80069a6 <__swhatbuf_r+0x12>
 80069c2:	9a01      	ldr	r2, [sp, #4]
 80069c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069cc:	425a      	negs	r2, r3
 80069ce:	415a      	adcs	r2, r3
 80069d0:	602a      	str	r2, [r5, #0]
 80069d2:	e7ee      	b.n	80069b2 <__swhatbuf_r+0x1e>
 80069d4:	2340      	movs	r3, #64	; 0x40
 80069d6:	2000      	movs	r0, #0
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	b016      	add	sp, #88	; 0x58
 80069dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080069e0 <__smakebuf_r>:
 80069e0:	898b      	ldrh	r3, [r1, #12]
 80069e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069e4:	079d      	lsls	r5, r3, #30
 80069e6:	4606      	mov	r6, r0
 80069e8:	460c      	mov	r4, r1
 80069ea:	d507      	bpl.n	80069fc <__smakebuf_r+0x1c>
 80069ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	6123      	str	r3, [r4, #16]
 80069f4:	2301      	movs	r3, #1
 80069f6:	6163      	str	r3, [r4, #20]
 80069f8:	b002      	add	sp, #8
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	ab01      	add	r3, sp, #4
 80069fe:	466a      	mov	r2, sp
 8006a00:	f7ff ffc8 	bl	8006994 <__swhatbuf_r>
 8006a04:	9900      	ldr	r1, [sp, #0]
 8006a06:	4605      	mov	r5, r0
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7ff f929 	bl	8005c60 <_malloc_r>
 8006a0e:	b948      	cbnz	r0, 8006a24 <__smakebuf_r+0x44>
 8006a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a14:	059a      	lsls	r2, r3, #22
 8006a16:	d4ef      	bmi.n	80069f8 <__smakebuf_r+0x18>
 8006a18:	f023 0303 	bic.w	r3, r3, #3
 8006a1c:	f043 0302 	orr.w	r3, r3, #2
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	e7e3      	b.n	80069ec <__smakebuf_r+0xc>
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <__smakebuf_r+0x7c>)
 8006a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	6020      	str	r0, [r4, #0]
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	81a3      	strh	r3, [r4, #12]
 8006a32:	9b00      	ldr	r3, [sp, #0]
 8006a34:	6163      	str	r3, [r4, #20]
 8006a36:	9b01      	ldr	r3, [sp, #4]
 8006a38:	6120      	str	r0, [r4, #16]
 8006a3a:	b15b      	cbz	r3, 8006a54 <__smakebuf_r+0x74>
 8006a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 f8c9 	bl	8006bd8 <_isatty_r>
 8006a46:	b128      	cbz	r0, 8006a54 <__smakebuf_r+0x74>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	81a3      	strh	r3, [r4, #12]
 8006a54:	89a0      	ldrh	r0, [r4, #12]
 8006a56:	4305      	orrs	r5, r0
 8006a58:	81a5      	strh	r5, [r4, #12]
 8006a5a:	e7cd      	b.n	80069f8 <__smakebuf_r+0x18>
 8006a5c:	080067ed 	.word	0x080067ed

08006a60 <_raise_r>:
 8006a60:	291f      	cmp	r1, #31
 8006a62:	b538      	push	{r3, r4, r5, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	d904      	bls.n	8006a74 <_raise_r+0x14>
 8006a6a:	2316      	movs	r3, #22
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a76:	b112      	cbz	r2, 8006a7e <_raise_r+0x1e>
 8006a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a7c:	b94b      	cbnz	r3, 8006a92 <_raise_r+0x32>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f830 	bl	8006ae4 <_getpid_r>
 8006a84:	462a      	mov	r2, r5
 8006a86:	4601      	mov	r1, r0
 8006a88:	4620      	mov	r0, r4
 8006a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8e:	f000 b817 	b.w	8006ac0 <_kill_r>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d00a      	beq.n	8006aac <_raise_r+0x4c>
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	d103      	bne.n	8006aa2 <_raise_r+0x42>
 8006a9a:	2316      	movs	r3, #22
 8006a9c:	6003      	str	r3, [r0, #0]
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	e7e7      	b.n	8006a72 <_raise_r+0x12>
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	4798      	blx	r3
 8006aac:	2000      	movs	r0, #0
 8006aae:	e7e0      	b.n	8006a72 <_raise_r+0x12>

08006ab0 <raise>:
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <raise+0xc>)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f7ff bfd3 	b.w	8006a60 <_raise_r>
 8006aba:	bf00      	nop
 8006abc:	2000000c 	.word	0x2000000c

08006ac0 <_kill_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d07      	ldr	r5, [pc, #28]	; (8006ae0 <_kill_r+0x20>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	f7fb f967 	bl	8001da0 <_kill>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_kill_r+0x1c>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_kill_r+0x1c>
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000384 	.word	0x20000384

08006ae4 <_getpid_r>:
 8006ae4:	f7fb b954 	b.w	8001d90 <_getpid>

08006ae8 <__sread>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	460c      	mov	r4, r1
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	f000 f894 	bl	8006c1c <_read_r>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	bfab      	itete	ge
 8006af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006afa:	89a3      	ldrhlt	r3, [r4, #12]
 8006afc:	181b      	addge	r3, r3, r0
 8006afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b02:	bfac      	ite	ge
 8006b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b06:	81a3      	strhlt	r3, [r4, #12]
 8006b08:	bd10      	pop	{r4, pc}

08006b0a <__swrite>:
 8006b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	461f      	mov	r7, r3
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	05db      	lsls	r3, r3, #23
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	4616      	mov	r6, r2
 8006b1a:	d505      	bpl.n	8006b28 <__swrite+0x1e>
 8006b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b20:	2302      	movs	r3, #2
 8006b22:	2200      	movs	r2, #0
 8006b24:	f000 f868 	bl	8006bf8 <_lseek_r>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	4632      	mov	r2, r6
 8006b36:	463b      	mov	r3, r7
 8006b38:	4628      	mov	r0, r5
 8006b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3e:	f000 b817 	b.w	8006b70 <_write_r>

08006b42 <__sseek>:
 8006b42:	b510      	push	{r4, lr}
 8006b44:	460c      	mov	r4, r1
 8006b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4a:	f000 f855 	bl	8006bf8 <_lseek_r>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	bf15      	itete	ne
 8006b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b5e:	81a3      	strheq	r3, [r4, #12]
 8006b60:	bf18      	it	ne
 8006b62:	81a3      	strhne	r3, [r4, #12]
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <__sclose>:
 8006b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6a:	f000 b813 	b.w	8006b94 <_close_r>
	...

08006b70 <_write_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4d07      	ldr	r5, [pc, #28]	; (8006b90 <_write_r+0x20>)
 8006b74:	4604      	mov	r4, r0
 8006b76:	4608      	mov	r0, r1
 8006b78:	4611      	mov	r1, r2
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	602a      	str	r2, [r5, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f7fb f945 	bl	8001e0e <_write>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_write_r+0x1e>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_write_r+0x1e>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	20000384 	.word	0x20000384

08006b94 <_close_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4d06      	ldr	r5, [pc, #24]	; (8006bb0 <_close_r+0x1c>)
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	f7fb f951 	bl	8001e46 <_close>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_close_r+0x1a>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_close_r+0x1a>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	20000384 	.word	0x20000384

08006bb4 <_fstat_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d07      	ldr	r5, [pc, #28]	; (8006bd4 <_fstat_r+0x20>)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	f7fb f94c 	bl	8001e5e <_fstat>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d102      	bne.n	8006bd0 <_fstat_r+0x1c>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	b103      	cbz	r3, 8006bd0 <_fstat_r+0x1c>
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000384 	.word	0x20000384

08006bd8 <_isatty_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d06      	ldr	r5, [pc, #24]	; (8006bf4 <_isatty_r+0x1c>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	f7fb f94b 	bl	8001e7e <_isatty>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_isatty_r+0x1a>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_isatty_r+0x1a>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	20000384 	.word	0x20000384

08006bf8 <_lseek_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	; (8006c18 <_lseek_r+0x20>)
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	602a      	str	r2, [r5, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7fb f944 	bl	8001e94 <_lseek>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_lseek_r+0x1e>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_lseek_r+0x1e>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000384 	.word	0x20000384

08006c1c <_read_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d07      	ldr	r5, [pc, #28]	; (8006c3c <_read_r+0x20>)
 8006c20:	4604      	mov	r4, r0
 8006c22:	4608      	mov	r0, r1
 8006c24:	4611      	mov	r1, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f7fb f8d2 	bl	8001dd4 <_read>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_read_r+0x1e>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_read_r+0x1e>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000384 	.word	0x20000384

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
